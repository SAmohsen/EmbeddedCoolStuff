
HH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000201c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  0000201c  000020b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080012c  0080012c  0000217c  2**0
                  ALLOC
  3 .stab         000025f8  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000141e  00000000  00000000  00004774  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008976  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009724  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a2df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <main>
      8a:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ef       	ldi	r26, 0xF7	; 247
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 ef       	ldi	r24, 0xF7	; 247
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_6>:

#include "GPT.h"

static  void (*Gpt1_g_CTC_ptr)(void) = NULL_PTR ;

ISR(TIMER1_COMPA_vect){
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62

if (NULL_PTR !=Gpt1_g_CTC_ptr)
     b70:	80 91 2c 01 	lds	r24, 0x012C
     b74:	90 91 2d 01 	lds	r25, 0x012D
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_6+0x40>
{
	(*Gpt1_g_CTC_ptr)();
     b7c:	e0 91 2c 01 	lds	r30, 0x012C
     b80:	f0 91 2d 01 	lds	r31, 0x012D
     b84:	09 95       	icall
}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <Timer1_InitoneSecond>:

void Timer1_InitoneSecond() {
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00 ;
     bb4:	ef e4       	ldi	r30, 0x4F	; 79
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	10 82       	st	Z, r1
	TCCR1B = 0x00 ;
     bba:	ee e4       	ldi	r30, 0x4E	; 78
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	10 82       	st	Z, r1
	/*1024 PREscale */
	SET_BIT(TCCR1B, CS10);
     bc0:	ae e4       	ldi	r26, 0x4E	; 78
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	ee e4       	ldi	r30, 0x4E	; 78
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
     bce:	ae e4       	ldi	r26, 0x4E	; 78
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ee e4       	ldi	r30, 0x4E	; 78
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8d 7f       	andi	r24, 0xFD	; 253
     bda:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS12);
     bdc:	ae e4       	ldi	r26, 0x4E	; 78
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ee e4       	ldi	r30, 0x4E	; 78
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	84 60       	ori	r24, 0x04	; 4
     be8:	8c 93       	st	X, r24

	/*OCR1A TOP : ctc mode */
	CLR_BIT(TCCR1A, WGM10);
     bea:	af e4       	ldi	r26, 0x4F	; 79
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ef e4       	ldi	r30, 0x4F	; 79
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
     bf8:	af e4       	ldi	r26, 0x4F	; 79
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ef e4       	ldi	r30, 0x4F	; 79
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	8d 7f       	andi	r24, 0xFD	; 253
     c04:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     c06:	ae e4       	ldi	r26, 0x4E	; 78
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ee e4       	ldi	r30, 0x4E	; 78
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 60       	ori	r24, 0x08	; 8
     c12:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
     c14:	ae e4       	ldi	r26, 0x4E	; 78
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	ee e4       	ldi	r30, 0x4E	; 78
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8f 7e       	andi	r24, 0xEF	; 239
     c20:	8c 93       	st	X, r24

	/*a non pwm*/
	SET_BIT(TCCR1A, FOC1A);
     c22:	af e4       	ldi	r26, 0x4F	; 79
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	ef e4       	ldi	r30, 0x4F	; 79
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	88 60       	ori	r24, 0x08	; 8
     c2e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
     c30:	af e4       	ldi	r26, 0x4F	; 79
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	ef e4       	ldi	r30, 0x4F	; 79
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	84 60       	ori	r24, 0x04	; 4
     c3c:	8c 93       	st	X, r24

	/*Module interrupt enable */
	SET_BIT(TIMSK, OCIE1A);
     c3e:	a9 e5       	ldi	r26, 0x59	; 89
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e9 e5       	ldi	r30, 0x59	; 89
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	80 61       	ori	r24, 0x10	; 16
     c4a:	8c 93       	st	X, r24

	/* Initial Value */
	TCNT1 = 0 ;
     c4c:	ec e4       	ldi	r30, 0x4C	; 76
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	11 82       	std	Z+1, r1	; 0x01
     c52:	10 82       	st	Z, r1
	 * res = 1 / Ftimer = 0.001024s
	 * one second = 0.001024 * Top
	 * top = 1000
	 *
	 * */
	OCR1A = 1000;
     c54:	ea e4       	ldi	r30, 0x4A	; 74
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	88 ee       	ldi	r24, 0xE8	; 232
     c5a:	93 e0       	ldi	r25, 0x03	; 3
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	80 83       	st	Z, r24
}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <timer1_setCallback>:

void timer1_setCallback(void (*a_ptr)(void)){
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <timer1_setCallback+0x6>
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01
	Gpt1_g_CTC_ptr =a_ptr ;
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	90 93 2d 01 	sts	0x012D, r25
     c7c:	80 93 2c 01 	sts	0x012C, r24
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <timer1_stop>:

void timer1_stop(void){
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00 ;
     c92:	ef e4       	ldi	r30, 0x4F	; 79
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	10 82       	st	Z, r1
	TCCR1B = 0x00 ;
     c98:	ee e4       	ldi	r30, 0x4E	; 78
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	10 82       	st	Z, r1
	TCNT1 = 0 ;
     c9e:	ec e4       	ldi	r30, 0x4C	; 76
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	11 82       	std	Z+1, r1	; 0x01
     ca4:	10 82       	st	Z, r1
	OCR1A = 0;
     ca6:	ea e4       	ldi	r30, 0x4A	; 74
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	11 82       	std	Z+1, r1	; 0x01
     cac:	10 82       	st	Z, r1
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <keypad_getASCII>:
 *******************************************************************************/

#include "KeyPad.h"


static char keypad_getASCII(uint8 row , uint8 col){
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	67 97       	sbiw	r28, 0x17	; 23
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	89 8b       	std	Y+17, r24	; 0x11
     cca:	6a 8b       	std	Y+18, r22	; 0x12
#else
char key_arr[][4]={{'7','8','9','/'},
				   {'4','5','6','*'},
                   {'1','2','3','-'},
		           {' ','0','=','+'}
				  };
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	9c 8b       	std	Y+20, r25	; 0x14
     cd2:	8b 8b       	std	Y+19, r24	; 0x13
     cd4:	e8 e0       	ldi	r30, 0x08	; 8
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	fe 8b       	std	Y+22, r31	; 0x16
     cda:	ed 8b       	std	Y+21, r30	; 0x15
     cdc:	f0 e1       	ldi	r31, 0x10	; 16
     cde:	ff 8b       	std	Y+23, r31	; 0x17
     ce0:	ed 89       	ldd	r30, Y+21	; 0x15
     ce2:	fe 89       	ldd	r31, Y+22	; 0x16
     ce4:	00 80       	ld	r0, Z
     ce6:	8d 89       	ldd	r24, Y+21	; 0x15
     ce8:	9e 89       	ldd	r25, Y+22	; 0x16
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	9e 8b       	std	Y+22, r25	; 0x16
     cee:	8d 8b       	std	Y+21, r24	; 0x15
     cf0:	eb 89       	ldd	r30, Y+19	; 0x13
     cf2:	fc 89       	ldd	r31, Y+20	; 0x14
     cf4:	00 82       	st	Z, r0
     cf6:	8b 89       	ldd	r24, Y+19	; 0x13
     cf8:	9c 89       	ldd	r25, Y+20	; 0x14
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	9c 8b       	std	Y+20, r25	; 0x14
     cfe:	8b 8b       	std	Y+19, r24	; 0x13
     d00:	9f 89       	ldd	r25, Y+23	; 0x17
     d02:	91 50       	subi	r25, 0x01	; 1
     d04:	9f 8b       	std	Y+23, r25	; 0x17
     d06:	ef 89       	ldd	r30, Y+23	; 0x17
     d08:	ee 23       	and	r30, r30
     d0a:	51 f7       	brne	.-44     	; 0xce0 <keypad_getASCII+0x2c>


#endif
	return key_arr[row][col];
     d0c:	89 89       	ldd	r24, Y+17	; 0x11
     d0e:	48 2f       	mov	r20, r24
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	8a 89       	ldd	r24, Y+18	; 0x12
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	ca 01       	movw	r24, r20
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	28 0f       	add	r18, r24
     d24:	39 1f       	adc	r19, r25
     d26:	ce 01       	movw	r24, r28
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	80 81       	ld	r24, Z
}
     d32:	67 96       	adiw	r28, 0x17	; 23
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <Keypad_getPressedKey>:


uint8 Keypad_getPressedKey() {
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	61 97       	sbiw	r28, 0x11	; 17
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61

	uint8 row;/*loop iterator for keypad rows */
	uint8 col;/*loop iterator for keypad cols */
	uint8 state = KEY_NOT_PRESSED;/*state of a keypad button*/
     d58:	1f 86       	std	Y+15, r1	; 0x0f
	/*ground Columns one by one then listen to all rows to capture a pressed key*/
	while (1) {
		for (col = 0; col < NUMBER_OF_COLS; col++)/*loop for columns*/
     d5a:	18 8a       	std	Y+16, r1	; 0x10
     d5c:	d0 c0       	rjmp	.+416    	; 0xefe <Keypad_getPressedKey+0x1ba>
		{
			/*Rows  Connected On High Nibble Of Keypad Port */
			KEYPAD_DDR = 0b00010000 << col;
     d5e:	ea e3       	ldi	r30, 0x3A	; 58
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	88 89       	ldd	r24, Y+16	; 0x10
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	80 e1       	ldi	r24, 0x10	; 16
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <Keypad_getPressedKey+0x2e>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	2a 95       	dec	r18
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <Keypad_getPressedKey+0x2a>
     d76:	80 83       	st	Z, r24
			/*ground columns one by one */
			/*internal pull up resistors for keypad row pins */
			KEYPAD_PORT = (~(0b00010000 << col));
     d78:	eb e3       	ldi	r30, 0x3B	; 59
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	88 89       	ldd	r24, Y+16	; 0x10
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	80 e1       	ldi	r24, 0x10	; 16
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <Keypad_getPressedKey+0x4a>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <Keypad_getPressedKey+0x46>
     d92:	80 95       	com	r24
     d94:	80 83       	st	Z, r24

			//KEYPAD_DDR =  (KEYPAD_DDR & 0xF0)|(0x01<<col);/*make one column output at time*/
			//KEYPAD_PORT =  KEYPAD_PORT&(~(0x01<<col)) ;/*ground it*/

			for (row = 0; row < NUMBER_OF_ROWS; row++)/*loop for rows*/
     d96:	19 8a       	std	Y+17, r1	; 0x11
     d98:	ab c0       	rjmp	.+342    	; 0xef0 <Keypad_getPressedKey+0x1ac>
			{
				if (BIT_IS_CLEAR(KEYPAD_PIN, row))
     d9a:	e9 e3       	ldi	r30, 0x39	; 57
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	89 89       	ldd	r24, Y+17	; 0x11
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a9 01       	movw	r20, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <Keypad_getPressedKey+0x6e>
     dae:	55 95       	asr	r21
     db0:	47 95       	ror	r20
     db2:	8a 95       	dec	r24
     db4:	e2 f7       	brpl	.-8      	; 0xdae <Keypad_getPressedKey+0x6a>
     db6:	ca 01       	movw	r24, r20
     db8:	81 70       	andi	r24, 0x01	; 1
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <Keypad_getPressedKey+0x7e>
     dc0:	94 c0       	rjmp	.+296    	; 0xeea <Keypad_getPressedKey+0x1a6>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a8 ec       	ldi	r26, 0xC8	; 200
     dc8:	b2 e4       	ldi	r27, 0x42	; 66
     dca:	8b 87       	std	Y+11, r24	; 0x0b
     dcc:	9c 87       	std	Y+12, r25	; 0x0c
     dce:	ad 87       	std	Y+13, r26	; 0x0d
     dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	4a e7       	ldi	r20, 0x7A	; 122
     de0:	53 e4       	ldi	r21, 0x43	; 67
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8f 83       	std	Y+7, r24	; 0x07
     dec:	98 87       	std	Y+8, r25	; 0x08
     dee:	a9 87       	std	Y+9, r26	; 0x09
     df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df2:	6f 81       	ldd	r22, Y+7	; 0x07
     df4:	78 85       	ldd	r23, Y+8	; 0x08
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e06:	88 23       	and	r24, r24
     e08:	2c f4       	brge	.+10     	; 0xe14 <Keypad_getPressedKey+0xd0>
		__ticks = 1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9e 83       	std	Y+6, r25	; 0x06
     e10:	8d 83       	std	Y+5, r24	; 0x05
     e12:	3f c0       	rjmp	.+126    	; 0xe92 <Keypad_getPressedKey+0x14e>
	else if (__tmp > 65535)
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	3f ef       	ldi	r19, 0xFF	; 255
     e20:	4f e7       	ldi	r20, 0x7F	; 127
     e22:	57 e4       	ldi	r21, 0x47	; 71
     e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e28:	18 16       	cp	r1, r24
     e2a:	4c f5       	brge	.+82     	; 0xe7e <Keypad_getPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e30:	8d 85       	ldd	r24, Y+13	; 0x0d
     e32:	9e 85       	ldd	r25, Y+14	; 0x0e
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e2       	ldi	r20, 0x20	; 32
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <Keypad_getPressedKey+0x130>
     e56:	89 e1       	ldi	r24, 0x19	; 25
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <Keypad_getPressedKey+0x11e>
     e66:	9c 83       	std	Y+4, r25	; 0x04
     e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	69 f7       	brne	.-38     	; 0xe56 <Keypad_getPressedKey+0x112>
     e7c:	14 c0       	rjmp	.+40     	; 0xea6 <Keypad_getPressedKey+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7e:	6f 81       	ldd	r22, Y+7	; 0x07
     e80:	78 85       	ldd	r23, Y+8	; 0x08
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <Keypad_getPressedKey+0x15a>
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(100);/*software debouncing*/
					if (BIT_IS_CLEAR(KEYPAD_PIN, row))
     ea6:	e9 e3       	ldi	r30, 0x39	; 57
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	89 89       	ldd	r24, Y+17	; 0x11
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a9 01       	movw	r20, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <Keypad_getPressedKey+0x17a>
     eba:	55 95       	asr	r21
     ebc:	47 95       	ror	r20
     ebe:	8a 95       	dec	r24
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <Keypad_getPressedKey+0x176>
     ec2:	ca 01       	movw	r24, r20
     ec4:	81 70       	andi	r24, 0x01	; 1
     ec6:	90 70       	andi	r25, 0x00	; 0
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	79 f4       	brne	.+30     	; 0xeea <Keypad_getPressedKey+0x1a6>
					{
						state = KEY_PRESSED;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	8f 87       	std	Y+15, r24	; 0x0f
						return keypad_getASCII(row, col);
     ed0:	89 89       	ldd	r24, Y+17	; 0x11
     ed2:	68 89       	ldd	r22, Y+16	; 0x10
     ed4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <keypad_getASCII>

			}/*end inner for loop*/
		}/*end outer for loop*/
	}/*end while loop*/

}
     ed8:	61 96       	adiw	r28, 0x11	; 17
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret
			KEYPAD_PORT = (~(0b00010000 << col));

			//KEYPAD_DDR =  (KEYPAD_DDR & 0xF0)|(0x01<<col);/*make one column output at time*/
			//KEYPAD_PORT =  KEYPAD_PORT&(~(0x01<<col)) ;/*ground it*/

			for (row = 0; row < NUMBER_OF_ROWS; row++)/*loop for rows*/
     eea:	89 89       	ldd	r24, Y+17	; 0x11
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	89 8b       	std	Y+17, r24	; 0x11
     ef0:	89 89       	ldd	r24, Y+17	; 0x11
     ef2:	84 30       	cpi	r24, 0x04	; 4
     ef4:	08 f4       	brcc	.+2      	; 0xef8 <Keypad_getPressedKey+0x1b4>
     ef6:	51 cf       	rjmp	.-350    	; 0xd9a <Keypad_getPressedKey+0x56>
	uint8 row;/*loop iterator for keypad rows */
	uint8 col;/*loop iterator for keypad cols */
	uint8 state = KEY_NOT_PRESSED;/*state of a keypad button*/
	/*ground Columns one by one then listen to all rows to capture a pressed key*/
	while (1) {
		for (col = 0; col < NUMBER_OF_COLS; col++)/*loop for columns*/
     ef8:	88 89       	ldd	r24, Y+16	; 0x10
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	88 8b       	std	Y+16, r24	; 0x10
     efe:	88 89       	ldd	r24, Y+16	; 0x10
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	08 f4       	brcc	.+2      	; 0xf06 <Keypad_getPressedKey+0x1c2>
     f04:	2c cf       	rjmp	.-424    	; 0xd5e <Keypad_getPressedKey+0x1a>
     f06:	29 cf       	rjmp	.-430    	; 0xd5a <Keypad_getPressedKey+0x16>

00000f08 <LCD_trigger>:
 * Author: Sayed Mohsen
 *
 *******************************************************************************/
#include "LCD.h"

static void LCD_trigger() {
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	6c 97       	sbiw	r28, 0x1c	; 28
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
	/*Triggering LCd By Sending A high to low Pulse*/
	SET_BIT(LCD_CONTROL_PORT,LCD_E);
     f1c:	a2 e3       	ldi	r26, 0x32	; 50
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e2 e3       	ldi	r30, 0x32	; 50
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 68       	ori	r24, 0x80	; 128
     f28:	8c 93       	st	X, r24
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a0 e8       	ldi	r26, 0x80	; 128
     f30:	bf e3       	ldi	r27, 0x3F	; 63
     f32:	89 8f       	std	Y+25, r24	; 0x19
     f34:	9a 8f       	std	Y+26, r25	; 0x1a
     f36:	ab 8f       	std	Y+27, r26	; 0x1b
     f38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3a:	69 8d       	ldd	r22, Y+25	; 0x19
     f3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4a e7       	ldi	r20, 0x7A	; 122
     f48:	53 e4       	ldi	r21, 0x43	; 67
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	8d 8b       	std	Y+21, r24	; 0x15
     f54:	9e 8b       	std	Y+22, r25	; 0x16
     f56:	af 8b       	std	Y+23, r26	; 0x17
     f58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f5a:	6d 89       	ldd	r22, Y+21	; 0x15
     f5c:	7e 89       	ldd	r23, Y+22	; 0x16
     f5e:	8f 89       	ldd	r24, Y+23	; 0x17
     f60:	98 8d       	ldd	r25, Y+24	; 0x18
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e8       	ldi	r20, 0x80	; 128
     f68:	5f e3       	ldi	r21, 0x3F	; 63
     f6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6e:	88 23       	and	r24, r24
     f70:	2c f4       	brge	.+10     	; 0xf7c <LCD_trigger+0x74>
		__ticks = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9c 8b       	std	Y+20, r25	; 0x14
     f78:	8b 8b       	std	Y+19, r24	; 0x13
     f7a:	3f c0       	rjmp	.+126    	; 0xffa <LCD_trigger+0xf2>
	else if (__tmp > 65535)
     f7c:	6d 89       	ldd	r22, Y+21	; 0x15
     f7e:	7e 89       	ldd	r23, Y+22	; 0x16
     f80:	8f 89       	ldd	r24, Y+23	; 0x17
     f82:	98 8d       	ldd	r25, Y+24	; 0x18
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	3f ef       	ldi	r19, 0xFF	; 255
     f88:	4f e7       	ldi	r20, 0x7F	; 127
     f8a:	57 e4       	ldi	r21, 0x47	; 71
     f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f90:	18 16       	cp	r1, r24
     f92:	4c f5       	brge	.+82     	; 0xfe6 <LCD_trigger+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f94:	69 8d       	ldd	r22, Y+25	; 0x19
     f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e2       	ldi	r20, 0x20	; 32
     fa2:	51 e4       	ldi	r21, 0x41	; 65
     fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <LCD_trigger+0xd4>
     fbe:	89 e1       	ldi	r24, 0x19	; 25
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9a 8b       	std	Y+18, r25	; 0x12
     fc4:	89 8b       	std	Y+17, r24	; 0x11
     fc6:	89 89       	ldd	r24, Y+17	; 0x11
     fc8:	9a 89       	ldd	r25, Y+18	; 0x12
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <LCD_trigger+0xc2>
     fce:	9a 8b       	std	Y+18, r25	; 0x12
     fd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	8b 89       	ldd	r24, Y+19	; 0x13
     fd4:	9c 89       	ldd	r25, Y+20	; 0x14
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	9c 8b       	std	Y+20, r25	; 0x14
     fda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	8b 89       	ldd	r24, Y+19	; 0x13
     fde:	9c 89       	ldd	r25, Y+20	; 0x14
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	69 f7       	brne	.-38     	; 0xfbe <LCD_trigger+0xb6>
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <LCD_trigger+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe6:	6d 89       	ldd	r22, Y+21	; 0x15
     fe8:	7e 89       	ldd	r23, Y+22	; 0x16
     fea:	8f 89       	ldd	r24, Y+23	; 0x17
     fec:	98 8d       	ldd	r25, Y+24	; 0x18
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9c 8b       	std	Y+20, r25	; 0x14
     ff8:	8b 8b       	std	Y+19, r24	; 0x13
     ffa:	8b 89       	ldd	r24, Y+19	; 0x13
     ffc:	9c 89       	ldd	r25, Y+20	; 0x14
     ffe:	98 8b       	std	Y+16, r25	; 0x10
    1000:	8f 87       	std	Y+15, r24	; 0x0f
    1002:	8f 85       	ldd	r24, Y+15	; 0x0f
    1004:	98 89       	ldd	r25, Y+16	; 0x10
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <LCD_trigger+0xfe>
    100a:	98 8b       	std	Y+16, r25	; 0x10
    100c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLR_BIT(LCD_CONTROL_PORT, LCD_E);
    100e:	a2 e3       	ldi	r26, 0x32	; 50
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e2 e3       	ldi	r30, 0x32	; 50
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8f 77       	andi	r24, 0x7F	; 127
    101a:	8c 93       	st	X, r24
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a0 e8       	ldi	r26, 0x80	; 128
    1022:	bf e3       	ldi	r27, 0x3F	; 63
    1024:	8b 87       	std	Y+11, r24	; 0x0b
    1026:	9c 87       	std	Y+12, r25	; 0x0c
    1028:	ad 87       	std	Y+13, r26	; 0x0d
    102a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102c:	6b 85       	ldd	r22, Y+11	; 0x0b
    102e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4a e7       	ldi	r20, 0x7A	; 122
    103a:	53 e4       	ldi	r21, 0x43	; 67
    103c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8f 83       	std	Y+7, r24	; 0x07
    1046:	98 87       	std	Y+8, r25	; 0x08
    1048:	a9 87       	std	Y+9, r26	; 0x09
    104a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1060:	88 23       	and	r24, r24
    1062:	2c f4       	brge	.+10     	; 0x106e <LCD_trigger+0x166>
		__ticks = 1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	3f c0       	rjmp	.+126    	; 0x10ec <LCD_trigger+0x1e4>
	else if (__tmp > 65535)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	3f ef       	ldi	r19, 0xFF	; 255
    107a:	4f e7       	ldi	r20, 0x7F	; 127
    107c:	57 e4       	ldi	r21, 0x47	; 71
    107e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1082:	18 16       	cp	r1, r24
    1084:	4c f5       	brge	.+82     	; 0x10d8 <LCD_trigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1086:	6b 85       	ldd	r22, Y+11	; 0x0b
    1088:	7c 85       	ldd	r23, Y+12	; 0x0c
    108a:	8d 85       	ldd	r24, Y+13	; 0x0d
    108c:	9e 85       	ldd	r25, Y+14	; 0x0e
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e2       	ldi	r20, 0x20	; 32
    1094:	51 e4       	ldi	r21, 0x41	; 65
    1096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <LCD_trigger+0x1c6>
    10b0:	89 e1       	ldi	r24, 0x19	; 25
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <LCD_trigger+0x1b4>
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	69 f7       	brne	.-38     	; 0x10b0 <LCD_trigger+0x1a8>
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <LCD_trigger+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <LCD_trigger+0x1f0>
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1100:	6c 96       	adiw	r28, 0x1c	; 28
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <LCD_Init>:

void LCD_Init() {
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CONTROL_DDR, LCD_RS);
    111a:	a1 e3       	ldi	r26, 0x31	; 49
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e1 e3       	ldi	r30, 0x31	; 49
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 62       	ori	r24, 0x20	; 32
    1126:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_E);
    1128:	a1 e3       	ldi	r26, 0x31	; 49
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e1 e3       	ldi	r30, 0x31	; 49
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	80 68       	ori	r24, 0x80	; 128
    1134:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_RW);
    1136:	a1 e3       	ldi	r26, 0x31	; 49
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e1 e3       	ldi	r30, 0x31	; 49
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	80 64       	ori	r24, 0x40	; 64
    1142:	8c 93       	st	X, r24

#ifdef LCD_4BIT_MODE
#ifdef HIGH_NIBBLE
	LCD_DATA_DDR |= 0xF0;
    1144:	a4 e3       	ldi	r26, 0x34	; 52
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e4 e3       	ldi	r30, 0x34	; 52
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	80 6f       	ori	r24, 0xF0	; 240
    1150:	8c 93       	st	X, r24
#else
		LCD_DATA_DDR |= 0x0F ;
#endif
	LCD_SendCommand(FOUR_BITS_DATA_MODE);
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_SendCommand>
	LCD_SendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1158:	88 e2       	ldi	r24, 0x28	; 40
    115a:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_SendCommand>

#else
	LCD_DATA_DDR = 0xFF ;
	LCD_SendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif
	LCD_Clear();
    115e:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
	LCD_SendCommand(CURSOR_OFF);
    1162:	8c e0       	ldi	r24, 0x0C	; 12
    1164:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_SendCommand>
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <LCD_SendCommand>:

void LCD_SendCommand(Lcd_CommandType command) {
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LCD_CONTROL_PORT,LCD_RS);/*Select Command Register*/
    117a:	a2 e3       	ldi	r26, 0x32	; 50
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e2 e3       	ldi	r30, 0x32	; 50
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7d       	andi	r24, 0xDF	; 223
    1186:	8c 93       	st	X, r24
	CLR_BIT(LCD_CONTROL_PORT, LCD_RW);/*writing in LCD*/
    1188:	a2 e3       	ldi	r26, 0x32	; 50
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8f 7b       	andi	r24, 0xBF	; 191
    1194:	8c 93       	st	X, r24
#ifdef LCD_4BIT_MODE
#ifdef HIGH_NIBBLE
	/*send high nibble of command first then send low nibble*/
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1196:	a5 e3       	ldi	r26, 0x35	; 53
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e5 e3       	ldi	r30, 0x35	; 53
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	98 2f       	mov	r25, r24
    11a2:	9f 70       	andi	r25, 0x0F	; 15
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	80 7f       	andi	r24, 0xF0	; 240
    11a8:	89 2b       	or	r24, r25
    11aa:	8c 93       	st	X, r24
	LCD_trigger();
    11ac:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_trigger>
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    11b0:	a5 e3       	ldi	r26, 0x35	; 53
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e5 e3       	ldi	r30, 0x35	; 53
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	28 2f       	mov	r18, r24
    11bc:	2f 70       	andi	r18, 0x0F	; 15
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	82 95       	swap	r24
    11c6:	92 95       	swap	r25
    11c8:	90 7f       	andi	r25, 0xF0	; 240
    11ca:	98 27       	eor	r25, r24
    11cc:	80 7f       	andi	r24, 0xF0	; 240
    11ce:	98 27       	eor	r25, r24
    11d0:	82 2b       	or	r24, r18
    11d2:	8c 93       	st	X, r24
	LCD_trigger();
    11d4:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_trigger>
#else
	LCD_DATA_PORT = command ;
	LCD_trigger();
#endif

}
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <LCD_SendU8Data>:
void LCD_SendU8Data(Lcd_DataType data) {
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	0f 92       	push	r0
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LCD_CONTROL_PORT,LCD_RS);/*Select Data Register*/
    11ec:	a2 e3       	ldi	r26, 0x32	; 50
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e2 e3       	ldi	r30, 0x32	; 50
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8c 93       	st	X, r24
	CLR_BIT(LCD_CONTROL_PORT, LCD_RW);/*Writing In LCD*/
    11fa:	a2 e3       	ldi	r26, 0x32	; 50
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e2 e3       	ldi	r30, 0x32	; 50
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8f 7b       	andi	r24, 0xBF	; 191
    1206:	8c 93       	st	X, r24
#ifdef LCD_4BIT_MODE
#ifdef HIGH_NIBBLE
	/*send high nibble of data first then send low nibble*/
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    1208:	a5 e3       	ldi	r26, 0x35	; 53
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e5 e3       	ldi	r30, 0x35	; 53
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	98 2f       	mov	r25, r24
    1214:	9f 70       	andi	r25, 0x0F	; 15
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	80 7f       	andi	r24, 0xF0	; 240
    121a:	89 2b       	or	r24, r25
    121c:	8c 93       	st	X, r24
	LCD_trigger();
    121e:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_trigger>
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	28 2f       	mov	r18, r24
    122e:	2f 70       	andi	r18, 0x0F	; 15
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	82 95       	swap	r24
    1238:	92 95       	swap	r25
    123a:	90 7f       	andi	r25, 0xF0	; 240
    123c:	98 27       	eor	r25, r24
    123e:	80 7f       	andi	r24, 0xF0	; 240
    1240:	98 27       	eor	r25, r24
    1242:	82 2b       	or	r24, r18
    1244:	8c 93       	st	X, r24
	LCD_trigger();
    1246:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_trigger>
#else
	LCD_DATA_PORT = data ;
	LCD_trigger();
#endif

}
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <LCD_SendString>:
void LCD_SendString(char *str) {
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <LCD_SendString+0x6>
    1258:	0f 92       	push	r0
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9b 83       	std	Y+3, r25	; 0x03
    1260:	8a 83       	std	Y+2, r24	; 0x02
	uint8 itr = 0;
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	0e c0       	rjmp	.+28     	; 0x1282 <LCD_SendString+0x30>
	while (str[itr] != '\0') {
		LCD_SendU8Data(str[itr]);
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	9b 81       	ldd	r25, Y+3	; 0x03
    1270:	fc 01       	movw	r30, r24
    1272:	e2 0f       	add	r30, r18
    1274:	f3 1f       	adc	r31, r19
    1276:	80 81       	ld	r24, Z
    1278:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <LCD_SendU8Data>
		itr++;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	89 83       	std	Y+1, r24	; 0x01
#endif

}
void LCD_SendString(char *str) {
	uint8 itr = 0;
	while (str[itr] != '\0') {
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	9b 81       	ldd	r25, Y+3	; 0x03
    128c:	fc 01       	movw	r30, r24
    128e:	e2 0f       	add	r30, r18
    1290:	f3 1f       	adc	r31, r19
    1292:	80 81       	ld	r24, Z
    1294:	88 23       	and	r24, r24
    1296:	39 f7       	brne	.-50     	; 0x1266 <LCD_SendString+0x14>
		LCD_SendU8Data(str[itr]);
		itr++;
	}
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <LCD_goToXY>:
void LCD_goToXY(uint8 x, uint8 y) {
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	27 97       	sbiw	r28, 0x07	; 7
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	8e 83       	std	Y+6, r24	; 0x06
    12ba:	6f 83       	std	Y+7, r22	; 0x07
	 * shift Cursor for 1st  line = 0x00 | 0x80 = 0x80
	 * shift Cursor for 2nd  line = 0x40 | 0x80 = 0xC0
	 * shift Cursor for 3rd  line = 0x10 | 0x80 = 0x90
	 * shift Cursor for 4rth line = 0x50 | 0x80 = 0xD0
	 * */
	uint8 lcd_addr[] = { 0x80, 0xC0, 0x90, 0xD0 };
    12bc:	80 e8       	ldi	r24, 0x80	; 128
    12be:	8a 83       	std	Y+2, r24	; 0x02
    12c0:	80 ec       	ldi	r24, 0xC0	; 192
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	80 e9       	ldi	r24, 0x90	; 144
    12c6:	8c 83       	std	Y+4, r24	; 0x04
    12c8:	80 ed       	ldi	r24, 0xD0	; 208
    12ca:	8d 83       	std	Y+5, r24	; 0x05
	uint8 lcd_desired_address = lcd_addr[x - 1] + (y-1);
    12cc:	8e 81       	ldd	r24, Y+6	; 0x06
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9c 01       	movw	r18, r24
    12d4:	21 50       	subi	r18, 0x01	; 1
    12d6:	30 40       	sbci	r19, 0x00	; 0
    12d8:	ce 01       	movw	r24, r28
    12da:	02 96       	adiw	r24, 0x02	; 2
    12dc:	fc 01       	movw	r30, r24
    12de:	e2 0f       	add	r30, r18
    12e0:	f3 1f       	adc	r31, r19
    12e2:	90 81       	ld	r25, Z
    12e4:	8f 81       	ldd	r24, Y+7	; 0x07
    12e6:	89 0f       	add	r24, r25
    12e8:	81 50       	subi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendCommand(lcd_desired_address);
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_SendCommand>
}
    12f2:	27 96       	adiw	r28, 0x07	; 7
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <LCD_Clear>:
void LCD_Clear(void) {
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_COMMAND);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_SendCommand>
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <LCD_shiftDisplayLeft>:
void LCD_shiftDisplayLeft(){
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(SHIFT_DISPLAY_LEFT);
    1320:	88 e1       	ldi	r24, 0x18	; 24
    1322:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_SendCommand>
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <LCD_shiftDisplayRight>:
void LCD_shiftDisplayRight(){
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(SHIFT_DISPLAY_RIGHT);
    1334:	8c e1       	ldi	r24, 0x1C	; 28
    1336:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_SendCommand>
}
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <LCD_SendIntegerData>:
void LCD_SendIntegerData(int data) {
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	66 97       	sbiw	r28, 0x16	; 22
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	9e 8b       	std	Y+22, r25	; 0x16
    1356:	8d 8b       	std	Y+21, r24	; 0x15
	char buffer[20];
	itoa(data, buffer, 10);
    1358:	8d 89       	ldd	r24, Y+21	; 0x15
    135a:	9e 89       	ldd	r25, Y+22	; 0x16
    135c:	9e 01       	movw	r18, r28
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	b9 01       	movw	r22, r18
    1364:	4a e0       	ldi	r20, 0x0A	; 10
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <itoa>
	LCD_SendString(buffer);
    136c:	ce 01       	movw	r24, r28
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>

}
    1374:	66 96       	adiw	r28, 0x16	; 22
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <reverseString>:
static void reverseString(char *str,uint8 len) {
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <reverseString+0x6>
    138c:	00 d0       	rcall	.+0      	; 0x138e <reverseString+0x8>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <reverseString+0xa>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	9d 83       	std	Y+5, r25	; 0x05
    1396:	8c 83       	std	Y+4, r24	; 0x04
    1398:	6e 83       	std	Y+6, r22	; 0x06
	uint8 right = len - 1;
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	81 50       	subi	r24, 0x01	; 1
    139e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 left = 0;
    13a0:	1a 82       	std	Y+2, r1	; 0x02
    13a2:	2c c0       	rjmp	.+88     	; 0x13fc <reverseString+0x76>
	char tempCharacter;
	while (left < right) {
		tempCharacter = str[left];
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	fc 01       	movw	r30, r24
    13b0:	e2 0f       	add	r30, r18
    13b2:	f3 1f       	adc	r31, r19
    13b4:	80 81       	ld	r24, Z
    13b6:	89 83       	std	Y+1, r24	; 0x01
		str[left] = str[right];
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	dc 01       	movw	r26, r24
    13c4:	a2 0f       	add	r26, r18
    13c6:	b3 1f       	adc	r27, r19
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	fc 01       	movw	r30, r24
    13d4:	e2 0f       	add	r30, r18
    13d6:	f3 1f       	adc	r31, r19
    13d8:	80 81       	ld	r24, Z
    13da:	8c 93       	st	X, r24
		str[right] = tempCharacter;
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	fc 01       	movw	r30, r24
    13e8:	e2 0f       	add	r30, r18
    13ea:	f3 1f       	adc	r31, r19
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	80 83       	st	Z, r24
		left++;
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	8f 5f       	subi	r24, 0xFF	; 255
    13f4:	8a 83       	std	Y+2, r24	; 0x02
		right--;
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	81 50       	subi	r24, 0x01	; 1
    13fa:	8b 83       	std	Y+3, r24	; 0x03
}
static void reverseString(char *str,uint8 len) {
	uint8 right = len - 1;
	uint8 left = 0;
	char tempCharacter;
	while (left < right) {
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	98 17       	cp	r25, r24
    1402:	80 f2       	brcs	.-96     	; 0x13a4 <reverseString+0x1e>
		str[left] = str[right];
		str[right] = tempCharacter;
		left++;
		right--;
	}
}
    1404:	26 96       	adiw	r28, 0x06	; 6
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <integerToASCII>:
static void integerToASCII(int num, char buffer[]) {
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	65 97       	sbiw	r28, 0x15	; 21
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	9e 87       	std	Y+14, r25	; 0x0e
    142c:	8d 87       	std	Y+13, r24	; 0x0d
    142e:	78 8b       	std	Y+16, r23	; 0x10
    1430:	6f 87       	std	Y+15, r22	; 0x0f
	 *ASCII code	55	7	(number seven)
	 *ASCII code	56	8	(number eight)
	 *ASCII code	57	9	(number nine)
	 *
	 */
	char ascii_arr[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
    1432:	ce 01       	movw	r24, r28
    1434:	03 96       	adiw	r24, 0x03	; 3
    1436:	9a 8b       	std	Y+18, r25	; 0x12
    1438:	89 8b       	std	Y+17, r24	; 0x11
    143a:	e8 e1       	ldi	r30, 0x18	; 24
    143c:	f1 e0       	ldi	r31, 0x01	; 1
    143e:	fc 8b       	std	Y+20, r31	; 0x14
    1440:	eb 8b       	std	Y+19, r30	; 0x13
    1442:	fa e0       	ldi	r31, 0x0A	; 10
    1444:	fd 8b       	std	Y+21, r31	; 0x15
    1446:	eb 89       	ldd	r30, Y+19	; 0x13
    1448:	fc 89       	ldd	r31, Y+20	; 0x14
    144a:	00 80       	ld	r0, Z
    144c:	8b 89       	ldd	r24, Y+19	; 0x13
    144e:	9c 89       	ldd	r25, Y+20	; 0x14
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	9c 8b       	std	Y+20, r25	; 0x14
    1454:	8b 8b       	std	Y+19, r24	; 0x13
    1456:	e9 89       	ldd	r30, Y+17	; 0x11
    1458:	fa 89       	ldd	r31, Y+18	; 0x12
    145a:	00 82       	st	Z, r0
    145c:	89 89       	ldd	r24, Y+17	; 0x11
    145e:	9a 89       	ldd	r25, Y+18	; 0x12
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	9a 8b       	std	Y+18, r25	; 0x12
    1464:	89 8b       	std	Y+17, r24	; 0x11
    1466:	9d 89       	ldd	r25, Y+21	; 0x15
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	9d 8b       	std	Y+21, r25	; 0x15
    146c:	ed 89       	ldd	r30, Y+21	; 0x15
    146e:	ee 23       	and	r30, r30
    1470:	51 f7       	brne	.-44     	; 0x1446 <integerToASCII+0x30>
	uint8 itr = 0;
    1472:	1a 82       	std	Y+2, r1	; 0x02
	uint8 tempNumber;
	if (num == 0) {
    1474:	8d 85       	ldd	r24, Y+13	; 0x0d
    1476:	9e 85       	ldd	r25, Y+14	; 0x0e
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	79 f5       	brne	.+94     	; 0x14da <integerToASCII+0xc4>
		buffer[0] = ascii_arr[0];
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1480:	f8 89       	ldd	r31, Y+16	; 0x10
    1482:	80 83       	st	Z, r24
		itr++;
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	8f 5f       	subi	r24, 0xFF	; 255
    1488:	8a 83       	std	Y+2, r24	; 0x02
    148a:	2b c0       	rjmp	.+86     	; 0x14e2 <integerToASCII+0xcc>
	} else {
		while (num != 0) {
			tempNumber = num % 10;
    148c:	8d 85       	ldd	r24, Y+13	; 0x0d
    148e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1490:	2a e0       	ldi	r18, 0x0A	; 10
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	b9 01       	movw	r22, r18
    1496:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__divmodhi4>
    149a:	89 83       	std	Y+1, r24	; 0x01
			buffer[itr] = ascii_arr[tempNumber];
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a4:	98 89       	ldd	r25, Y+16	; 0x10
    14a6:	dc 01       	movw	r26, r24
    14a8:	a2 0f       	add	r26, r18
    14aa:	b3 1f       	adc	r27, r19
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	ce 01       	movw	r24, r28
    14b4:	03 96       	adiw	r24, 0x03	; 3
    14b6:	fc 01       	movw	r30, r24
    14b8:	e2 0f       	add	r30, r18
    14ba:	f3 1f       	adc	r31, r19
    14bc:	80 81       	ld	r24, Z
    14be:	8c 93       	st	X, r24
			itr++;
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	8a 83       	std	Y+2, r24	; 0x02
			num = num / 10;
    14c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ca:	2a e0       	ldi	r18, 0x0A	; 10
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	b9 01       	movw	r22, r18
    14d0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__divmodhi4>
    14d4:	cb 01       	movw	r24, r22
    14d6:	9e 87       	std	Y+14, r25	; 0x0e
    14d8:	8d 87       	std	Y+13, r24	; 0x0d
	uint8 tempNumber;
	if (num == 0) {
		buffer[0] = ascii_arr[0];
		itr++;
	} else {
		while (num != 0) {
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	a9 f6       	brne	.-86     	; 0x148c <integerToASCII+0x76>
			buffer[itr] = ascii_arr[tempNumber];
			itr++;
			num = num / 10;
		}
	}
	reverseString(buffer, itr);
    14e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e4:	98 89       	ldd	r25, Y+16	; 0x10
    14e6:	6a 81       	ldd	r22, Y+2	; 0x02
    14e8:	0e 94 c3 09 	call	0x1386	; 0x1386 <reverseString>
}
    14ec:	65 96       	adiw	r28, 0x15	; 21
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <LCD_sendu32Data>:

void LCD_sendu32Data(int data){
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	62 97       	sbiw	r28, 0x12	; 18
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	9a 8b       	std	Y+18, r25	; 0x12
    1514:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16]={'\0'};
    1516:	80 e1       	ldi	r24, 0x10	; 16
    1518:	fe 01       	movw	r30, r28
    151a:	31 96       	adiw	r30, 0x01	; 1
    151c:	df 01       	movw	r26, r30
    151e:	98 2f       	mov	r25, r24
    1520:	1d 92       	st	X+, r1
    1522:	9a 95       	dec	r25
    1524:	e9 f7       	brne	.-6      	; 0x1520 <LCD_sendu32Data+0x22>
	integerToASCII(data , buffer);
    1526:	89 89       	ldd	r24, Y+17	; 0x11
    1528:	9a 89       	ldd	r25, Y+18	; 0x12
    152a:	9e 01       	movw	r18, r28
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	b9 01       	movw	r22, r18
    1532:	0e 94 0b 0a 	call	0x1416	; 0x1416 <integerToASCII>
	LCD_SendString(buffer);
    1536:	ce 01       	movw	r24, r28
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
}
    153e:	62 96       	adiw	r28, 0x12	; 18
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_TXC_vect){
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62

}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0
    156c:	1f 90       	pop	r1
    156e:	18 95       	reti

00001570 <__vector_11>:
ISR(USART_RXC_vect){
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	11 24       	eor	r1, r1
    157a:	8f 93       	push	r24
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	uart_data = UDR;
    1588:	ec e2       	ldi	r30, 0x2C	; 44
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 93 31 01 	sts	0x0131, r24
}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	ff 91       	pop	r31
    1598:	ef 91       	pop	r30
    159a:	8f 91       	pop	r24
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <Uart_init>:


/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void Uart_init(Uart_ConfigChannel *config_ptr){
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <Uart_init+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <Uart_init+0x8>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <Uart_init+0xa>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 desired_baudRate;/*variable to set baud rate in UBBR register */
	if (config_ptr != NULL_PTR) {
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	09 f4       	brne	.+2      	; 0x15c2 <Uart_init+0x1c>
    15c0:	74 c1       	rjmp	.+744    	; 0x18aa <Uart_init+0x304>
		uart_configChannel = config_ptr ;
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	90 93 30 01 	sts	0x0130, r25
    15ca:	80 93 2f 01 	sts	0x012F, r24
		SET_BIT(UCSRC, URSEL);/*Writing in USRC Register */
    15ce:	a0 e4       	ldi	r26, 0x40	; 64
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e0 e4       	ldi	r30, 0x40	; 64
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xBF) | ((config_ptr->transmissionMode) << 6);/*select USART Transmission Mode (synchronous/Asynchronous)*/
    15dc:	a0 e4       	ldi	r26, 0x40	; 64
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e0 e4       	ldi	r30, 0x40	; 64
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	28 2f       	mov	r18, r24
    15e8:	2f 7b       	andi	r18, 0xBF	; 191
    15ea:	eb 81       	ldd	r30, Y+3	; 0x03
    15ec:	fc 81       	ldd	r31, Y+4	; 0x04
    15ee:	80 85       	ldd	r24, Z+8	; 0x08
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	00 24       	eor	r0, r0
    15f6:	96 95       	lsr	r25
    15f8:	87 95       	ror	r24
    15fa:	07 94       	ror	r0
    15fc:	96 95       	lsr	r25
    15fe:	87 95       	ror	r24
    1600:	07 94       	ror	r0
    1602:	98 2f       	mov	r25, r24
    1604:	80 2d       	mov	r24, r0
    1606:	82 2b       	or	r24, r18
    1608:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xE7) | ((config_ptr->parity_mode & 0x03) << 4);/*select Type Of Parity Bits (disable / odd parity /even parity)*/
    160a:	a0 e4       	ldi	r26, 0x40	; 64
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e0 e4       	ldi	r30, 0x40	; 64
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	28 2f       	mov	r18, r24
    1616:	27 7e       	andi	r18, 0xE7	; 231
    1618:	eb 81       	ldd	r30, Y+3	; 0x03
    161a:	fc 81       	ldd	r31, Y+4	; 0x04
    161c:	80 81       	ld	r24, Z
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	83 70       	andi	r24, 0x03	; 3
    1624:	90 70       	andi	r25, 0x00	; 0
    1626:	82 95       	swap	r24
    1628:	92 95       	swap	r25
    162a:	90 7f       	andi	r25, 0xF0	; 240
    162c:	98 27       	eor	r25, r24
    162e:	80 7f       	andi	r24, 0xF0	; 240
    1630:	98 27       	eor	r25, r24
    1632:	82 2b       	or	r24, r18
    1634:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xFB) | (config_ptr->stop_bit << 3);/*select number of stop bits (one / two) stop bits*/
    1636:	a0 e4       	ldi	r26, 0x40	; 64
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e0 e4       	ldi	r30, 0x40	; 64
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	2b 7f       	andi	r18, 0xFB	; 251
    1644:	eb 81       	ldd	r30, Y+3	; 0x03
    1646:	fc 81       	ldd	r31, Y+4	; 0x04
    1648:	81 81       	ldd	r24, Z+1	; 0x01
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	82 2b       	or	r24, r18
    165c:	8c 93       	st	X, r24

		switch (config_ptr->datalength)/*select number of data bits  in yoour frame */
    165e:	eb 81       	ldd	r30, Y+3	; 0x03
    1660:	fc 81       	ldd	r31, Y+4	; 0x04
    1662:	83 81       	ldd	r24, Z+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3e 83       	std	Y+6, r19	; 0x06
    166a:	2d 83       	std	Y+5, r18	; 0x05
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	82 30       	cpi	r24, 0x02	; 2
    1672:	91 05       	cpc	r25, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <Uart_init+0xd2>
    1676:	48 c0       	rjmp	.+144    	; 0x1708 <Uart_init+0x162>
    1678:	2d 81       	ldd	r18, Y+5	; 0x05
    167a:	3e 81       	ldd	r19, Y+6	; 0x06
    167c:	23 30       	cpi	r18, 0x03	; 3
    167e:	31 05       	cpc	r19, r1
    1680:	54 f4       	brge	.+20     	; 0x1696 <Uart_init+0xf0>
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	99 f0       	breq	.+38     	; 0x16b0 <Uart_init+0x10a>
    168a:	2d 81       	ldd	r18, Y+5	; 0x05
    168c:	3e 81       	ldd	r19, Y+6	; 0x06
    168e:	21 30       	cpi	r18, 0x01	; 1
    1690:	31 05       	cpc	r19, r1
    1692:	21 f1       	breq	.+72     	; 0x16dc <Uart_init+0x136>
    1694:	7a c0       	rjmp	.+244    	; 0x178a <Uart_init+0x1e4>
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	91 05       	cpc	r25, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <Uart_init+0xfc>
    16a0:	49 c0       	rjmp	.+146    	; 0x1734 <Uart_init+0x18e>
    16a2:	2d 81       	ldd	r18, Y+5	; 0x05
    16a4:	3e 81       	ldd	r19, Y+6	; 0x06
    16a6:	27 30       	cpi	r18, 0x07	; 7
    16a8:	31 05       	cpc	r19, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <Uart_init+0x108>
    16ac:	59 c0       	rjmp	.+178    	; 0x1760 <Uart_init+0x1ba>
    16ae:	6d c0       	rjmp	.+218    	; 0x178a <Uart_init+0x1e4>
		{
		case data_5:/*5-bits data*/
			CLR_BIT(UCSRC, UCSZ0);
    16b0:	a0 e4       	ldi	r26, 0x40	; 64
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e0 e4       	ldi	r30, 0x40	; 64
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8d 7f       	andi	r24, 0xFD	; 253
    16bc:	8c 93       	st	X, r24
			CLR_BIT(UCSRC, UCSZ1);
    16be:	a0 e4       	ldi	r26, 0x40	; 64
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e0 e4       	ldi	r30, 0x40	; 64
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8b 7f       	andi	r24, 0xFB	; 251
    16ca:	8c 93       	st	X, r24
			CLR_BIT(UCSRB, UCSZ2);
    16cc:	aa e2       	ldi	r26, 0x2A	; 42
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ea e2       	ldi	r30, 0x2A	; 42
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8b 7f       	andi	r24, 0xFB	; 251
    16d8:	8c 93       	st	X, r24
    16da:	57 c0       	rjmp	.+174    	; 0x178a <Uart_init+0x1e4>
			break;
		case data_6:/*6-bits data*/
			SET_BIT(UCSRC, UCSZ0);
    16dc:	a0 e4       	ldi	r26, 0x40	; 64
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e0 e4       	ldi	r30, 0x40	; 64
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	82 60       	ori	r24, 0x02	; 2
    16e8:	8c 93       	st	X, r24
			CLR_BIT(UCSRC, UCSZ1);
    16ea:	a0 e4       	ldi	r26, 0x40	; 64
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e0 e4       	ldi	r30, 0x40	; 64
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8b 7f       	andi	r24, 0xFB	; 251
    16f6:	8c 93       	st	X, r24
			CLR_BIT(UCSRB, UCSZ2);
    16f8:	aa e2       	ldi	r26, 0x2A	; 42
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	ea e2       	ldi	r30, 0x2A	; 42
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	8b 7f       	andi	r24, 0xFB	; 251
    1704:	8c 93       	st	X, r24
    1706:	41 c0       	rjmp	.+130    	; 0x178a <Uart_init+0x1e4>
			break;
		case data_7:/*7-bits data*/
			CLR_BIT(UCSRC, UCSZ0);
    1708:	a0 e4       	ldi	r26, 0x40	; 64
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e0 e4       	ldi	r30, 0x40	; 64
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8d 7f       	andi	r24, 0xFD	; 253
    1714:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    1716:	a0 e4       	ldi	r26, 0x40	; 64
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e0 e4       	ldi	r30, 0x40	; 64
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	84 60       	ori	r24, 0x04	; 4
    1722:	8c 93       	st	X, r24
			CLR_BIT(UCSRB, UCSZ2);
    1724:	aa e2       	ldi	r26, 0x2A	; 42
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	ea e2       	ldi	r30, 0x2A	; 42
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8b 7f       	andi	r24, 0xFB	; 251
    1730:	8c 93       	st	X, r24
    1732:	2b c0       	rjmp	.+86     	; 0x178a <Uart_init+0x1e4>
			break;
		case data_8:/*8-bits data*/
			SET_BIT(UCSRC, UCSZ0);
    1734:	a0 e4       	ldi	r26, 0x40	; 64
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e0 e4       	ldi	r30, 0x40	; 64
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	82 60       	ori	r24, 0x02	; 2
    1740:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    1742:	a0 e4       	ldi	r26, 0x40	; 64
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e0 e4       	ldi	r30, 0x40	; 64
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	84 60       	ori	r24, 0x04	; 4
    174e:	8c 93       	st	X, r24
			CLR_BIT(UCSRB, UCSZ2);
    1750:	aa e2       	ldi	r26, 0x2A	; 42
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ea e2       	ldi	r30, 0x2A	; 42
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8b 7f       	andi	r24, 0xFB	; 251
    175c:	8c 93       	st	X, r24
    175e:	15 c0       	rjmp	.+42     	; 0x178a <Uart_init+0x1e4>
			break;
		case data_9:/*9-bits data*/
			SET_BIT(UCSRC, UCSZ0);
    1760:	a0 e4       	ldi	r26, 0x40	; 64
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e0 e4       	ldi	r30, 0x40	; 64
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	82 60       	ori	r24, 0x02	; 2
    176c:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    176e:	a0 e4       	ldi	r26, 0x40	; 64
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e0 e4       	ldi	r30, 0x40	; 64
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	84 60       	ori	r24, 0x04	; 4
    177a:	8c 93       	st	X, r24
			SET_BIT(UCSRB, UCSZ2);
    177c:	aa e2       	ldi	r26, 0x2A	; 42
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ea e2       	ldi	r30, 0x2A	; 42
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	84 60       	ori	r24, 0x04	; 4
    1788:	8c 93       	st	X, r24
			break;
		}
		/*setting BaudRate by calculating value to be loaded into UBBR register */
		if (normal_transmission_speed == config_ptr->speed) {
    178a:	eb 81       	ldd	r30, Y+3	; 0x03
    178c:	fc 81       	ldd	r31, Y+4	; 0x04
    178e:	84 81       	ldd	r24, Z+4	; 0x04
    1790:	88 23       	and	r24, r24
    1792:	71 f5       	brne	.+92     	; 0x17f0 <Uart_init+0x24a>
			CLR_BIT(UCSRA, U2X);/*normal transmission speed*/
    1794:	ab e2       	ldi	r26, 0x2B	; 43
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	eb e2       	ldi	r30, 0x2B	; 43
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	8c 93       	st	X, r24
			desired_baudRate = (((F_CPU) / (16UL * config_ptr->baudrate)) - 1);
    17a2:	eb 81       	ldd	r30, Y+3	; 0x03
    17a4:	fc 81       	ldd	r31, Y+4	; 0x04
    17a6:	85 81       	ldd	r24, Z+5	; 0x05
    17a8:	96 81       	ldd	r25, Z+6	; 0x06
    17aa:	cc 01       	movw	r24, r24
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	aa 1f       	adc	r26, r26
    17b6:	bb 1f       	adc	r27, r27
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	aa 1f       	adc	r26, r26
    17be:	bb 1f       	adc	r27, r27
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	aa 1f       	adc	r26, r26
    17c6:	bb 1f       	adc	r27, r27
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	aa 1f       	adc	r26, r26
    17ce:	bb 1f       	adc	r27, r27
    17d0:	9c 01       	movw	r18, r24
    17d2:	ad 01       	movw	r20, r26
    17d4:	80 e4       	ldi	r24, 0x40	; 64
    17d6:	92 e4       	ldi	r25, 0x42	; 66
    17d8:	af e0       	ldi	r26, 0x0F	; 15
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__udivmodsi4>
    17e4:	da 01       	movw	r26, r20
    17e6:	c9 01       	movw	r24, r18
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	2e c0       	rjmp	.+92     	; 0x184c <Uart_init+0x2a6>

		} else if (double_transmission_speed == config_ptr->speed) {
    17f0:	eb 81       	ldd	r30, Y+3	; 0x03
    17f2:	fc 81       	ldd	r31, Y+4	; 0x04
    17f4:	84 81       	ldd	r24, Z+4	; 0x04
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	49 f5       	brne	.+82     	; 0x184c <Uart_init+0x2a6>
			SET_BIT(UCSRA, U2X);/*double transmission speed*/
    17fa:	ab e2       	ldi	r26, 0x2B	; 43
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	eb e2       	ldi	r30, 0x2B	; 43
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	82 60       	ori	r24, 0x02	; 2
    1806:	8c 93       	st	X, r24
			desired_baudRate = (((F_CPU) / (8UL * config_ptr->baudrate)) - 1);
    1808:	eb 81       	ldd	r30, Y+3	; 0x03
    180a:	fc 81       	ldd	r31, Y+4	; 0x04
    180c:	85 81       	ldd	r24, Z+5	; 0x05
    180e:	96 81       	ldd	r25, Z+6	; 0x06
    1810:	cc 01       	movw	r24, r24
    1812:	a0 e0       	ldi	r26, 0x00	; 0
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	aa 1f       	adc	r26, r26
    181c:	bb 1f       	adc	r27, r27
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	aa 1f       	adc	r26, r26
    1824:	bb 1f       	adc	r27, r27
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	aa 1f       	adc	r26, r26
    182c:	bb 1f       	adc	r27, r27
    182e:	9c 01       	movw	r18, r24
    1830:	ad 01       	movw	r20, r26
    1832:	80 e4       	ldi	r24, 0x40	; 64
    1834:	92 e4       	ldi	r25, 0x42	; 66
    1836:	af e0       	ldi	r26, 0x0F	; 15
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__udivmodsi4>
    1842:	da 01       	movw	r26, r20
    1844:	c9 01       	movw	r24, r18
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
		} else {

		}
		 if (config_ptr->readwriteMode == interrupts){
    184c:	eb 81       	ldd	r30, Y+3	; 0x03
    184e:	fc 81       	ldd	r31, Y+4	; 0x04
    1850:	87 81       	ldd	r24, Z+7	; 0x07
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	71 f4       	brne	.+28     	; 0x1872 <Uart_init+0x2cc>
				SET_BIT(UCSRB,RXCIE) ; /*receive interrupt Enable*/
    1856:	aa e2       	ldi	r26, 0x2A	; 42
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ea e2       	ldi	r30, 0x2A	; 42
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 68       	ori	r24, 0x80	; 128
    1862:	8c 93       	st	X, r24
				SET_BIT(UCSRB,TXCIE);/*transmit interrupt enable*/
    1864:	aa e2       	ldi	r26, 0x2A	; 42
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ea e2       	ldi	r30, 0x2A	; 42
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	80 64       	ori	r24, 0x40	; 64
    1870:	8c 93       	st	X, r24
			}
		/*set desired BaudRate in UBRR register*/
		UBRRH = desired_baudRate >> 8;
    1872:	e0 e4       	ldi	r30, 0x40	; 64
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	89 2f       	mov	r24, r25
    187c:	99 27       	eor	r25, r25
    187e:	80 83       	st	Z, r24
		UBRRL = desired_baudRate;
    1880:	e9 e2       	ldi	r30, 0x29	; 41
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	80 83       	st	Z, r24
		/*transmitter Enable */
		SET_BIT(UCSRB, TXEN);
    1888:	aa e2       	ldi	r26, 0x2A	; 42
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ea e2       	ldi	r30, 0x2A	; 42
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 60       	ori	r24, 0x08	; 8
    1894:	8c 93       	st	X, r24
		/*Receiver Enable */
		SET_BIT(UCSRB, RXEN);
    1896:	aa e2       	ldi	r26, 0x2A	; 42
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	ea e2       	ldi	r30, 0x2A	; 42
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 61       	ori	r24, 0x10	; 16
    18a2:	8c 93       	st	X, r24
		Uart_status = UART_INITALIZED ;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	80 93 2e 01 	sts	0x012E, r24

	}
}
    18aa:	26 96       	adiw	r28, 0x06	; 6
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <Uart_SendU8Data>:

void Uart_SendU8Data(uint8 data) {
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	0f 92       	push	r0
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	89 83       	std	Y+1, r24	; 0x01
	if (uart_configChannel->readwriteMode == polling) {
    18c8:	e0 91 2f 01 	lds	r30, 0x012F
    18cc:	f0 91 30 01 	lds	r31, 0x0130
    18d0:	87 81       	ldd	r24, Z+7	; 0x07
    18d2:	88 23       	and	r24, r24
    18d4:	a9 f4       	brne	.+42     	; 0x1900 <Uart_SendU8Data+0x44>
		UDR = data;
    18d6:	ec e2       	ldi	r30, 0x2C	; 44
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(UCSRA, TXC));/*Wait until the transmission is complete TXC = 1*/
    18de:	eb e2       	ldi	r30, 0x2B	; 43
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	80 74       	andi	r24, 0x40	; 64
    18ea:	90 70       	andi	r25, 0x00	; 0
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	b9 f3       	breq	.-18     	; 0x18de <Uart_SendU8Data+0x22>
		SET_BIT(UCSRA, TXC);/*clear flag by writing one in it */
    18f0:	ab e2       	ldi	r26, 0x2B	; 43
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	eb e2       	ldi	r30, 0x2B	; 43
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 64       	ori	r24, 0x40	; 64
    18fc:	8c 93       	st	X, r24
    18fe:	0b c0       	rjmp	.+22     	; 0x1916 <Uart_SendU8Data+0x5a>
	}
	else if (uart_configChannel->readwriteMode == interrupts){
    1900:	e0 91 2f 01 	lds	r30, 0x012F
    1904:	f0 91 30 01 	lds	r31, 0x0130
    1908:	87 81       	ldd	r24, Z+7	; 0x07
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	21 f4       	brne	.+8      	; 0x1916 <Uart_SendU8Data+0x5a>
		UDR = data;
    190e:	ec e2       	ldi	r30, 0x2C	; 44
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	80 83       	st	Z, r24
	}
	else{
		/*no Action Required */
	}

}
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <Uart_RecieveU8Data>:
Uart_dataFrameType Uart_RecieveU8Data() {
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <Uart_RecieveU8Data+0x6>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	Uart_dataFrameType data =0;
    1928:	19 82       	std	Y+1, r1	; 0x01
	if (uart_configChannel->readwriteMode == polling) {
    192a:	e0 91 2f 01 	lds	r30, 0x012F
    192e:	f0 91 30 01 	lds	r31, 0x0130
    1932:	87 81       	ldd	r24, Z+7	; 0x07
    1934:	88 23       	and	r24, r24
    1936:	69 f4       	brne	.+26     	; 0x1952 <Uart_RecieveU8Data+0x34>
		while (BIT_IS_CLEAR(UCSRA, RXC));/*wait until receive complete */
    1938:	eb e2       	ldi	r30, 0x2B	; 43
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	88 23       	and	r24, r24
    1940:	dc f7       	brge	.-10     	; 0x1938 <Uart_RecieveU8Data+0x1a>
		data =  UDR;
    1942:	ec e2       	ldi	r30, 0x2C	; 44
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	89 83       	std	Y+1, r24	; 0x01
		return data ;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	8a 83       	std	Y+2, r24	; 0x02
	}


}
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	00 c0       	rjmp	.+0      	; 0x1952 <Uart_RecieveU8Data+0x34>
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <Uart_getU8data>:
Uart_dataFrameType Uart_getU8data(){
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
	return uart_data ;
    1964:	80 91 31 01 	lds	r24, 0x0131
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <Uart_SendString>:
void Uart_SendString(uint8 *str) {
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <Uart_SendString+0x6>
    1974:	0f 92       	push	r0
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	9b 83       	std	Y+3, r25	; 0x03
    197c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 itr = 0;
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	0e c0       	rjmp	.+28     	; 0x199e <Uart_SendString+0x30>
	while (str[itr] != '\0') {
		Uart_SendU8Data(str[itr]);
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	9b 81       	ldd	r25, Y+3	; 0x03
    198c:	fc 01       	movw	r30, r24
    198e:	e2 0f       	add	r30, r18
    1990:	f3 1f       	adc	r31, r19
    1992:	80 81       	ld	r24, Z
    1994:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <Uart_SendU8Data>
		itr++;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	8f 5f       	subi	r24, 0xFF	; 255
    199c:	89 83       	std	Y+1, r24	; 0x01
Uart_dataFrameType Uart_getU8data(){
	return uart_data ;
}
void Uart_SendString(uint8 *str) {
	uint8 itr = 0;
	while (str[itr] != '\0') {
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	fc 01       	movw	r30, r24
    19aa:	e2 0f       	add	r30, r18
    19ac:	f3 1f       	adc	r31, r19
    19ae:	80 81       	ld	r24, Z
    19b0:	88 23       	and	r24, r24
    19b2:	39 f7       	brne	.-50     	; 0x1982 <Uart_SendString+0x14>
		Uart_SendU8Data(str[itr]);
		itr++;
	}
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <Uart_RecieveString>:
void Uart_RecieveString(uint8 *str) {
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <Uart_RecieveString+0xa>
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	9b 83       	std	Y+3, r25	; 0x03
    19d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 itr = 0;
    19d4:	19 82       	std	Y+1, r1	; 0x01
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <Uart_RecieveString+0x36>
	while (str[itr] != '#') {
		str[itr] = Uart_RecieveU8Data();
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	8c 01       	movw	r16, r24
    19e4:	02 0f       	add	r16, r18
    19e6:	13 1f       	adc	r17, r19
    19e8:	0e 94 8f 0c 	call	0x191e	; 0x191e <Uart_RecieveU8Data>
    19ec:	f8 01       	movw	r30, r16
    19ee:	80 83       	st	Z, r24
		itr++;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    19f4:	89 83       	std	Y+1, r24	; 0x01
		itr++;
	}
}
void Uart_RecieveString(uint8 *str) {
	uint8 itr = 0;
	while (str[itr] != '#') {
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	fc 01       	movw	r30, r24
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	80 81       	ld	r24, Z
    1a08:	83 32       	cpi	r24, 0x23	; 35
    1a0a:	31 f7       	brne	.-52     	; 0x19d8 <Uart_RecieveString+0x18>
		str[itr] = Uart_RecieveU8Data();
		itr++;
	}
	str[itr] = '\0';
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	9b 81       	ldd	r25, Y+3	; 0x03
    1a16:	fc 01       	movw	r30, r24
    1a18:	e2 0f       	add	r30, r18
    1a1a:	f3 1f       	adc	r31, r19
    1a1c:	10 82       	st	Z, r1
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	08 95       	ret

00001a2e <increament_tick>:
static uint8 status;
uint8 DoorStatus = DOOR_IS_LOCKED;
uint8 volatile tick = 0;


void increament_tick() {
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1a36:	80 91 32 01 	lds	r24, 0x0132
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	80 93 32 01 	sts	0x0132, r24
}
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <displaydoorstatus>:

static void displaydoorstatus()
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	LCD_goToXY(1, 1);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
	LCD_SendString("The Door Is ");
    1a56:	80 e6       	ldi	r24, 0x60	; 96
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
	LCD_goToXY(2, 5);
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	65 e0       	ldi	r22, 0x05	; 5
    1a62:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
	if (DOOR_IS_LOCKED == DoorStatus)
    1a66:	80 91 ff 00 	lds	r24, 0x00FF
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	69 f4       	brne	.+26     	; 0x1a88 <displaydoorstatus+0x42>
	{
		LCD_SendString("locked ! ");
    1a6e:	8d e6       	ldi	r24, 0x6D	; 109
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
		LCD_goToXY(3, 1);
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	61 e0       	ldi	r22, 0x01	; 1
    1a7a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
		LCD_SendString("- :open Door");
    1a7e:	87 e7       	ldi	r24, 0x77	; 119
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
    1a86:	10 c0       	rjmp	.+32     	; 0x1aa8 <displaydoorstatus+0x62>
	}
	else if (DOOR_IS_OPENED == DoorStatus)
    1a88:	80 91 ff 00 	lds	r24, 0x00FF
    1a8c:	88 23       	and	r24, r24
    1a8e:	61 f4       	brne	.+24     	; 0x1aa8 <displaydoorstatus+0x62>
	{
		LCD_SendString("opened ! ");
    1a90:	84 e8       	ldi	r24, 0x84	; 132
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
		LCD_goToXY(3, 1);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
		LCD_SendString("- :close Door");
    1aa0:	8e e8       	ldi	r24, 0x8E	; 142
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
	else
	{
		/*no Action Required */
	}

	LCD_goToXY(4, 1);
    1aa8:	84 e0       	ldi	r24, 0x04	; 4
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
	LCD_SendString("+ :change Pass");
    1ab0:	8c e9       	ldi	r24, 0x9C	; 156
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <doorsetup>:

void doorsetup() {
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    1ac6:	0e 94 89 08 	call	0x1112	; 0x1112 <LCD_Init>
	Uart_init(&UartConfigurations);
    1aca:	82 e2       	ldi	r24, 0x22	; 34
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <Uart_init>
	DDRB |= 0xF0;
    1ad2:	a7 e3       	ldi	r26, 0x37	; 55
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e7 e3       	ldi	r30, 0x37	; 55
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	80 6f       	ori	r24, 0xF0	; 240
    1ade:	8c 93       	st	X, r24
	PORTB &= 0x0F;
    1ae0:	a8 e3       	ldi	r26, 0x38	; 56
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e8 e3       	ldi	r30, 0x38	; 56
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8f 70       	andi	r24, 0x0F	; 15
    1aec:	8c 93       	st	X, r24
	timer1_setCallback(increament_tick);
    1aee:	87 e1       	ldi	r24, 0x17	; 23
    1af0:	9d e0       	ldi	r25, 0x0D	; 13
    1af2:	0e 94 33 06 	call	0xc66	; 0xc66 <timer1_setCallback>
	sei();
    1af6:	78 94       	sei
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <doorLoop>:



void doorLoop() {
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
	displaydoorstatus();
    1b06:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <displaydoorstatus>
	if (DOOR_IS_LOCKED == DoorStatus)
    1b0a:	80 91 ff 00 	lds	r24, 0x00FF
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	21 f4       	brne	.+8      	; 0x1b1a <doorLoop+0x1c>
	{
		Uart_SendU8Data('L');
    1b12:	8c e4       	ldi	r24, 0x4C	; 76
    1b14:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <Uart_SendU8Data>
    1b18:	07 c0       	rjmp	.+14     	; 0x1b28 <doorLoop+0x2a>
	}
	else if (DOOR_IS_OPENED == DoorStatus)
    1b1a:	80 91 ff 00 	lds	r24, 0x00FF
    1b1e:	88 23       	and	r24, r24
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <doorLoop+0x2a>
	{
		Uart_SendU8Data('O');
    1b22:	8f e4       	ldi	r24, 0x4F	; 79
    1b24:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <Uart_SendU8Data>
	else
	{
		/*no Action Required */
	}

	key = Keypad_getPressedKey();
    1b28:	0e 94 a2 06 	call	0xd44	; 0xd44 <Keypad_getPressedKey>
    1b2c:	80 93 33 01 	sts	0x0133, r24

	if ((key == '-') && (DoorStatus == DOOR_IS_OPENED))
    1b30:	80 91 33 01 	lds	r24, 0x0133
    1b34:	8d 32       	cpi	r24, 0x2D	; 45
    1b36:	41 f4       	brne	.+16     	; 0x1b48 <doorLoop+0x4a>
    1b38:	80 91 ff 00 	lds	r24, 0x00FF
    1b3c:	88 23       	and	r24, r24
    1b3e:	21 f4       	brne	.+8      	; 0x1b48 <doorLoop+0x4a>
	{
		DoorStatus = DOOR_IS_LOCKED;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	80 93 ff 00 	sts	0x00FF, r24
    1b46:	58 c0       	rjmp	.+176    	; 0x1bf8 <doorLoop+0xfa>

	}
	else if ((key == '+') || (key == '-'))
    1b48:	80 91 33 01 	lds	r24, 0x0133
    1b4c:	8b 32       	cpi	r24, 0x2B	; 43
    1b4e:	29 f0       	breq	.+10     	; 0x1b5a <doorLoop+0x5c>
    1b50:	80 91 33 01 	lds	r24, 0x0133
    1b54:	8d 32       	cpi	r24, 0x2D	; 45
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <doorLoop+0x5c>
    1b58:	4f c0       	rjmp	.+158    	; 0x1bf8 <doorLoop+0xfa>
	{
		LCD_Clear();
    1b5a:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
		LCD_goToXY(1, 2);
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
		LCD_SendString("Enter Pass");
    1b66:	8b ea       	ldi	r24, 0xAB	; 171
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
		LCD_goToXY(2, 1);
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
		pass = takePassword();
    1b76:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <takePassword>
    1b7a:	90 93 35 01 	sts	0x0135, r25
    1b7e:	80 93 34 01 	sts	0x0134, r24
		status = checkpasswords(pass, globalPassword);
    1b82:	80 91 34 01 	lds	r24, 0x0134
    1b86:	90 91 35 01 	lds	r25, 0x0135
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	31 e0       	ldi	r19, 0x01	; 1
    1b8e:	b9 01       	movw	r22, r18
    1b90:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <checkpasswords>
    1b94:	80 93 36 01 	sts	0x0136, r24
		if (status == MATCHED_PASSWORDS)
    1b98:	80 91 36 01 	lds	r24, 0x0136
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	f1 f4       	brne	.+60     	; 0x1bdc <doorLoop+0xde>
		{
			if (key == '-')
    1ba0:	80 91 33 01 	lds	r24, 0x0133
    1ba4:	8d 32       	cpi	r24, 0x2D	; 45
    1ba6:	29 f4       	brne	.+10     	; 0x1bb2 <doorLoop+0xb4>
			{
				DoorStatus = DOOR_IS_OPENED;
    1ba8:	10 92 ff 00 	sts	0x00FF, r1
				LCD_Clear();
    1bac:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
    1bb0:	23 c0       	rjmp	.+70     	; 0x1bf8 <doorLoop+0xfa>
			}
			else if (key == '+')
    1bb2:	80 91 33 01 	lds	r24, 0x0133
    1bb6:	8b 32       	cpi	r24, 0x2B	; 43
    1bb8:	f9 f4       	brne	.+62     	; 0x1bf8 <doorLoop+0xfa>
			{
				LCD_Clear();
    1bba:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
				LCD_goToXY(1, 1);
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
				LCD_SendString("enter new Pass");
    1bc6:	86 eb       	ldi	r24, 0xB6	; 182
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
				LCD_goToXY(3, 1);
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
				setnewPassword();
    1bd6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <setnewPassword>
    1bda:	0e c0       	rjmp	.+28     	; 0x1bf8 <doorLoop+0xfa>
			else
			{
				/*no Action Required*/
			}
		}
		else if (status == WRONG_PASSWORDS)
    1bdc:	80 91 36 01 	lds	r24, 0x0136
    1be0:	88 23       	and	r24, r24
    1be2:	51 f4       	brne	.+20     	; 0x1bf8 <doorLoop+0xfa>
		{
			LCD_Clear();
    1be4:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
			LCD_SendString("Wrong Password !");
    1be8:	85 ec       	ldi	r24, 0xC5	; 197
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
			waitWrongPassword();
    1bf0:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <waitWrongPassword>
			LCD_Clear();
    1bf4:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
	}
	else
	{
		/*no Action Required*/
	}
}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <main>:
#include "main.h"



int main(int argc, char **argv) {
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <main+0x6>
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <main+0x8>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	7c 83       	std	Y+4, r23	; 0x04
    1c10:	6b 83       	std	Y+3, r22	; 0x03
	doorsetup();
    1c12:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <doorsetup>

	while (1) {
		doorLoop();
    1c16:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <doorLoop>
    1c1a:	fd cf       	rjmp	.-6      	; 0x1c16 <main+0x18>

00001c1c <getstringlength>:
 */
#include "passwords.h"

char globalPassword[MAX_PASSWORD_LENGTH] = { '1', '2', '3', '4', '\0' };

static uint8 getstringlength(char *str) {
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <getstringlength+0x6>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9b 83       	std	Y+3, r25	; 0x03
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = 0;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <getstringlength+0x1a>
	while (str[counter] != 0) {
		counter++;
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	89 83       	std	Y+1, r24	; 0x01

char globalPassword[MAX_PASSWORD_LENGTH] = { '1', '2', '3', '4', '\0' };

static uint8 getstringlength(char *str) {
	uint8 counter = 0;
	while (str[counter] != 0) {
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	fc 01       	movw	r30, r24
    1c42:	e2 0f       	add	r30, r18
    1c44:	f3 1f       	adc	r31, r19
    1c46:	80 81       	ld	r24, Z
    1c48:	88 23       	and	r24, r24
    1c4a:	91 f7       	brne	.-28     	; 0x1c30 <getstringlength+0x14>
		counter++;
	}
	return counter;
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <saveNewPassword>:

void saveNewPassword(char *newpass)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <saveNewPassword+0x6>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9b 83       	std	Y+3, r25	; 0x03
    1c68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 itr = 0;
    1c6a:	19 82       	std	Y+1, r1	; 0x01
    1c6c:	13 c0       	rjmp	.+38     	; 0x1c94 <saveNewPassword+0x3a>
	while (newpass[itr] != '\0')
	{
		globalPassword[itr] = newpass[itr];
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	48 2f       	mov	r20, r24
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	fc 01       	movw	r30, r24
    1c80:	e2 0f       	add	r30, r18
    1c82:	f3 1f       	adc	r31, r19
    1c84:	80 81       	ld	r24, Z
    1c86:	fa 01       	movw	r30, r20
    1c88:	e0 50       	subi	r30, 0x00	; 0
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 83       	st	Z, r24
		itr++;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	89 83       	std	Y+1, r24	; 0x01
}

void saveNewPassword(char *newpass)
{
	uint8 itr = 0;
	while (newpass[itr] != '\0')
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	e2 0f       	add	r30, r18
    1ca2:	f3 1f       	adc	r31, r19
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 23       	and	r24, r24
    1ca8:	11 f7       	brne	.-60     	; 0x1c6e <saveNewPassword+0x14>
	{
		globalPassword[itr] = newpass[itr];
		itr++;
	}
	globalPassword[itr] = '\0';
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e0 50       	subi	r30, 0x00	; 0
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	10 82       	st	Z, r1
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <takePassword>:

char* takePassword() {
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <takePassword+0x6>
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	static char pass[MAX_PASSWORD_LENGTH];
	char key;
	uint8 i = 0;
    1cd0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 endpasswordfalg = 0;
    1cd2:	19 82       	std	Y+1, r1	; 0x01
    1cd4:	1e c0       	rjmp	.+60     	; 0x1d12 <takePassword+0x4e>
	while ((i < MAX_PASSWORD_LENGTH) && (!endpasswordfalg))
	{
		key = Keypad_getPressedKey();
    1cd6:	0e 94 a2 06 	call	0xd44	; 0xd44 <Keypad_getPressedKey>
    1cda:	8b 83       	std	Y+3, r24	; 0x03
		if (key == ' ')
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	80 32       	cpi	r24, 0x20	; 32
    1ce0:	51 f4       	brne	.+20     	; 0x1cf6 <takePassword+0x32>
		{
			pass[i] = '\0';
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e9 5c       	subi	r30, 0xC9	; 201
    1cec:	fe 4f       	sbci	r31, 0xFE	; 254
    1cee:	10 82       	st	Z, r1
			endpasswordfalg = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	0b c0       	rjmp	.+22     	; 0x1d0c <takePassword+0x48>
		}
		else
		{
			pass[i] = key;
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	e9 5c       	subi	r30, 0xC9	; 201
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	80 83       	st	Z, r24
			LCD_SendU8Data('*');
    1d06:	8a e2       	ldi	r24, 0x2A	; 42
    1d08:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <LCD_SendU8Data>
		}
		i++;
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	8f 5f       	subi	r24, 0xFF	; 255
    1d10:	8a 83       	std	Y+2, r24	; 0x02
char* takePassword() {
	static char pass[MAX_PASSWORD_LENGTH];
	char key;
	uint8 i = 0;
	uint8 endpasswordfalg = 0;
	while ((i < MAX_PASSWORD_LENGTH) && (!endpasswordfalg))
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	88 30       	cpi	r24, 0x08	; 8
    1d16:	18 f4       	brcc	.+6      	; 0x1d1e <takePassword+0x5a>
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	88 23       	and	r24, r24
    1d1c:	e1 f2       	breq	.-72     	; 0x1cd6 <takePassword+0x12>
			pass[i] = key;
			LCD_SendU8Data('*');
		}
		i++;
	}
	return pass;
    1d1e:	87 e3       	ldi	r24, 0x37	; 55
    1d20:	91 e0       	ldi	r25, 0x01	; 1
}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <waitWrongPassword>:

void waitWrongPassword() {
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
	Timer1_InitoneSecond();
    1d36:	0e 94 d6 05 	call	0xbac	; 0xbac <Timer1_InitoneSecond>
    1d3a:	17 c0       	rjmp	.+46     	; 0x1d6a <waitWrongPassword+0x3c>
	while (tick <= 9)
	{
		PORTB = (PORTB & 0x0F) | ((9 - tick) << 4);
    1d3c:	a8 e3       	ldi	r26, 0x38	; 56
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e8 e3       	ldi	r30, 0x38	; 56
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	4f 70       	andi	r20, 0x0F	; 15
    1d4a:	80 91 32 01 	lds	r24, 0x0132
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	89 e0       	ldi	r24, 0x09	; 9
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	82 1b       	sub	r24, r18
    1d58:	93 0b       	sbc	r25, r19
    1d5a:	82 95       	swap	r24
    1d5c:	92 95       	swap	r25
    1d5e:	90 7f       	andi	r25, 0xF0	; 240
    1d60:	98 27       	eor	r25, r24
    1d62:	80 7f       	andi	r24, 0xF0	; 240
    1d64:	98 27       	eor	r25, r24
    1d66:	84 2b       	or	r24, r20
    1d68:	8c 93       	st	X, r24
	return pass;
}

void waitWrongPassword() {
	Timer1_InitoneSecond();
	while (tick <= 9)
    1d6a:	80 91 32 01 	lds	r24, 0x0132
    1d6e:	8a 30       	cpi	r24, 0x0A	; 10
    1d70:	28 f3       	brcs	.-54     	; 0x1d3c <waitWrongPassword+0xe>
	{
		PORTB = (PORTB & 0x0F) | ((9 - tick) << 4);
	}
	timer1_stop();
    1d72:	0e 94 45 06 	call	0xc8a	; 0xc8a <timer1_stop>
	PORTB &= 0x0F;
    1d76:	a8 e3       	ldi	r26, 0x38	; 56
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e8 e3       	ldi	r30, 0x38	; 56
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	8f 70       	andi	r24, 0x0F	; 15
    1d82:	8c 93       	st	X, r24
	tick = 0;
    1d84:	10 92 32 01 	sts	0x0132, r1

}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <checkpasswords>:
uint8 checkpasswords(char *pass1, char *pass2) {
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	28 97       	sbiw	r28, 0x08	; 8
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	78 87       	std	Y+8, r23	; 0x08
    1da8:	6f 83       	std	Y+7, r22	; 0x07
	uint8 itr = 0;
    1daa:	1c 82       	std	Y+4, r1	; 0x04
	uint8 passwordsStatus = MATCHED_PASSWORDS;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	8b 83       	std	Y+3, r24	; 0x03
	uint8 pass1Length = getstringlength(pass1);
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <getstringlength>
    1db8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pass2Length = getstringlength(pass2);
    1dba:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbc:	98 85       	ldd	r25, Y+8	; 0x08
    1dbe:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <getstringlength>
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	if (pass2Length != pass1Length)
    1dc4:	99 81       	ldd	r25, Y+1	; 0x01
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	98 17       	cp	r25, r24
    1dca:	d9 f0       	breq	.+54     	; 0x1e02 <checkpasswords+0x74>
	{
		passwordsStatus = WRONG_PASSWORDS;
    1dcc:	1b 82       	std	Y+3, r1	; 0x03
    1dce:	24 c0       	rjmp	.+72     	; 0x1e18 <checkpasswords+0x8a>
	}
	else
	{
		while (pass1[itr] != '\0')
		{
			if (pass1[itr] != pass2[itr])
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	fc 01       	movw	r30, r24
    1ddc:	e2 0f       	add	r30, r18
    1dde:	f3 1f       	adc	r31, r19
    1de0:	40 81       	ld	r20, Z
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dea:	98 85       	ldd	r25, Y+8	; 0x08
    1dec:	fc 01       	movw	r30, r24
    1dee:	e2 0f       	add	r30, r18
    1df0:	f3 1f       	adc	r31, r19
    1df2:	80 81       	ld	r24, Z
    1df4:	48 17       	cp	r20, r24
    1df6:	11 f0       	breq	.+4      	; 0x1dfc <checkpasswords+0x6e>
			{
				passwordsStatus = WRONG_PASSWORDS;
    1df8:	1b 82       	std	Y+3, r1	; 0x03
    1dfa:	0e c0       	rjmp	.+28     	; 0x1e18 <checkpasswords+0x8a>
				break;
			}
			itr++;
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	8f 5f       	subi	r24, 0xFF	; 255
    1e00:	8c 83       	std	Y+4, r24	; 0x04
	{
		passwordsStatus = WRONG_PASSWORDS;
	}
	else
	{
		while (pass1[itr] != '\0')
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e2 0f       	add	r30, r18
    1e10:	f3 1f       	adc	r31, r19
    1e12:	80 81       	ld	r24, Z
    1e14:	88 23       	and	r24, r24
    1e16:	e1 f6       	brne	.-72     	; 0x1dd0 <checkpasswords+0x42>
				break;
			}
			itr++;
		}
	}
	return passwordsStatus;
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e1a:	28 96       	adiw	r28, 0x08	; 8
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <setnewPassword>:
void setnewPassword()
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <setnewPassword+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <setnewPassword+0x8>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
	char *pass1 = takePassword();
    1e3a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <takePassword>
    1e3e:	9d 83       	std	Y+5, r25	; 0x05
    1e40:	8c 83       	std	Y+4, r24	; 0x04
	LCD_Clear();
    1e42:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
	LCD_goToXY(1, 1);
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	61 e0       	ldi	r22, 0x01	; 1
    1e4a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
	LCD_SendString("Renter new Pass");
    1e4e:	86 ed       	ldi	r24, 0xD6	; 214
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
	LCD_goToXY(3, 1);
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_goToXY>
	char *pass2 = takePassword();
    1e5e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <takePassword>
    1e62:	9b 83       	std	Y+3, r25	; 0x03
    1e64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status = checkpasswords(pass1, pass2);
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e6c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e6e:	b9 01       	movw	r22, r18
    1e70:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <checkpasswords>
    1e74:	89 83       	std	Y+1, r24	; 0x01
	if (status == MATCHED_PASSWORDS)
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	41 f4       	brne	.+16     	; 0x1e8c <setnewPassword+0x60>
	{
		saveNewPassword(pass2);
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <saveNewPassword>
		DoorStatus = DOOR_IS_LOCKED;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	80 93 ff 00 	sts	0x00FF, r24
    1e8a:	0b c0       	rjmp	.+22     	; 0x1ea2 <setnewPassword+0x76>

	}
	else if (status == WRONG_PASSWORDS)
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	88 23       	and	r24, r24
    1e90:	41 f4       	brne	.+16     	; 0x1ea2 <setnewPassword+0x76>
	{
		LCD_Clear();
    1e92:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
		LCD_SendString("Wrong Password !");
    1e96:	86 ee       	ldi	r24, 0xE6	; 230
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_SendString>
		waitWrongPassword();
    1e9e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <waitWrongPassword>
	}
	else
	{

	}
	LCD_Clear();
    1ea2:	0e 94 82 09 	call	0x1304	; 0x1304 <LCD_Clear>
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <__divmodhi4>:
    1eb6:	97 fb       	bst	r25, 7
    1eb8:	09 2e       	mov	r0, r25
    1eba:	07 26       	eor	r0, r23
    1ebc:	0a d0       	rcall	.+20     	; 0x1ed2 <__divmodhi4_neg1>
    1ebe:	77 fd       	sbrc	r23, 7
    1ec0:	04 d0       	rcall	.+8      	; 0x1eca <__divmodhi4_neg2>
    1ec2:	2e d0       	rcall	.+92     	; 0x1f20 <__udivmodhi4>
    1ec4:	06 d0       	rcall	.+12     	; 0x1ed2 <__divmodhi4_neg1>
    1ec6:	00 20       	and	r0, r0
    1ec8:	1a f4       	brpl	.+6      	; 0x1ed0 <__divmodhi4_exit>

00001eca <__divmodhi4_neg2>:
    1eca:	70 95       	com	r23
    1ecc:	61 95       	neg	r22
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255

00001ed0 <__divmodhi4_exit>:
    1ed0:	08 95       	ret

00001ed2 <__divmodhi4_neg1>:
    1ed2:	f6 f7       	brtc	.-4      	; 0x1ed0 <__divmodhi4_exit>
    1ed4:	90 95       	com	r25
    1ed6:	81 95       	neg	r24
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	08 95       	ret

00001edc <__udivmodsi4>:
    1edc:	a1 e2       	ldi	r26, 0x21	; 33
    1ede:	1a 2e       	mov	r1, r26
    1ee0:	aa 1b       	sub	r26, r26
    1ee2:	bb 1b       	sub	r27, r27
    1ee4:	fd 01       	movw	r30, r26
    1ee6:	0d c0       	rjmp	.+26     	; 0x1f02 <__udivmodsi4_ep>

00001ee8 <__udivmodsi4_loop>:
    1ee8:	aa 1f       	adc	r26, r26
    1eea:	bb 1f       	adc	r27, r27
    1eec:	ee 1f       	adc	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	a2 17       	cp	r26, r18
    1ef2:	b3 07       	cpc	r27, r19
    1ef4:	e4 07       	cpc	r30, r20
    1ef6:	f5 07       	cpc	r31, r21
    1ef8:	20 f0       	brcs	.+8      	; 0x1f02 <__udivmodsi4_ep>
    1efa:	a2 1b       	sub	r26, r18
    1efc:	b3 0b       	sbc	r27, r19
    1efe:	e4 0b       	sbc	r30, r20
    1f00:	f5 0b       	sbc	r31, r21

00001f02 <__udivmodsi4_ep>:
    1f02:	66 1f       	adc	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	1a 94       	dec	r1
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <__udivmodsi4_loop>
    1f0e:	60 95       	com	r22
    1f10:	70 95       	com	r23
    1f12:	80 95       	com	r24
    1f14:	90 95       	com	r25
    1f16:	9b 01       	movw	r18, r22
    1f18:	ac 01       	movw	r20, r24
    1f1a:	bd 01       	movw	r22, r26
    1f1c:	cf 01       	movw	r24, r30
    1f1e:	08 95       	ret

00001f20 <__udivmodhi4>:
    1f20:	aa 1b       	sub	r26, r26
    1f22:	bb 1b       	sub	r27, r27
    1f24:	51 e1       	ldi	r21, 0x11	; 17
    1f26:	07 c0       	rjmp	.+14     	; 0x1f36 <__udivmodhi4_ep>

00001f28 <__udivmodhi4_loop>:
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	a6 17       	cp	r26, r22
    1f2e:	b7 07       	cpc	r27, r23
    1f30:	10 f0       	brcs	.+4      	; 0x1f36 <__udivmodhi4_ep>
    1f32:	a6 1b       	sub	r26, r22
    1f34:	b7 0b       	sbc	r27, r23

00001f36 <__udivmodhi4_ep>:
    1f36:	88 1f       	adc	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	5a 95       	dec	r21
    1f3c:	a9 f7       	brne	.-22     	; 0x1f28 <__udivmodhi4_loop>
    1f3e:	80 95       	com	r24
    1f40:	90 95       	com	r25
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	08 95       	ret

00001f48 <__prologue_saves__>:
    1f48:	2f 92       	push	r2
    1f4a:	3f 92       	push	r3
    1f4c:	4f 92       	push	r4
    1f4e:	5f 92       	push	r5
    1f50:	6f 92       	push	r6
    1f52:	7f 92       	push	r7
    1f54:	8f 92       	push	r8
    1f56:	9f 92       	push	r9
    1f58:	af 92       	push	r10
    1f5a:	bf 92       	push	r11
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	ca 1b       	sub	r28, r26
    1f72:	db 0b       	sbc	r29, r27
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	09 94       	ijmp

00001f80 <__epilogue_restores__>:
    1f80:	2a 88       	ldd	r2, Y+18	; 0x12
    1f82:	39 88       	ldd	r3, Y+17	; 0x11
    1f84:	48 88       	ldd	r4, Y+16	; 0x10
    1f86:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f88:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f90:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f92:	b9 84       	ldd	r11, Y+9	; 0x09
    1f94:	c8 84       	ldd	r12, Y+8	; 0x08
    1f96:	df 80       	ldd	r13, Y+7	; 0x07
    1f98:	ee 80       	ldd	r14, Y+6	; 0x06
    1f9a:	fd 80       	ldd	r15, Y+5	; 0x05
    1f9c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f9e:	1b 81       	ldd	r17, Y+3	; 0x03
    1fa0:	aa 81       	ldd	r26, Y+2	; 0x02
    1fa2:	b9 81       	ldd	r27, Y+1	; 0x01
    1fa4:	ce 0f       	add	r28, r30
    1fa6:	d1 1d       	adc	r29, r1
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	ed 01       	movw	r28, r26
    1fb4:	08 95       	ret

00001fb6 <itoa>:
    1fb6:	fb 01       	movw	r30, r22
    1fb8:	9f 01       	movw	r18, r30
    1fba:	e8 94       	clt
    1fbc:	42 30       	cpi	r20, 0x02	; 2
    1fbe:	c4 f0       	brlt	.+48     	; 0x1ff0 <itoa+0x3a>
    1fc0:	45 32       	cpi	r20, 0x25	; 37
    1fc2:	b4 f4       	brge	.+44     	; 0x1ff0 <itoa+0x3a>
    1fc4:	4a 30       	cpi	r20, 0x0A	; 10
    1fc6:	29 f4       	brne	.+10     	; 0x1fd2 <itoa+0x1c>
    1fc8:	97 fb       	bst	r25, 7
    1fca:	1e f4       	brtc	.+6      	; 0x1fd2 <itoa+0x1c>
    1fcc:	90 95       	com	r25
    1fce:	81 95       	neg	r24
    1fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd2:	64 2f       	mov	r22, r20
    1fd4:	77 27       	eor	r23, r23
    1fd6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__udivmodhi4>
    1fda:	80 5d       	subi	r24, 0xD0	; 208
    1fdc:	8a 33       	cpi	r24, 0x3A	; 58
    1fde:	0c f0       	brlt	.+2      	; 0x1fe2 <itoa+0x2c>
    1fe0:	89 5d       	subi	r24, 0xD9	; 217
    1fe2:	81 93       	st	Z+, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	a1 f7       	brne	.-24     	; 0x1fd2 <itoa+0x1c>
    1fea:	16 f4       	brtc	.+4      	; 0x1ff0 <itoa+0x3a>
    1fec:	5d e2       	ldi	r21, 0x2D	; 45
    1fee:	51 93       	st	Z+, r21
    1ff0:	10 82       	st	Z, r1
    1ff2:	c9 01       	movw	r24, r18
    1ff4:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <strrev>

00001ff8 <strrev>:
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	67 2f       	mov	r22, r23
    1ffe:	71 91       	ld	r23, Z+
    2000:	77 23       	and	r23, r23
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <strrev+0x4>
    2004:	32 97       	sbiw	r30, 0x02	; 2
    2006:	04 c0       	rjmp	.+8      	; 0x2010 <strrev+0x18>
    2008:	7c 91       	ld	r23, X
    200a:	6d 93       	st	X+, r22
    200c:	70 83       	st	Z, r23
    200e:	62 91       	ld	r22, -Z
    2010:	ae 17       	cp	r26, r30
    2012:	bf 07       	cpc	r27, r31
    2014:	c8 f3       	brcs	.-14     	; 0x2008 <strrev+0x10>
    2016:	08 95       	ret

00002018 <_exit>:
    2018:	f8 94       	cli

0000201a <__stop_program>:
    201a:	ff cf       	rjmp	.-2      	; 0x201a <__stop_program>
