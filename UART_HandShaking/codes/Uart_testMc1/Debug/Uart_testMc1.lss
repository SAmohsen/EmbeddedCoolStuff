
Uart_testMc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001836  000018ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007c  0080007c  000018e6  2**0
                  ALLOC
  3 .stab         00001560  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000106a  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004162  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000085ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 0b 	call	0x167c	; 0x167c <main>
      8a:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_trigger>:
 * Author: Sayed Mohsen
 *
 *******************************************************************************/
#include "LCD.h"

static void LCD_trigger() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6c 97       	sbiw	r28, 0x1c	; 28
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Triggering LCd By Sending A high to low Pulse*/
	SET_BIT(LCD_CONTROL_PORT,LCD_E);
     b5a:	a2 e3       	ldi	r26, 0x32	; 50
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e2 e3       	ldi	r30, 0x32	; 50
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e8       	ldi	r26, 0x80	; 128
     b6e:	bf e3       	ldi	r27, 0x3F	; 63
     b70:	89 8f       	std	Y+25, r24	; 0x19
     b72:	9a 8f       	std	Y+26, r25	; 0x1a
     b74:	ab 8f       	std	Y+27, r26	; 0x1b
     b76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b78:	69 8d       	ldd	r22, Y+25	; 0x19
     b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	4a e7       	ldi	r20, 0x7A	; 122
     b86:	53 e4       	ldi	r21, 0x43	; 67
     b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	8d 8b       	std	Y+21, r24	; 0x15
     b92:	9e 8b       	std	Y+22, r25	; 0x16
     b94:	af 8b       	std	Y+23, r26	; 0x17
     b96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     b98:	6d 89       	ldd	r22, Y+21	; 0x15
     b9a:	7e 89       	ldd	r23, Y+22	; 0x16
     b9c:	8f 89       	ldd	r24, Y+23	; 0x17
     b9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bac:	88 23       	and	r24, r24
     bae:	2c f4       	brge	.+10     	; 0xbba <LCD_trigger+0x74>
		__ticks = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9c 8b       	std	Y+20, r25	; 0x14
     bb6:	8b 8b       	std	Y+19, r24	; 0x13
     bb8:	3f c0       	rjmp	.+126    	; 0xc38 <LCD_trigger+0xf2>
	else if (__tmp > 65535)
     bba:	6d 89       	ldd	r22, Y+21	; 0x15
     bbc:	7e 89       	ldd	r23, Y+22	; 0x16
     bbe:	8f 89       	ldd	r24, Y+23	; 0x17
     bc0:	98 8d       	ldd	r25, Y+24	; 0x18
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	3f ef       	ldi	r19, 0xFF	; 255
     bc6:	4f e7       	ldi	r20, 0x7F	; 127
     bc8:	57 e4       	ldi	r21, 0x47	; 71
     bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bce:	18 16       	cp	r1, r24
     bd0:	4c f5       	brge	.+82     	; 0xc24 <LCD_trigger+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd2:	69 8d       	ldd	r22, Y+25	; 0x19
     bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e2       	ldi	r20, 0x20	; 32
     be0:	51 e4       	ldi	r21, 0x41	; 65
     be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	bc 01       	movw	r22, r24
     bec:	cd 01       	movw	r24, r26
     bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	9c 8b       	std	Y+20, r25	; 0x14
     bf8:	8b 8b       	std	Y+19, r24	; 0x13
     bfa:	0f c0       	rjmp	.+30     	; 0xc1a <LCD_trigger+0xd4>
     bfc:	89 e1       	ldi	r24, 0x19	; 25
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9a 8b       	std	Y+18, r25	; 0x12
     c02:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c04:	89 89       	ldd	r24, Y+17	; 0x11
     c06:	9a 89       	ldd	r25, Y+18	; 0x12
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <LCD_trigger+0xc2>
     c0c:	9a 8b       	std	Y+18, r25	; 0x12
     c0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c10:	8b 89       	ldd	r24, Y+19	; 0x13
     c12:	9c 89       	ldd	r25, Y+20	; 0x14
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	9c 8b       	std	Y+20, r25	; 0x14
     c18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1a:	8b 89       	ldd	r24, Y+19	; 0x13
     c1c:	9c 89       	ldd	r25, Y+20	; 0x14
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	69 f7       	brne	.-38     	; 0xbfc <LCD_trigger+0xb6>
     c22:	14 c0       	rjmp	.+40     	; 0xc4c <LCD_trigger+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c24:	6d 89       	ldd	r22, Y+21	; 0x15
     c26:	7e 89       	ldd	r23, Y+22	; 0x16
     c28:	8f 89       	ldd	r24, Y+23	; 0x17
     c2a:	98 8d       	ldd	r25, Y+24	; 0x18
     c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	9c 8b       	std	Y+20, r25	; 0x14
     c36:	8b 8b       	std	Y+19, r24	; 0x13
     c38:	8b 89       	ldd	r24, Y+19	; 0x13
     c3a:	9c 89       	ldd	r25, Y+20	; 0x14
     c3c:	98 8b       	std	Y+16, r25	; 0x10
     c3e:	8f 87       	std	Y+15, r24	; 0x0f
     c40:	8f 85       	ldd	r24, Y+15	; 0x0f
     c42:	98 89       	ldd	r25, Y+16	; 0x10
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <LCD_trigger+0xfe>
     c48:	98 8b       	std	Y+16, r25	; 0x10
     c4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLR_BIT(LCD_CONTROL_PORT, LCD_E);
     c4c:	a2 e3       	ldi	r26, 0x32	; 50
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e2 e3       	ldi	r30, 0x32	; 50
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8f 77       	andi	r24, 0x7F	; 127
     c58:	8c 93       	st	X, r24
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a0 e8       	ldi	r26, 0x80	; 128
     c60:	bf e3       	ldi	r27, 0x3F	; 63
     c62:	8b 87       	std	Y+11, r24	; 0x0b
     c64:	9c 87       	std	Y+12, r25	; 0x0c
     c66:	ad 87       	std	Y+13, r26	; 0x0d
     c68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c70:	9e 85       	ldd	r25, Y+14	; 0x0e
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	4a e7       	ldi	r20, 0x7A	; 122
     c78:	53 e4       	ldi	r21, 0x43	; 67
     c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	8f 83       	std	Y+7, r24	; 0x07
     c84:	98 87       	std	Y+8, r25	; 0x08
     c86:	a9 87       	std	Y+9, r26	; 0x09
     c88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c8a:	6f 81       	ldd	r22, Y+7	; 0x07
     c8c:	78 85       	ldd	r23, Y+8	; 0x08
     c8e:	89 85       	ldd	r24, Y+9	; 0x09
     c90:	9a 85       	ldd	r25, Y+10	; 0x0a
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	2c f4       	brge	.+10     	; 0xcac <LCD_trigger+0x166>
		__ticks = 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	9e 83       	std	Y+6, r25	; 0x06
     ca8:	8d 83       	std	Y+5, r24	; 0x05
     caa:	3f c0       	rjmp	.+126    	; 0xd2a <LCD_trigger+0x1e4>
	else if (__tmp > 65535)
     cac:	6f 81       	ldd	r22, Y+7	; 0x07
     cae:	78 85       	ldd	r23, Y+8	; 0x08
     cb0:	89 85       	ldd	r24, Y+9	; 0x09
     cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	3f ef       	ldi	r19, 0xFF	; 255
     cb8:	4f e7       	ldi	r20, 0x7F	; 127
     cba:	57 e4       	ldi	r21, 0x47	; 71
     cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc0:	18 16       	cp	r1, r24
     cc2:	4c f5       	brge	.+82     	; 0xd16 <LCD_trigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cca:	9e 85       	ldd	r25, Y+14	; 0x0e
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e2       	ldi	r20, 0x20	; 32
     cd2:	51 e4       	ldi	r21, 0x41	; 65
     cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	bc 01       	movw	r22, r24
     cde:	cd 01       	movw	r24, r26
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	9e 83       	std	Y+6, r25	; 0x06
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	0f c0       	rjmp	.+30     	; 0xd0c <LCD_trigger+0x1c6>
     cee:	89 e1       	ldi	r24, 0x19	; 25
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9c 83       	std	Y+4, r25	; 0x04
     cf4:	8b 83       	std	Y+3, r24	; 0x03
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <LCD_trigger+0x1b4>
     cfe:	9c 83       	std	Y+4, r25	; 0x04
     d00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	9e 83       	std	Y+6, r25	; 0x06
     d0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	9e 81       	ldd	r25, Y+6	; 0x06
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	69 f7       	brne	.-38     	; 0xcee <LCD_trigger+0x1a8>
     d14:	14 c0       	rjmp	.+40     	; 0xd3e <LCD_trigger+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d16:	6f 81       	ldd	r22, Y+7	; 0x07
     d18:	78 85       	ldd	r23, Y+8	; 0x08
     d1a:	89 85       	ldd	r24, Y+9	; 0x09
     d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	9e 83       	std	Y+6, r25	; 0x06
     d28:	8d 83       	std	Y+5, r24	; 0x05
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	9e 81       	ldd	r25, Y+6	; 0x06
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <LCD_trigger+0x1f0>
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
     d3e:	6c 96       	adiw	r28, 0x1c	; 28
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <LCD_Init>:

void LCD_Init() {
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CONTROL_DDR, LCD_RS);
     d58:	a1 e3       	ldi	r26, 0x31	; 49
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e1 e3       	ldi	r30, 0x31	; 49
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 62       	ori	r24, 0x20	; 32
     d64:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_E);
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_RW);
     d74:	a1 e3       	ldi	r26, 0x31	; 49
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e1 e3       	ldi	r30, 0x31	; 49
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 64       	ori	r24, 0x40	; 64
     d80:	8c 93       	st	X, r24

#ifdef LCD_4BIT_MODE
#ifdef HIGH_NIBBLE
	LCD_DATA_DDR |= 0xF0;
     d82:	a4 e3       	ldi	r26, 0x34	; 52
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e4 e3       	ldi	r30, 0x34	; 52
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 6f       	ori	r24, 0xF0	; 240
     d8e:	8c 93       	st	X, r24
#else
		LCD_DATA_DDR |= 0x0F ;
#endif
	LCD_SendCommand(FOUR_BITS_DATA_MODE);
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_SendCommand>
	LCD_SendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     d96:	88 e2       	ldi	r24, 0x28	; 40
     d98:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_SendCommand>

#else
	LCD_DATA_DDR = 0xFF ;
	LCD_SendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif
	LCD_Clear();
     d9c:	0e 94 a0 07 	call	0xf40	; 0xf40 <LCD_Clear>
	LCD_SendCommand(CURSOR_OFF);
     da0:	8c e0       	ldi	r24, 0x0C	; 12
     da2:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_SendCommand>
}
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <LCD_SendCommand>:

void LCD_SendCommand(Lcd_CommandType command) {
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LCD_CONTROL_PORT,LCD_RS);/*Select Command Register*/
     db8:	a2 e3       	ldi	r26, 0x32	; 50
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e2 e3       	ldi	r30, 0x32	; 50
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 7d       	andi	r24, 0xDF	; 223
     dc4:	8c 93       	st	X, r24
	CLR_BIT(LCD_CONTROL_PORT, LCD_RW);/*writing in LCD*/
     dc6:	a2 e3       	ldi	r26, 0x32	; 50
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e2 e3       	ldi	r30, 0x32	; 50
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 7b       	andi	r24, 0xBF	; 191
     dd2:	8c 93       	st	X, r24
#ifdef LCD_4BIT_MODE
#ifdef HIGH_NIBBLE
	/*send high nibble of command first then send low nibble*/
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
     dd4:	a5 e3       	ldi	r26, 0x35	; 53
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e5 e3       	ldi	r30, 0x35	; 53
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	98 2f       	mov	r25, r24
     de0:	9f 70       	andi	r25, 0x0F	; 15
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	80 7f       	andi	r24, 0xF0	; 240
     de6:	89 2b       	or	r24, r25
     de8:	8c 93       	st	X, r24
	LCD_trigger();
     dea:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_trigger>
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
     dee:	a5 e3       	ldi	r26, 0x35	; 53
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e5 e3       	ldi	r30, 0x35	; 53
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	28 2f       	mov	r18, r24
     dfa:	2f 70       	andi	r18, 0x0F	; 15
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	82 95       	swap	r24
     e04:	92 95       	swap	r25
     e06:	90 7f       	andi	r25, 0xF0	; 240
     e08:	98 27       	eor	r25, r24
     e0a:	80 7f       	andi	r24, 0xF0	; 240
     e0c:	98 27       	eor	r25, r24
     e0e:	82 2b       	or	r24, r18
     e10:	8c 93       	st	X, r24
	LCD_trigger();
     e12:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_trigger>
#else
	LCD_DATA_PORT = command ;
	LCD_trigger();
#endif

}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <LCD_SendU8Data>:
void LCD_SendU8Data(Lcd_DataType data) {
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LCD_CONTROL_PORT,LCD_RS);/*Select Data Register*/
     e2a:	a2 e3       	ldi	r26, 0x32	; 50
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e2 e3       	ldi	r30, 0x32	; 50
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 62       	ori	r24, 0x20	; 32
     e36:	8c 93       	st	X, r24
	CLR_BIT(LCD_CONTROL_PORT, LCD_RW);/*Writing In LCD*/
     e38:	a2 e3       	ldi	r26, 0x32	; 50
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e2 e3       	ldi	r30, 0x32	; 50
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8f 7b       	andi	r24, 0xBF	; 191
     e44:	8c 93       	st	X, r24
#ifdef LCD_4BIT_MODE
#ifdef HIGH_NIBBLE
	/*send high nibble of data first then send low nibble*/
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	98 2f       	mov	r25, r24
     e52:	9f 70       	andi	r25, 0x0F	; 15
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	80 7f       	andi	r24, 0xF0	; 240
     e58:	89 2b       	or	r24, r25
     e5a:	8c 93       	st	X, r24
	LCD_trigger();
     e5c:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_trigger>
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
     e60:	a5 e3       	ldi	r26, 0x35	; 53
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	28 2f       	mov	r18, r24
     e6c:	2f 70       	andi	r18, 0x0F	; 15
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	82 95       	swap	r24
     e76:	92 95       	swap	r25
     e78:	90 7f       	andi	r25, 0xF0	; 240
     e7a:	98 27       	eor	r25, r24
     e7c:	80 7f       	andi	r24, 0xF0	; 240
     e7e:	98 27       	eor	r25, r24
     e80:	82 2b       	or	r24, r18
     e82:	8c 93       	st	X, r24
	LCD_trigger();
     e84:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_trigger>
#else
	LCD_DATA_PORT = data ;
	LCD_trigger();
#endif

}
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <LCD_SendString>:
void LCD_SendString(char *str) {
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <LCD_SendString+0x6>
     e96:	0f 92       	push	r0
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	9b 83       	std	Y+3, r25	; 0x03
     e9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 itr = 0;
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <LCD_SendString+0x30>
	while (str[itr] != '\0') {
		LCD_SendU8Data(str[itr]);
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	fc 01       	movw	r30, r24
     eb0:	e2 0f       	add	r30, r18
     eb2:	f3 1f       	adc	r31, r19
     eb4:	80 81       	ld	r24, Z
     eb6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_SendU8Data>
		itr++;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	89 83       	std	Y+1, r24	; 0x01
#endif

}
void LCD_SendString(char *str) {
	uint8 itr = 0;
	while (str[itr] != '\0') {
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	fc 01       	movw	r30, r24
     ecc:	e2 0f       	add	r30, r18
     ece:	f3 1f       	adc	r31, r19
     ed0:	80 81       	ld	r24, Z
     ed2:	88 23       	and	r24, r24
     ed4:	39 f7       	brne	.-50     	; 0xea4 <LCD_SendString+0x14>
		LCD_SendU8Data(str[itr]);
		itr++;
	}
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <LCD_goToXY>:
void LCD_goToXY(uint8 x, uint8 y) {
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	27 97       	sbiw	r28, 0x07	; 7
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	8e 83       	std	Y+6, r24	; 0x06
     ef8:	6f 83       	std	Y+7, r22	; 0x07
	 * shift Cursor for 1st  line = 0x00 | 0x80 = 0x80
	 * shift Cursor for 2nd  line = 0x40 | 0x80 = 0xC0
	 * shift Cursor for 3rd  line = 0x10 | 0x80 = 0x90
	 * shift Cursor for 4rth line = 0x50 | 0x80 = 0xD0
	 * */
	uint8 lcd_addr[] = { 0x80, 0xC0, 0x90, 0xD0 };
     efa:	80 e8       	ldi	r24, 0x80	; 128
     efc:	8a 83       	std	Y+2, r24	; 0x02
     efe:	80 ec       	ldi	r24, 0xC0	; 192
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	80 e9       	ldi	r24, 0x90	; 144
     f04:	8c 83       	std	Y+4, r24	; 0x04
     f06:	80 ed       	ldi	r24, 0xD0	; 208
     f08:	8d 83       	std	Y+5, r24	; 0x05
	uint8 lcd_desired_address = lcd_addr[x - 1] + y;
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 01       	movw	r18, r24
     f12:	21 50       	subi	r18, 0x01	; 1
     f14:	30 40       	sbci	r19, 0x00	; 0
     f16:	ce 01       	movw	r24, r28
     f18:	02 96       	adiw	r24, 0x02	; 2
     f1a:	fc 01       	movw	r30, r24
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	90 81       	ld	r25, Z
     f22:	8f 81       	ldd	r24, Y+7	; 0x07
     f24:	89 0f       	add	r24, r25
     f26:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendCommand(lcd_desired_address);
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_SendCommand>
}
     f2e:	27 96       	adiw	r28, 0x07	; 7
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <LCD_Clear>:
void LCD_Clear(void) {
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_COMMAND);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_SendCommand>
}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <LCD_shiftDisplayLeft>:
void LCD_shiftDisplayLeft(){
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(SHIFT_DISPLAY_LEFT);
     f5c:	88 e1       	ldi	r24, 0x18	; 24
     f5e:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_SendCommand>
}
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <LCD_shiftDisplayRight>:
void LCD_shiftDisplayRight(){
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(SHIFT_DISPLAY_RIGHT);
     f70:	8c e1       	ldi	r24, 0x1C	; 28
     f72:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_SendCommand>
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <LCD_SendIntegerData>:
void LCD_SendIntegerData(int data) {
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	66 97       	sbiw	r28, 0x16	; 22
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	9e 8b       	std	Y+22, r25	; 0x16
     f92:	8d 8b       	std	Y+21, r24	; 0x15
	char buffer[20];
	itoa(data, buffer, 10);
     f94:	8d 89       	ldd	r24, Y+21	; 0x15
     f96:	9e 89       	ldd	r25, Y+22	; 0x16
     f98:	9e 01       	movw	r18, r28
     f9a:	2f 5f       	subi	r18, 0xFF	; 255
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	b9 01       	movw	r22, r18
     fa0:	4a e0       	ldi	r20, 0x0A	; 10
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <itoa>
	LCD_SendString(buffer);
     fa8:	ce 01       	movw	r24, r28
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_SendString>

}
     fb0:	66 96       	adiw	r28, 0x16	; 22
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <reverseString>:
static void reverseString(char *str,uint8 len) {
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <reverseString+0x6>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <reverseString+0x8>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <reverseString+0xa>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	9d 83       	std	Y+5, r25	; 0x05
     fd2:	8c 83       	std	Y+4, r24	; 0x04
     fd4:	6e 83       	std	Y+6, r22	; 0x06
	uint8 right = len - 1;
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	81 50       	subi	r24, 0x01	; 1
     fda:	8b 83       	std	Y+3, r24	; 0x03
	uint8 left = 0;
     fdc:	1a 82       	std	Y+2, r1	; 0x02
     fde:	2c c0       	rjmp	.+88     	; 0x1038 <reverseString+0x76>
	char tempCharacter;
	while (left < right) {
		tempCharacter = str[left];
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	fc 01       	movw	r30, r24
     fec:	e2 0f       	add	r30, r18
     fee:	f3 1f       	adc	r31, r19
     ff0:	80 81       	ld	r24, Z
     ff2:	89 83       	std	Y+1, r24	; 0x01
		str[left] = str[right];
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	dc 01       	movw	r26, r24
    1000:	a2 0f       	add	r26, r18
    1002:	b3 1f       	adc	r27, r19
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	fc 01       	movw	r30, r24
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	80 81       	ld	r24, Z
    1016:	8c 93       	st	X, r24
		str[right] = tempCharacter;
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	fc 01       	movw	r30, r24
    1024:	e2 0f       	add	r30, r18
    1026:	f3 1f       	adc	r31, r19
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	80 83       	st	Z, r24
		left++;
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	8a 83       	std	Y+2, r24	; 0x02
		right--;
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	8b 83       	std	Y+3, r24	; 0x03
}
static void reverseString(char *str,uint8 len) {
	uint8 right = len - 1;
	uint8 left = 0;
	char tempCharacter;
	while (left < right) {
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	98 17       	cp	r25, r24
    103e:	80 f2       	brcs	.-96     	; 0xfe0 <reverseString+0x1e>
		str[left] = str[right];
		str[right] = tempCharacter;
		left++;
		right--;
	}
}
    1040:	26 96       	adiw	r28, 0x06	; 6
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <integerToASCII>:
static void integerToASCII(int num, char buffer[]) {
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	65 97       	sbiw	r28, 0x15	; 21
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	9e 87       	std	Y+14, r25	; 0x0e
    1068:	8d 87       	std	Y+13, r24	; 0x0d
    106a:	78 8b       	std	Y+16, r23	; 0x10
    106c:	6f 87       	std	Y+15, r22	; 0x0f
	 *ASCII code	55	7	(number seven)
	 *ASCII code	56	8	(number eight)
	 *ASCII code	57	9	(number nine)
	 *
	 */
	char ascii_arr[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
    106e:	ce 01       	movw	r24, r28
    1070:	03 96       	adiw	r24, 0x03	; 3
    1072:	9a 8b       	std	Y+18, r25	; 0x12
    1074:	89 8b       	std	Y+17, r24	; 0x11
    1076:	e8 e6       	ldi	r30, 0x68	; 104
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	fc 8b       	std	Y+20, r31	; 0x14
    107c:	eb 8b       	std	Y+19, r30	; 0x13
    107e:	fa e0       	ldi	r31, 0x0A	; 10
    1080:	fd 8b       	std	Y+21, r31	; 0x15
    1082:	eb 89       	ldd	r30, Y+19	; 0x13
    1084:	fc 89       	ldd	r31, Y+20	; 0x14
    1086:	00 80       	ld	r0, Z
    1088:	8b 89       	ldd	r24, Y+19	; 0x13
    108a:	9c 89       	ldd	r25, Y+20	; 0x14
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9c 8b       	std	Y+20, r25	; 0x14
    1090:	8b 8b       	std	Y+19, r24	; 0x13
    1092:	e9 89       	ldd	r30, Y+17	; 0x11
    1094:	fa 89       	ldd	r31, Y+18	; 0x12
    1096:	00 82       	st	Z, r0
    1098:	89 89       	ldd	r24, Y+17	; 0x11
    109a:	9a 89       	ldd	r25, Y+18	; 0x12
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	9a 8b       	std	Y+18, r25	; 0x12
    10a0:	89 8b       	std	Y+17, r24	; 0x11
    10a2:	9d 89       	ldd	r25, Y+21	; 0x15
    10a4:	91 50       	subi	r25, 0x01	; 1
    10a6:	9d 8b       	std	Y+21, r25	; 0x15
    10a8:	ed 89       	ldd	r30, Y+21	; 0x15
    10aa:	ee 23       	and	r30, r30
    10ac:	51 f7       	brne	.-44     	; 0x1082 <integerToASCII+0x30>
	uint8 itr = 0;
    10ae:	1a 82       	std	Y+2, r1	; 0x02
	uint8 tempNumber;
	if (num == 0) {
    10b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	79 f5       	brne	.+94     	; 0x1116 <integerToASCII+0xc4>
		buffer[0] = ascii_arr[0];
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	ef 85       	ldd	r30, Y+15	; 0x0f
    10bc:	f8 89       	ldd	r31, Y+16	; 0x10
    10be:	80 83       	st	Z, r24
		itr++;
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	8a 83       	std	Y+2, r24	; 0x02
    10c6:	2b c0       	rjmp	.+86     	; 0x111e <integerToASCII+0xcc>
	} else {
		while (num != 0) {
			tempNumber = num % 10;
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	2a e0       	ldi	r18, 0x0A	; 10
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	b9 01       	movw	r22, r18
    10d2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodhi4>
    10d6:	89 83       	std	Y+1, r24	; 0x01
			buffer[itr] = ascii_arr[tempNumber];
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e0:	98 89       	ldd	r25, Y+16	; 0x10
    10e2:	dc 01       	movw	r26, r24
    10e4:	a2 0f       	add	r26, r18
    10e6:	b3 1f       	adc	r27, r19
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	ce 01       	movw	r24, r28
    10f0:	03 96       	adiw	r24, 0x03	; 3
    10f2:	fc 01       	movw	r30, r24
    10f4:	e2 0f       	add	r30, r18
    10f6:	f3 1f       	adc	r31, r19
    10f8:	80 81       	ld	r24, Z
    10fa:	8c 93       	st	X, r24
			itr++;
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	8a 83       	std	Y+2, r24	; 0x02
			num = num / 10;
    1102:	8d 85       	ldd	r24, Y+13	; 0x0d
    1104:	9e 85       	ldd	r25, Y+14	; 0x0e
    1106:	2a e0       	ldi	r18, 0x0A	; 10
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	b9 01       	movw	r22, r18
    110c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodhi4>
    1110:	cb 01       	movw	r24, r22
    1112:	9e 87       	std	Y+14, r25	; 0x0e
    1114:	8d 87       	std	Y+13, r24	; 0x0d
	uint8 tempNumber;
	if (num == 0) {
		buffer[0] = ascii_arr[0];
		itr++;
	} else {
		while (num != 0) {
    1116:	8d 85       	ldd	r24, Y+13	; 0x0d
    1118:	9e 85       	ldd	r25, Y+14	; 0x0e
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	a9 f6       	brne	.-86     	; 0x10c8 <integerToASCII+0x76>
			buffer[itr] = ascii_arr[tempNumber];
			itr++;
			num = num / 10;
		}
	}
	reverseString(buffer, itr);
    111e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1120:	98 89       	ldd	r25, Y+16	; 0x10
    1122:	6a 81       	ldd	r22, Y+2	; 0x02
    1124:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <reverseString>
}
    1128:	65 96       	adiw	r28, 0x15	; 21
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <LCD_sendu32Data>:

void LCD_sendu32Data(int data){
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	62 97       	sbiw	r28, 0x12	; 18
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	9a 8b       	std	Y+18, r25	; 0x12
    1150:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16]={'\0'};
    1152:	80 e1       	ldi	r24, 0x10	; 16
    1154:	fe 01       	movw	r30, r28
    1156:	31 96       	adiw	r30, 0x01	; 1
    1158:	df 01       	movw	r26, r30
    115a:	98 2f       	mov	r25, r24
    115c:	1d 92       	st	X+, r1
    115e:	9a 95       	dec	r25
    1160:	e9 f7       	brne	.-6      	; 0x115c <LCD_sendu32Data+0x22>
	integerToASCII(data , buffer);
    1162:	89 89       	ldd	r24, Y+17	; 0x11
    1164:	9a 89       	ldd	r25, Y+18	; 0x12
    1166:	9e 01       	movw	r18, r28
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	b9 01       	movw	r22, r18
    116e:	0e 94 29 08 	call	0x1052	; 0x1052 <integerToASCII>
	LCD_SendString(buffer);
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_SendString>
}
    117a:	62 96       	adiw	r28, 0x12	; 18
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <__vector_13>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_TXC_vect){
    118c:	1f 92       	push	r1
    118e:	0f 92       	push	r0
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	0f 92       	push	r0
    1194:	11 24       	eor	r1, r1
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62

}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_11>:
ISR(USART_RXC_vect){
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	8f 93       	push	r24
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	uart_data = UDR;
    11c4:	ec e2       	ldi	r30, 0x2C	; 44
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	80 93 7f 00 	sts	0x007F, r24
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	8f 91       	pop	r24
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <Uart_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void Uart_init(const Uart_ConfigChannel *config_ptr)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <Uart_init+0x6>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <Uart_init+0x8>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <Uart_init+0xa>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	9c 83       	std	Y+4, r25	; 0x04
    11f2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 desired_baudRate;/*variable to set baud rate in UBBR register */
	if (config_ptr != NULL_PTR)
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	09 f4       	brne	.+2      	; 0x11fe <Uart_init+0x1c>
    11fc:	74 c1       	rjmp	.+744    	; 0x14e6 <Uart_init+0x304>
	{
		uart_configChannel = config_ptr ;
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	90 93 7e 00 	sts	0x007E, r25
    1206:	80 93 7d 00 	sts	0x007D, r24
		SET_BIT(UCSRC, URSEL);/*Writing in USRC Register */
    120a:	a0 e4       	ldi	r26, 0x40	; 64
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e0 e4       	ldi	r30, 0x40	; 64
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 68       	ori	r24, 0x80	; 128
    1216:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xBF) | ((config_ptr->transmissionMode) << 6);/*select USART Transmission Mode (synchronous/Asynchronous)*/
    1218:	a0 e4       	ldi	r26, 0x40	; 64
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e0 e4       	ldi	r30, 0x40	; 64
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	28 2f       	mov	r18, r24
    1224:	2f 7b       	andi	r18, 0xBF	; 191
    1226:	eb 81       	ldd	r30, Y+3	; 0x03
    1228:	fc 81       	ldd	r31, Y+4	; 0x04
    122a:	80 85       	ldd	r24, Z+8	; 0x08
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	00 24       	eor	r0, r0
    1232:	96 95       	lsr	r25
    1234:	87 95       	ror	r24
    1236:	07 94       	ror	r0
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	07 94       	ror	r0
    123e:	98 2f       	mov	r25, r24
    1240:	80 2d       	mov	r24, r0
    1242:	82 2b       	or	r24, r18
    1244:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xE7) | ((config_ptr->parity_mode & 0x03) << 4);/*select Type Of Parity Bits (disable / odd parity /even parity)*/
    1246:	a0 e4       	ldi	r26, 0x40	; 64
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e0 e4       	ldi	r30, 0x40	; 64
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	27 7e       	andi	r18, 0xE7	; 231
    1254:	eb 81       	ldd	r30, Y+3	; 0x03
    1256:	fc 81       	ldd	r31, Y+4	; 0x04
    1258:	80 81       	ld	r24, Z
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	83 70       	andi	r24, 0x03	; 3
    1260:	90 70       	andi	r25, 0x00	; 0
    1262:	82 95       	swap	r24
    1264:	92 95       	swap	r25
    1266:	90 7f       	andi	r25, 0xF0	; 240
    1268:	98 27       	eor	r25, r24
    126a:	80 7f       	andi	r24, 0xF0	; 240
    126c:	98 27       	eor	r25, r24
    126e:	82 2b       	or	r24, r18
    1270:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xFB) | (config_ptr->stop_bit << 3);/*select number of stop bits (one / two) stop bits*/
    1272:	a0 e4       	ldi	r26, 0x40	; 64
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e0 e4       	ldi	r30, 0x40	; 64
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	28 2f       	mov	r18, r24
    127e:	2b 7f       	andi	r18, 0xFB	; 251
    1280:	eb 81       	ldd	r30, Y+3	; 0x03
    1282:	fc 81       	ldd	r31, Y+4	; 0x04
    1284:	81 81       	ldd	r24, Z+1	; 0x01
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	82 2b       	or	r24, r18
    1298:	8c 93       	st	X, r24

		switch (config_ptr->datalength)/*select number of data bits  in yoour frame */
    129a:	eb 81       	ldd	r30, Y+3	; 0x03
    129c:	fc 81       	ldd	r31, Y+4	; 0x04
    129e:	83 81       	ldd	r24, Z+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3e 83       	std	Y+6, r19	; 0x06
    12a6:	2d 83       	std	Y+5, r18	; 0x05
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <Uart_init+0xd2>
    12b2:	48 c0       	rjmp	.+144    	; 0x1344 <Uart_init+0x162>
    12b4:	2d 81       	ldd	r18, Y+5	; 0x05
    12b6:	3e 81       	ldd	r19, Y+6	; 0x06
    12b8:	23 30       	cpi	r18, 0x03	; 3
    12ba:	31 05       	cpc	r19, r1
    12bc:	54 f4       	brge	.+20     	; 0x12d2 <Uart_init+0xf0>
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	99 f0       	breq	.+38     	; 0x12ec <Uart_init+0x10a>
    12c6:	2d 81       	ldd	r18, Y+5	; 0x05
    12c8:	3e 81       	ldd	r19, Y+6	; 0x06
    12ca:	21 30       	cpi	r18, 0x01	; 1
    12cc:	31 05       	cpc	r19, r1
    12ce:	21 f1       	breq	.+72     	; 0x1318 <Uart_init+0x136>
    12d0:	7a c0       	rjmp	.+244    	; 0x13c6 <Uart_init+0x1e4>
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <Uart_init+0xfc>
    12dc:	49 c0       	rjmp	.+146    	; 0x1370 <Uart_init+0x18e>
    12de:	2d 81       	ldd	r18, Y+5	; 0x05
    12e0:	3e 81       	ldd	r19, Y+6	; 0x06
    12e2:	27 30       	cpi	r18, 0x07	; 7
    12e4:	31 05       	cpc	r19, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <Uart_init+0x108>
    12e8:	59 c0       	rjmp	.+178    	; 0x139c <Uart_init+0x1ba>
    12ea:	6d c0       	rjmp	.+218    	; 0x13c6 <Uart_init+0x1e4>
		{
		case data_5:/*5-bits data*/
			CLR_BIT(UCSRC, UCSZ0);
    12ec:	a0 e4       	ldi	r26, 0x40	; 64
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e0 e4       	ldi	r30, 0x40	; 64
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8d 7f       	andi	r24, 0xFD	; 253
    12f8:	8c 93       	st	X, r24
			CLR_BIT(UCSRC, UCSZ1);
    12fa:	a0 e4       	ldi	r26, 0x40	; 64
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e0 e4       	ldi	r30, 0x40	; 64
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8b 7f       	andi	r24, 0xFB	; 251
    1306:	8c 93       	st	X, r24
			CLR_BIT(UCSRB, UCSZ2);
    1308:	aa e2       	ldi	r26, 0x2A	; 42
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ea e2       	ldi	r30, 0x2A	; 42
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8b 7f       	andi	r24, 0xFB	; 251
    1314:	8c 93       	st	X, r24
    1316:	57 c0       	rjmp	.+174    	; 0x13c6 <Uart_init+0x1e4>
			break;
		case data_6:/*6-bits data*/
			SET_BIT(UCSRC, UCSZ0);
    1318:	a0 e4       	ldi	r26, 0x40	; 64
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e0 e4       	ldi	r30, 0x40	; 64
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	82 60       	ori	r24, 0x02	; 2
    1324:	8c 93       	st	X, r24
			CLR_BIT(UCSRC, UCSZ1);
    1326:	a0 e4       	ldi	r26, 0x40	; 64
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e0 e4       	ldi	r30, 0x40	; 64
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8b 7f       	andi	r24, 0xFB	; 251
    1332:	8c 93       	st	X, r24
			CLR_BIT(UCSRB, UCSZ2);
    1334:	aa e2       	ldi	r26, 0x2A	; 42
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	ea e2       	ldi	r30, 0x2A	; 42
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8b 7f       	andi	r24, 0xFB	; 251
    1340:	8c 93       	st	X, r24
    1342:	41 c0       	rjmp	.+130    	; 0x13c6 <Uart_init+0x1e4>
			break;
		case data_7:/*7-bits data*/
			CLR_BIT(UCSRC, UCSZ0);
    1344:	a0 e4       	ldi	r26, 0x40	; 64
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e0 e4       	ldi	r30, 0x40	; 64
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8d 7f       	andi	r24, 0xFD	; 253
    1350:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    1352:	a0 e4       	ldi	r26, 0x40	; 64
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e0 e4       	ldi	r30, 0x40	; 64
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	84 60       	ori	r24, 0x04	; 4
    135e:	8c 93       	st	X, r24
			CLR_BIT(UCSRB, UCSZ2);
    1360:	aa e2       	ldi	r26, 0x2A	; 42
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ea e2       	ldi	r30, 0x2A	; 42
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8b 7f       	andi	r24, 0xFB	; 251
    136c:	8c 93       	st	X, r24
    136e:	2b c0       	rjmp	.+86     	; 0x13c6 <Uart_init+0x1e4>
			break;
		case data_8:/*8-bits data*/
			SET_BIT(UCSRC, UCSZ0);
    1370:	a0 e4       	ldi	r26, 0x40	; 64
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e0 e4       	ldi	r30, 0x40	; 64
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	82 60       	ori	r24, 0x02	; 2
    137c:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    137e:	a0 e4       	ldi	r26, 0x40	; 64
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e0 e4       	ldi	r30, 0x40	; 64
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	84 60       	ori	r24, 0x04	; 4
    138a:	8c 93       	st	X, r24
			CLR_BIT(UCSRB, UCSZ2);
    138c:	aa e2       	ldi	r26, 0x2A	; 42
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ea e2       	ldi	r30, 0x2A	; 42
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8b 7f       	andi	r24, 0xFB	; 251
    1398:	8c 93       	st	X, r24
    139a:	15 c0       	rjmp	.+42     	; 0x13c6 <Uart_init+0x1e4>
			break;
		case data_9:/*9-bits data*/
			SET_BIT(UCSRC, UCSZ0);
    139c:	a0 e4       	ldi	r26, 0x40	; 64
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e0 e4       	ldi	r30, 0x40	; 64
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	82 60       	ori	r24, 0x02	; 2
    13a8:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    13aa:	a0 e4       	ldi	r26, 0x40	; 64
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e0 e4       	ldi	r30, 0x40	; 64
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	84 60       	ori	r24, 0x04	; 4
    13b6:	8c 93       	st	X, r24
			SET_BIT(UCSRB, UCSZ2);
    13b8:	aa e2       	ldi	r26, 0x2A	; 42
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ea e2       	ldi	r30, 0x2A	; 42
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	84 60       	ori	r24, 0x04	; 4
    13c4:	8c 93       	st	X, r24
			break;
		}
		/*setting BaudRate by calculating value to be loaded into UBBR register */
		if (normal_transmission_speed == config_ptr->speed)
    13c6:	eb 81       	ldd	r30, Y+3	; 0x03
    13c8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ca:	84 81       	ldd	r24, Z+4	; 0x04
    13cc:	88 23       	and	r24, r24
    13ce:	71 f5       	brne	.+92     	; 0x142c <Uart_init+0x24a>
		{
			CLR_BIT(UCSRA, U2X);/*normal transmission speed*/
    13d0:	ab e2       	ldi	r26, 0x2B	; 43
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e2       	ldi	r30, 0x2B	; 43
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8d 7f       	andi	r24, 0xFD	; 253
    13dc:	8c 93       	st	X, r24
			desired_baudRate = (((F_CPU) / (16UL * config_ptr->baudrate)) - 1);
    13de:	eb 81       	ldd	r30, Y+3	; 0x03
    13e0:	fc 81       	ldd	r31, Y+4	; 0x04
    13e2:	85 81       	ldd	r24, Z+5	; 0x05
    13e4:	96 81       	ldd	r25, Z+6	; 0x06
    13e6:	cc 01       	movw	r24, r24
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	aa 1f       	adc	r26, r26
    13f2:	bb 1f       	adc	r27, r27
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	aa 1f       	adc	r26, r26
    13fa:	bb 1f       	adc	r27, r27
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	aa 1f       	adc	r26, r26
    1402:	bb 1f       	adc	r27, r27
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	aa 1f       	adc	r26, r26
    140a:	bb 1f       	adc	r27, r27
    140c:	9c 01       	movw	r18, r24
    140e:	ad 01       	movw	r20, r26
    1410:	80 e4       	ldi	r24, 0x40	; 64
    1412:	92 e4       	ldi	r25, 0x42	; 66
    1414:	af e0       	ldi	r26, 0x0F	; 15
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__udivmodsi4>
    1420:	da 01       	movw	r26, r20
    1422:	c9 01       	movw	r24, r18
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	2e c0       	rjmp	.+92     	; 0x1488 <Uart_init+0x2a6>

		} else if (double_transmission_speed == config_ptr->speed)
    142c:	eb 81       	ldd	r30, Y+3	; 0x03
    142e:	fc 81       	ldd	r31, Y+4	; 0x04
    1430:	84 81       	ldd	r24, Z+4	; 0x04
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	49 f5       	brne	.+82     	; 0x1488 <Uart_init+0x2a6>
		{
			SET_BIT(UCSRA, U2X);/*double transmission speed*/
    1436:	ab e2       	ldi	r26, 0x2B	; 43
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	eb e2       	ldi	r30, 0x2B	; 43
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	8c 93       	st	X, r24
			desired_baudRate = (((F_CPU) / (8UL * config_ptr->baudrate)) - 1);
    1444:	eb 81       	ldd	r30, Y+3	; 0x03
    1446:	fc 81       	ldd	r31, Y+4	; 0x04
    1448:	85 81       	ldd	r24, Z+5	; 0x05
    144a:	96 81       	ldd	r25, Z+6	; 0x06
    144c:	cc 01       	movw	r24, r24
    144e:	a0 e0       	ldi	r26, 0x00	; 0
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	aa 1f       	adc	r26, r26
    1458:	bb 1f       	adc	r27, r27
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	aa 1f       	adc	r26, r26
    1460:	bb 1f       	adc	r27, r27
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	aa 1f       	adc	r26, r26
    1468:	bb 1f       	adc	r27, r27
    146a:	9c 01       	movw	r18, r24
    146c:	ad 01       	movw	r20, r26
    146e:	80 e4       	ldi	r24, 0x40	; 64
    1470:	92 e4       	ldi	r25, 0x42	; 66
    1472:	af e0       	ldi	r26, 0x0F	; 15
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__udivmodsi4>
    147e:	da 01       	movw	r26, r20
    1480:	c9 01       	movw	r24, r18
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
		{
			/*no Action Required */

		}

		if (config_ptr->readwriteMode == interrupts)
    1488:	eb 81       	ldd	r30, Y+3	; 0x03
    148a:	fc 81       	ldd	r31, Y+4	; 0x04
    148c:	87 81       	ldd	r24, Z+7	; 0x07
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	71 f4       	brne	.+28     	; 0x14ae <Uart_init+0x2cc>
		{
			SET_BIT(UCSRB,RXCIE); /*receive interrupt Enable*/
    1492:	aa e2       	ldi	r26, 0x2A	; 42
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ea e2       	ldi	r30, 0x2A	; 42
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 68       	ori	r24, 0x80	; 128
    149e:	8c 93       	st	X, r24
			SET_BIT(UCSRB, TXCIE);/*transmit interrupt enable*/
    14a0:	aa e2       	ldi	r26, 0x2A	; 42
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ea e2       	ldi	r30, 0x2A	; 42
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	80 64       	ori	r24, 0x40	; 64
    14ac:	8c 93       	st	X, r24
		}
		/*set desired BaudRate in UBRR register*/
		UBRRH = desired_baudRate >> 8;
    14ae:	e0 e4       	ldi	r30, 0x40	; 64
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	89 2f       	mov	r24, r25
    14b8:	99 27       	eor	r25, r25
    14ba:	80 83       	st	Z, r24
		UBRRL = desired_baudRate;
    14bc:	e9 e2       	ldi	r30, 0x29	; 41
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	80 83       	st	Z, r24

		/*transmitter Enable */
		SET_BIT(UCSRB, TXEN);
    14c4:	aa e2       	ldi	r26, 0x2A	; 42
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ea e2       	ldi	r30, 0x2A	; 42
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	88 60       	ori	r24, 0x08	; 8
    14d0:	8c 93       	st	X, r24
		/*Receiver Enable */
		SET_BIT(UCSRB, RXEN);
    14d2:	aa e2       	ldi	r26, 0x2A	; 42
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ea e2       	ldi	r30, 0x2A	; 42
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 61       	ori	r24, 0x10	; 16
    14de:	8c 93       	st	X, r24

		/*update UART Status*/
		Uart_status = UART_INITALIZED;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	80 93 7c 00 	sts	0x007C, r24

	}
}
    14e6:	26 96       	adiw	r28, 0x06	; 6
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <Uart_SendU8Data>:

/*
 * Function To Send  UART Byte
 */
void Uart_SendU8Data(uint8 data)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	0f 92       	push	r0
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	89 83       	std	Y+1, r24	; 0x01
	if (uart_configChannel->readwriteMode == polling)
    1504:	e0 91 7d 00 	lds	r30, 0x007D
    1508:	f0 91 7e 00 	lds	r31, 0x007E
    150c:	87 81       	ldd	r24, Z+7	; 0x07
    150e:	88 23       	and	r24, r24
    1510:	a9 f4       	brne	.+42     	; 0x153c <Uart_SendU8Data+0x44>
	{
		UDR = data;/*Send Data From UART*/
    1512:	ec e2       	ldi	r30, 0x2C	; 44
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(UCSRA, TXC));/*Wait until the transmission is complete TXC = 1*/
    151a:	eb e2       	ldi	r30, 0x2B	; 43
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	80 74       	andi	r24, 0x40	; 64
    1526:	90 70       	andi	r25, 0x00	; 0
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	b9 f3       	breq	.-18     	; 0x151a <Uart_SendU8Data+0x22>
		SET_BIT(UCSRA, TXC);/*clear flag by writing one in it */
    152c:	ab e2       	ldi	r26, 0x2B	; 43
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	eb e2       	ldi	r30, 0x2B	; 43
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	80 64       	ori	r24, 0x40	; 64
    1538:	8c 93       	st	X, r24
    153a:	0b c0       	rjmp	.+22     	; 0x1552 <Uart_SendU8Data+0x5a>
	}
	else if (uart_configChannel->readwriteMode == interrupts)
    153c:	e0 91 7d 00 	lds	r30, 0x007D
    1540:	f0 91 7e 00 	lds	r31, 0x007E
    1544:	87 81       	ldd	r24, Z+7	; 0x07
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	21 f4       	brne	.+8      	; 0x1552 <Uart_SendU8Data+0x5a>
	{
		UDR = data;/*Initiate Send Request */
    154a:	ec e2       	ldi	r30, 0x2C	; 44
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	80 83       	st	Z, r24
	}
	else{
		/*no Action Required */
	}

}
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <Uart_RecieveU8Data>:
/*
 * Function To Receive UART Byte
 */

Uart_dataFrameType Uart_RecieveU8Data()
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	Uart_dataFrameType data = 0xFF;/*dummy data*/
    1564:	8f ef       	ldi	r24, 0xFF	; 255
    1566:	89 83       	std	Y+1, r24	; 0x01
	if (uart_configChannel->readwriteMode == polling)
    1568:	e0 91 7d 00 	lds	r30, 0x007D
    156c:	f0 91 7e 00 	lds	r31, 0x007E
    1570:	87 81       	ldd	r24, Z+7	; 0x07
    1572:	88 23       	and	r24, r24
    1574:	49 f4       	brne	.+18     	; 0x1588 <Uart_RecieveU8Data+0x2e>
	{
		while (BIT_IS_CLEAR(UCSRA, RXC));/*wait until receive complete */
    1576:	eb e2       	ldi	r30, 0x2B	; 43
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	88 23       	and	r24, r24
    157e:	dc f7       	brge	.-10     	; 0x1576 <Uart_RecieveU8Data+0x1c>
		data =  UDR;/* read Data From UART*/
    1580:	ec e2       	ldi	r30, 0x2C	; 44
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	89 83       	std	Y+1, r24	; 0x01
	}
	return data ;
    1588:	89 81       	ldd	r24, Y+1	; 0x01
}
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <Uart_getU8data>:
/*
 * Function To Return UART global Data
 */

Uart_dataFrameType Uart_getU8data()
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	return uart_data ;
    159a:	80 91 7f 00 	lds	r24, 0x007F
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <Uart_SendString>:
/*
 * Function To Send String
 */

void Uart_SendString(uint8 *str)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <Uart_SendString+0x6>
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	9b 83       	std	Y+3, r25	; 0x03
    15b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 itr = 0;
    15b4:	19 82       	std	Y+1, r1	; 0x01
    15b6:	0e c0       	rjmp	.+28     	; 0x15d4 <Uart_SendString+0x30>
	while (str[itr] != '\0')
	{
		Uart_SendU8Data(str[itr]);
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	9b 81       	ldd	r25, Y+3	; 0x03
    15c2:	fc 01       	movw	r30, r24
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	80 81       	ld	r24, Z
    15ca:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Uart_SendU8Data>
		itr++;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	89 83       	std	Y+1, r24	; 0x01
 */

void Uart_SendString(uint8 *str)
{
	uint8 itr = 0;
	while (str[itr] != '\0')
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	fc 01       	movw	r30, r24
    15e0:	e2 0f       	add	r30, r18
    15e2:	f3 1f       	adc	r31, r19
    15e4:	80 81       	ld	r24, Z
    15e6:	88 23       	and	r24, r24
    15e8:	39 f7       	brne	.-50     	; 0x15b8 <Uart_SendString+0x14>
	{
		Uart_SendU8Data(str[itr]);
		itr++;
	}
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <Uart_RecieveString>:

/*
 * Function To receive String
 */
void Uart_RecieveString(uint8 *str)
{
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <Uart_RecieveString+0xa>
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	9b 83       	std	Y+3, r25	; 0x03
    1608:	8a 83       	std	Y+2, r24	; 0x02
	uint8 itr = 0;
    160a:	19 82       	std	Y+1, r1	; 0x01
	str[itr]=Uart_RecieveU8Data();
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	8c 01       	movw	r16, r24
    1618:	02 0f       	add	r16, r18
    161a:	13 1f       	adc	r17, r19
    161c:	0e 94 ad 0a 	call	0x155a	; 0x155a <Uart_RecieveU8Data>
    1620:	f8 01       	movw	r30, r16
    1622:	80 83       	st	Z, r24
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <Uart_RecieveString+0x4e>
	while (str[itr] != '#')/*special End Character */
	{
		itr++;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	89 83       	std	Y+1, r24	; 0x01
		str[itr] = Uart_RecieveU8Data();
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	8c 01       	movw	r16, r24
    1638:	02 0f       	add	r16, r18
    163a:	13 1f       	adc	r17, r19
    163c:	0e 94 ad 0a 	call	0x155a	; 0x155a <Uart_RecieveU8Data>
    1640:	f8 01       	movw	r30, r16
    1642:	80 83       	st	Z, r24
 */
void Uart_RecieveString(uint8 *str)
{
	uint8 itr = 0;
	str[itr]=Uart_RecieveU8Data();
	while (str[itr] != '#')/*special End Character */
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	fc 01       	movw	r30, r24
    1650:	e2 0f       	add	r30, r18
    1652:	f3 1f       	adc	r31, r19
    1654:	80 81       	ld	r24, Z
    1656:	83 32       	cpi	r24, 0x23	; 35
    1658:	31 f7       	brne	.-52     	; 0x1626 <Uart_RecieveString+0x30>
	{
		itr++;
		str[itr] = Uart_RecieveU8Data();
	}
	str[itr] = '\0';/*Terminate String */
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	fc 01       	movw	r30, r24
    1666:	e2 0f       	add	r30, r18
    1668:	f3 1f       	adc	r31, r19
    166a:	10 82       	st	Z, r1
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	08 95       	ret

0000167c <main>:
#include "main.h"

int main(int argc, char **argv) {
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	69 97       	sbiw	r28, 0x19	; 25
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	9f 8b       	std	Y+23, r25	; 0x17
    1692:	8e 8b       	std	Y+22, r24	; 0x16
    1694:	79 8f       	std	Y+25, r23	; 0x19
    1696:	68 8f       	std	Y+24, r22	; 0x18
	/* Create A Receive Buffer */
	uint8 rcv_Buffer [20] ;
	uint8 rcv_Byte;

	/*Initialize UART Driver */
	Uart_init(&UartConfigurations);
    1698:	82 e7       	ldi	r24, 0x72	; 114
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <Uart_init>

	/*Initialize LCD Driver*/
	LCD_Init();
    16a0:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCD_Init>

	/*Receive A New Byte From DTE*/
	rcv_Byte = Uart_RecieveU8Data();
    16a4:	0e 94 ad 0a 	call	0x155a	; 0x155a <Uart_RecieveU8Data>
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <main+0x36>

	/*Wait Until DTE is Ready To Transmit New Data*/
	while (REQUEST_TO_SEND != rcv_Byte)
	{
		rcv_Byte = Uart_RecieveU8Data();
    16ac:	0e 94 ad 0a 	call	0x155a	; 0x155a <Uart_RecieveU8Data>
    16b0:	89 83       	std	Y+1, r24	; 0x01

	/*Receive A New Byte From DTE*/
	rcv_Byte = Uart_RecieveU8Data();

	/*Wait Until DTE is Ready To Transmit New Data*/
	while (REQUEST_TO_SEND != rcv_Byte)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	89 30       	cpi	r24, 0x09	; 9
    16b6:	d1 f7       	brne	.-12     	; 0x16ac <main+0x30>
	/*
	 * Doing Some Operations
	 */

	/*Now DCE IS Ready To Receive Data*/
	Uart_SendU8Data(CLEAR_TO_SEND);
    16b8:	80 e1       	ldi	r24, 0x10	; 16
    16ba:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Uart_SendU8Data>

	/*Receive Data From UART*/
	Uart_RecieveString(rcv_Buffer);
    16be:	ce 01       	movw	r24, r28
    16c0:	02 96       	adiw	r24, 0x02	; 2
    16c2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Uart_RecieveString>

	/*Print Received Buffer On LCD */
	LCD_SendString(rcv_Buffer);
    16c6:	ce 01       	movw	r24, r28
    16c8:	02 96       	adiw	r24, 0x02	; 2
    16ca:	0e 94 48 07 	call	0xe90	; 0xe90 <LCD_SendString>
    16ce:	ff cf       	rjmp	.-2      	; 0x16ce <main+0x52>

000016d0 <__divmodhi4>:
    16d0:	97 fb       	bst	r25, 7
    16d2:	09 2e       	mov	r0, r25
    16d4:	07 26       	eor	r0, r23
    16d6:	0a d0       	rcall	.+20     	; 0x16ec <__divmodhi4_neg1>
    16d8:	77 fd       	sbrc	r23, 7
    16da:	04 d0       	rcall	.+8      	; 0x16e4 <__divmodhi4_neg2>
    16dc:	2e d0       	rcall	.+92     	; 0x173a <__udivmodhi4>
    16de:	06 d0       	rcall	.+12     	; 0x16ec <__divmodhi4_neg1>
    16e0:	00 20       	and	r0, r0
    16e2:	1a f4       	brpl	.+6      	; 0x16ea <__divmodhi4_exit>

000016e4 <__divmodhi4_neg2>:
    16e4:	70 95       	com	r23
    16e6:	61 95       	neg	r22
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255

000016ea <__divmodhi4_exit>:
    16ea:	08 95       	ret

000016ec <__divmodhi4_neg1>:
    16ec:	f6 f7       	brtc	.-4      	; 0x16ea <__divmodhi4_exit>
    16ee:	90 95       	com	r25
    16f0:	81 95       	neg	r24
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	08 95       	ret

000016f6 <__udivmodsi4>:
    16f6:	a1 e2       	ldi	r26, 0x21	; 33
    16f8:	1a 2e       	mov	r1, r26
    16fa:	aa 1b       	sub	r26, r26
    16fc:	bb 1b       	sub	r27, r27
    16fe:	fd 01       	movw	r30, r26
    1700:	0d c0       	rjmp	.+26     	; 0x171c <__udivmodsi4_ep>

00001702 <__udivmodsi4_loop>:
    1702:	aa 1f       	adc	r26, r26
    1704:	bb 1f       	adc	r27, r27
    1706:	ee 1f       	adc	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	a2 17       	cp	r26, r18
    170c:	b3 07       	cpc	r27, r19
    170e:	e4 07       	cpc	r30, r20
    1710:	f5 07       	cpc	r31, r21
    1712:	20 f0       	brcs	.+8      	; 0x171c <__udivmodsi4_ep>
    1714:	a2 1b       	sub	r26, r18
    1716:	b3 0b       	sbc	r27, r19
    1718:	e4 0b       	sbc	r30, r20
    171a:	f5 0b       	sbc	r31, r21

0000171c <__udivmodsi4_ep>:
    171c:	66 1f       	adc	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	88 1f       	adc	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	1a 94       	dec	r1
    1726:	69 f7       	brne	.-38     	; 0x1702 <__udivmodsi4_loop>
    1728:	60 95       	com	r22
    172a:	70 95       	com	r23
    172c:	80 95       	com	r24
    172e:	90 95       	com	r25
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	bd 01       	movw	r22, r26
    1736:	cf 01       	movw	r24, r30
    1738:	08 95       	ret

0000173a <__udivmodhi4>:
    173a:	aa 1b       	sub	r26, r26
    173c:	bb 1b       	sub	r27, r27
    173e:	51 e1       	ldi	r21, 0x11	; 17
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <__udivmodhi4_ep>

00001742 <__udivmodhi4_loop>:
    1742:	aa 1f       	adc	r26, r26
    1744:	bb 1f       	adc	r27, r27
    1746:	a6 17       	cp	r26, r22
    1748:	b7 07       	cpc	r27, r23
    174a:	10 f0       	brcs	.+4      	; 0x1750 <__udivmodhi4_ep>
    174c:	a6 1b       	sub	r26, r22
    174e:	b7 0b       	sbc	r27, r23

00001750 <__udivmodhi4_ep>:
    1750:	88 1f       	adc	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	5a 95       	dec	r21
    1756:	a9 f7       	brne	.-22     	; 0x1742 <__udivmodhi4_loop>
    1758:	80 95       	com	r24
    175a:	90 95       	com	r25
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	08 95       	ret

00001762 <__prologue_saves__>:
    1762:	2f 92       	push	r2
    1764:	3f 92       	push	r3
    1766:	4f 92       	push	r4
    1768:	5f 92       	push	r5
    176a:	6f 92       	push	r6
    176c:	7f 92       	push	r7
    176e:	8f 92       	push	r8
    1770:	9f 92       	push	r9
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	ca 1b       	sub	r28, r26
    178c:	db 0b       	sbc	r29, r27
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	09 94       	ijmp

0000179a <__epilogue_restores__>:
    179a:	2a 88       	ldd	r2, Y+18	; 0x12
    179c:	39 88       	ldd	r3, Y+17	; 0x11
    179e:	48 88       	ldd	r4, Y+16	; 0x10
    17a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    17a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    17a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    17a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    17a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    17aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    17ac:	b9 84       	ldd	r11, Y+9	; 0x09
    17ae:	c8 84       	ldd	r12, Y+8	; 0x08
    17b0:	df 80       	ldd	r13, Y+7	; 0x07
    17b2:	ee 80       	ldd	r14, Y+6	; 0x06
    17b4:	fd 80       	ldd	r15, Y+5	; 0x05
    17b6:	0c 81       	ldd	r16, Y+4	; 0x04
    17b8:	1b 81       	ldd	r17, Y+3	; 0x03
    17ba:	aa 81       	ldd	r26, Y+2	; 0x02
    17bc:	b9 81       	ldd	r27, Y+1	; 0x01
    17be:	ce 0f       	add	r28, r30
    17c0:	d1 1d       	adc	r29, r1
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	ed 01       	movw	r28, r26
    17ce:	08 95       	ret

000017d0 <itoa>:
    17d0:	fb 01       	movw	r30, r22
    17d2:	9f 01       	movw	r18, r30
    17d4:	e8 94       	clt
    17d6:	42 30       	cpi	r20, 0x02	; 2
    17d8:	c4 f0       	brlt	.+48     	; 0x180a <itoa+0x3a>
    17da:	45 32       	cpi	r20, 0x25	; 37
    17dc:	b4 f4       	brge	.+44     	; 0x180a <itoa+0x3a>
    17de:	4a 30       	cpi	r20, 0x0A	; 10
    17e0:	29 f4       	brne	.+10     	; 0x17ec <itoa+0x1c>
    17e2:	97 fb       	bst	r25, 7
    17e4:	1e f4       	brtc	.+6      	; 0x17ec <itoa+0x1c>
    17e6:	90 95       	com	r25
    17e8:	81 95       	neg	r24
    17ea:	9f 4f       	sbci	r25, 0xFF	; 255
    17ec:	64 2f       	mov	r22, r20
    17ee:	77 27       	eor	r23, r23
    17f0:	0e 94 9d 0b 	call	0x173a	; 0x173a <__udivmodhi4>
    17f4:	80 5d       	subi	r24, 0xD0	; 208
    17f6:	8a 33       	cpi	r24, 0x3A	; 58
    17f8:	0c f0       	brlt	.+2      	; 0x17fc <itoa+0x2c>
    17fa:	89 5d       	subi	r24, 0xD9	; 217
    17fc:	81 93       	st	Z+, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	a1 f7       	brne	.-24     	; 0x17ec <itoa+0x1c>
    1804:	16 f4       	brtc	.+4      	; 0x180a <itoa+0x3a>
    1806:	5d e2       	ldi	r21, 0x2D	; 45
    1808:	51 93       	st	Z+, r21
    180a:	10 82       	st	Z, r1
    180c:	c9 01       	movw	r24, r18
    180e:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <strrev>

00001812 <strrev>:
    1812:	dc 01       	movw	r26, r24
    1814:	fc 01       	movw	r30, r24
    1816:	67 2f       	mov	r22, r23
    1818:	71 91       	ld	r23, Z+
    181a:	77 23       	and	r23, r23
    181c:	e1 f7       	brne	.-8      	; 0x1816 <strrev+0x4>
    181e:	32 97       	sbiw	r30, 0x02	; 2
    1820:	04 c0       	rjmp	.+8      	; 0x182a <strrev+0x18>
    1822:	7c 91       	ld	r23, X
    1824:	6d 93       	st	X+, r22
    1826:	70 83       	st	Z, r23
    1828:	62 91       	ld	r22, -Z
    182a:	ae 17       	cp	r26, r30
    182c:	bf 07       	cpc	r27, r31
    182e:	c8 f3       	brcs	.-14     	; 0x1822 <strrev+0x10>
    1830:	08 95       	ret

00001832 <_exit>:
    1832:	f8 94       	cli

00001834 <__stop_program>:
    1834:	ff cf       	rjmp	.-2      	; 0x1834 <__stop_program>
