
smart_Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  00003334  000033c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008001ae  008001ae  00003516  2**0
                  ALLOC
  3 .stab         000049f8  00000000  00000000  00003518  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002464  00000000  00000000  00007f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a706  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000cb11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000de97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f070  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f526  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fe94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__vector_1>
       8:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__vector_2>
       c:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_3>
      10:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__vector_18>
      4c:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3d       	cpi	r26, 0xD2	; 210
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 16 	call	0x2dec	; 0x2dec <main>
      8a:	0c 94 98 19 	jmp	0x3330	; 0x3330 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e6       	ldi	r22, 0x69	; 105
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 58       	subi	r30, 0x8F	; 143
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_14>:


/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(ADC_vect) {
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
	g_adcResult = ADC;/*Read ADC after conversion complete */
     e48:	e4 e2       	ldi	r30, 0x24	; 36
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	90 93 b2 01 	sts	0x01B2, r25
     e54:	80 93 b1 01 	sts	0x01B1, r24
}/*flag cleared automatically after executing ISR*/
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <Adc_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void Adc_init(const Adc_ConfigType *Config_Ptr) {
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <Adc_init+0x6>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <Adc_init+0x8>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01
	if (NULL_PTR != Config_Ptr) {
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	09 f4       	brne	.+2      	; 0xe88 <Adc_init+0x1a>
     e86:	68 c0       	rjmp	.+208    	; 0xf58 <Adc_init+0xea>
		Adc_configureChannels = Config_Ptr;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	90 93 b0 01 	sts	0x01B0, r25
     e90:	80 93 af 01 	sts	0x01AF, r24
		SET_BIT(ADCSRA, ADEN);/*Enable ADC*/
     e94:	a6 e2       	ldi	r26, 0x26	; 38
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	8c 93       	st	X, r24
		ADMUX  = (ADMUX & 0x3F)  | ((Adc_configureChannels->refrence_volt & 0x03) << 6);/*set ADC reference volt */
     ea2:	a7 e2       	ldi	r26, 0x27	; 39
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e2       	ldi	r30, 0x27	; 39
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	28 2f       	mov	r18, r24
     eae:	2f 73       	andi	r18, 0x3F	; 63
     eb0:	e0 91 af 01 	lds	r30, 0x01AF
     eb4:	f0 91 b0 01 	lds	r31, 0x01B0
     eb8:	80 81       	ld	r24, Z
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	00 24       	eor	r0, r0
     ec0:	96 95       	lsr	r25
     ec2:	87 95       	ror	r24
     ec4:	07 94       	ror	r0
     ec6:	96 95       	lsr	r25
     ec8:	87 95       	ror	r24
     eca:	07 94       	ror	r0
     ecc:	98 2f       	mov	r25, r24
     ece:	80 2d       	mov	r24, r0
     ed0:	82 2b       	or	r24, r18
     ed2:	8c 93       	st	X, r24
		ADCSRA = (ADCSRA & 0xF8) | (Adc_configureChannels->prescale & 0x07);/*set ADC prescale value ADC must operate in range 50-200Khz*/
     ed4:	a6 e2       	ldi	r26, 0x26	; 38
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e6 e2       	ldi	r30, 0x26	; 38
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	98 2f       	mov	r25, r24
     ee0:	98 7f       	andi	r25, 0xF8	; 248
     ee2:	e0 91 af 01 	lds	r30, 0x01AF
     ee6:	f0 91 b0 01 	lds	r31, 0x01B0
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	87 70       	andi	r24, 0x07	; 7
     eee:	89 2b       	or	r24, r25
     ef0:	8c 93       	st	X, r24
		switch (Adc_configureChannels->aligment)/*ADC result Alignment*/
     ef2:	e0 91 af 01 	lds	r30, 0x01AF
     ef6:	f0 91 b0 01 	lds	r31, 0x01B0
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	3c 83       	std	Y+4, r19	; 0x04
     f02:	2b 83       	std	Y+3, r18	; 0x03
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	31 f0       	breq	.+12     	; 0xf18 <Adc_init+0xaa>
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	3c 81       	ldd	r19, Y+4	; 0x04
     f10:	21 30       	cpi	r18, 0x01	; 1
     f12:	31 05       	cpc	r19, r1
     f14:	49 f0       	breq	.+18     	; 0xf28 <Adc_init+0xba>
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <Adc_init+0xc8>
		{
		case ADC_ALIGN_LEFT:SET_BIT(ADMUX,ADLAR);
     f18:	a7 e2       	ldi	r26, 0x27	; 39
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e7 e2       	ldi	r30, 0x27	; 39
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 62       	ori	r24, 0x20	; 32
     f24:	8c 93       	st	X, r24
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <Adc_init+0xc8>
		break;
		case ADC_ALIGN_RIGHT:CLR_BIT(ADMUX,ADLAR);
     f28:	a7 e2       	ldi	r26, 0x27	; 39
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e7 e2       	ldi	r30, 0x27	; 39
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8f 7d       	andi	r24, 0xDF	; 223
     f34:	8c 93       	st	X, r24
		break;
		}
		if (Adc_interrupts == Adc_configureChannels->mode) {
     f36:	e0 91 af 01 	lds	r30, 0x01AF
     f3a:	f0 91 b0 01 	lds	r31, 0x01B0
     f3e:	83 81       	ldd	r24, Z+3	; 0x03
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	39 f4       	brne	.+14     	; 0xf52 <Adc_init+0xe4>
			SET_BIT(ADCSRA, ADIE);/*enable ADC interrupts*/
     f44:	a6 e2       	ldi	r26, 0x26	; 38
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e6 e2       	ldi	r30, 0x26	; 38
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	8c 93       	st	X, r24
		if ( ADC_AUTO_TRIGGERING_MODE == STD_ON) {
			SET_BIT(ADCSRA, ADATE);/*Enable ADC auto triggering mode */
			SFIOR = (Adc_configureChannels->triggeringmode << 5);/*set ADC Triggering Mode*/
		}

		Adc_Status = ADC_INITIALIZED;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 ae 01 	sts	0x01AE, r24
	}
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <Adc_readChannel>:


Adc_ValueGroupType Adc_readChannel(Adc_Channel channel) {
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <Adc_readChannel+0x6>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	8b 83       	std	Y+3, r24	; 0x03
	Adc_ValueGroupType Adc_result = 0;
     f74:	1a 82       	std	Y+2, r1	; 0x02
     f76:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_INITIALIZED == Adc_Status) {
     f78:	80 91 ae 01 	lds	r24, 0x01AE
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <Adc_readChannel+0x1c>
     f80:	3e c0       	rjmp	.+124    	; 0xffe <Adc_readChannel+0x98>
		ADMUX = (ADMUX & 0xE0) | (channel & 0x07);/*set correct channel*/
     f82:	a7 e2       	ldi	r26, 0x27	; 39
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 e2       	ldi	r30, 0x27	; 39
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	98 2f       	mov	r25, r24
     f8e:	90 7e       	andi	r25, 0xE0	; 224
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	87 70       	andi	r24, 0x07	; 7
     f94:	89 2b       	or	r24, r25
     f96:	8c 93       	st	X, r24
		if (STD_OFF == ADC_AUTO_TRIGGERING_MODE)
		{
			if (Adc_interrupts == Adc_configureChannels->mode)
     f98:	e0 91 af 01 	lds	r30, 0x01AF
     f9c:	f0 91 b0 01 	lds	r31, 0x01B0
     fa0:	83 81       	ldd	r24, Z+3	; 0x03
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	41 f4       	brne	.+16     	; 0xfb6 <Adc_readChannel+0x50>
			{
				SET_BIT(ADCSRA, ADSC);/*start conversion*/
     fa6:	a6 e2       	ldi	r26, 0x26	; 38
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e6 e2       	ldi	r30, 0x26	; 38
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 64       	ori	r24, 0x40	; 64
     fb2:	8c 93       	st	X, r24
     fb4:	24 c0       	rjmp	.+72     	; 0xffe <Adc_readChannel+0x98>
			}
			else if (Adc_polling == Adc_configureChannels->mode)
     fb6:	e0 91 af 01 	lds	r30, 0x01AF
     fba:	f0 91 b0 01 	lds	r31, 0x01B0
     fbe:	83 81       	ldd	r24, Z+3	; 0x03
     fc0:	88 23       	and	r24, r24
     fc2:	e9 f4       	brne	.+58     	; 0xffe <Adc_readChannel+0x98>
			{
				SET_BIT(ADCSRA, ADSC);/*start conversion*/
     fc4:	a6 e2       	ldi	r26, 0x26	; 38
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e6 e2       	ldi	r30, 0x26	; 38
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 64       	ori	r24, 0x40	; 64
     fd0:	8c 93       	st	X, r24
				while (BIT_IS_CLEAR(ADCSRA, ADIF)); /*wait until ADC Finish Conversion*/
     fd2:	e6 e2       	ldi	r30, 0x26	; 38
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	80 71       	andi	r24, 0x10	; 16
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	b9 f3       	breq	.-18     	; 0xfd2 <Adc_readChannel+0x6c>
				SET_BIT(ADCSRA, ADIF); /* Clear Flag by writing 1 in it*/
     fe4:	a6 e2       	ldi	r26, 0x26	; 38
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e6 e2       	ldi	r30, 0x26	; 38
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 61       	ori	r24, 0x10	; 16
     ff0:	8c 93       	st	X, r24
				Adc_result = ADC;/*read ADC Value*/
     ff2:	e4 e2       	ldi	r30, 0x24	; 36
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
			}

		}
	}

	return Adc_result;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <Adc_enableInterrupt>:

void Adc_enableInterrupt(void) {
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADIE);/*enable ADC interrupts*/
    1016:	a6 e2       	ldi	r26, 0x26	; 38
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e6 e2       	ldi	r30, 0x26	; 38
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 60       	ori	r24, 0x08	; 8
    1022:	8c 93       	st	X, r24
}
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <Adc_disableInterrupt>:
void Adc_disableInterrupt(void) {
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADIE);/*disable ADC interrupts*/
    1032:	a6 e2       	ldi	r26, 0x26	; 38
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e6 e2       	ldi	r30, 0x26	; 38
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	87 7f       	andi	r24, 0xF7	; 247
    103e:	8c 93       	st	X, r24
}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <Adc_getAdcResult>:

Adc_ValueGroupType Adc_getAdcResult(void){
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
	return g_adcResult;
    104e:	80 91 b1 01 	lds	r24, 0x01B1
    1052:	90 91 b2 01 	lds	r25, 0x01B2
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <Dio_Init>:
static uint8 Dio_status = DIO_NOT_INITIALIZED;
static Dio_ConfigChannel *Dio_configuredChannels = NULL_PTR;



void Dio_Init(const Dio_ConfigType *ConfigPtr) {
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <Dio_Init+0x6>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9b 83       	std	Y+3, r25	; 0x03
    106a:	8a 83       	std	Y+2, r24	; 0x02
	boolean error = FALSE  ;
    106c:	19 82       	std	Y+1, r1	; 0x01
	/*Error Checking */
	if (NULL_PTR == ConfigPtr)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	11 f4       	brne	.+4      	; 0x107a <Dio_Init+0x1e>
	{
		/* report Null pointer error */
		error = TRUE ;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* no action required */
	}

	if (FALSE == error)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	88 23       	and	r24, r24
    107e:	49 f4       	brne	.+18     	; 0x1092 <Dio_Init+0x36>
	{
		Dio_configuredChannels = ConfigPtr->Dio_channels ;
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	90 93 b5 01 	sts	0x01B5, r25
    1088:	80 93 b4 01 	sts	0x01B4, r24
		Dio_status = DIO_INITIALIZED ;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 93 b3 01 	sts	0x01B3, r24
	{
		/* no action required */

	}

}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Dio_WriteChannel>:



void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level) {
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	27 97       	sbiw	r28, 0x07	; 7
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	8c 83       	std	Y+4, r24	; 0x04
    10b4:	6d 83       	std	Y+5, r22	; 0x05
	uint8 *port_ptr = NULL_PTR;
    10b6:	1b 82       	std	Y+3, r1	; 0x03
    10b8:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
    10ba:	19 82       	std	Y+1, r1	; 0x01

	if (DIO_NOT_INITIALIZED == Dio_status)
    10bc:	80 91 b3 01 	lds	r24, 0x01B3
    10c0:	88 23       	and	r24, r24
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <Dio_WriteChannel+0x2a>
	{
		/* report DIO not INITIALIZED  error */
		error = TRUE;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* no action required */
	}
	if (DIO_CONFIGURED_CHANNELS <= ChannelId)
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	88 23       	and	r24, r24
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <Dio_WriteChannel+0x34>
	{
		/*report error parameters*/
		error = TRUE;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	if (FALSE == error)
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	88 23       	and	r24, r24
    10d6:	09 f0       	breq	.+2      	; 0x10da <Dio_WriteChannel+0x3c>
    10d8:	84 c0       	rjmp	.+264    	; 0x11e2 <Dio_WriteChannel+0x144>
	{
		/*get port address address*/
		switch (Dio_configuredChannels[ChannelId].port_number)
    10da:	20 91 b4 01 	lds	r18, 0x01B4
    10de:	30 91 b5 01 	lds	r19, 0x01B5
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	f9 01       	movw	r30, r18
    10ee:	e8 0f       	add	r30, r24
    10f0:	f9 1f       	adc	r31, r25
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	3f 83       	std	Y+7, r19	; 0x07
    10fa:	2e 83       	std	Y+6, r18	; 0x06
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	91 05       	cpc	r25, r1
    1104:	d1 f0       	breq	.+52     	; 0x113a <Dio_WriteChannel+0x9c>
    1106:	2e 81       	ldd	r18, Y+6	; 0x06
    1108:	3f 81       	ldd	r19, Y+7	; 0x07
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	2c f4       	brge	.+10     	; 0x111a <Dio_WriteChannel+0x7c>
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	9f 81       	ldd	r25, Y+7	; 0x07
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	61 f0       	breq	.+24     	; 0x1130 <Dio_WriteChannel+0x92>
    1118:	1e c0       	rjmp	.+60     	; 0x1156 <Dio_WriteChannel+0xb8>
    111a:	2e 81       	ldd	r18, Y+6	; 0x06
    111c:	3f 81       	ldd	r19, Y+7	; 0x07
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	81 f0       	breq	.+32     	; 0x1144 <Dio_WriteChannel+0xa6>
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	81 f0       	breq	.+32     	; 0x114e <Dio_WriteChannel+0xb0>
    112e:	13 c0       	rjmp	.+38     	; 0x1156 <Dio_WriteChannel+0xb8>
		{
		case 0:port_ptr = &PORTA_REG;
    1130:	8b e3       	ldi	r24, 0x3B	; 59
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9b 83       	std	Y+3, r25	; 0x03
    1136:	8a 83       	std	Y+2, r24	; 0x02
    1138:	0e c0       	rjmp	.+28     	; 0x1156 <Dio_WriteChannel+0xb8>
		break;
		case 1:port_ptr = &PORTB_REG;
    113a:	88 e3       	ldi	r24, 0x38	; 56
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	9b 83       	std	Y+3, r25	; 0x03
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <Dio_WriteChannel+0xb8>
		break;
		case 2:port_ptr = &PORTC_REG;
    1144:	85 e3       	ldi	r24, 0x35	; 53
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9b 83       	std	Y+3, r25	; 0x03
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <Dio_WriteChannel+0xb8>
		break;
		case 3:port_ptr = &PORTD_REG;
    114e:	82 e3       	ldi	r24, 0x32	; 50
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9b 83       	std	Y+3, r25	; 0x03
    1154:	8a 83       	std	Y+2, r24	; 0x02
		break;
		}

		if (STD_LOW == Level)
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	88 23       	and	r24, r24
    115a:	09 f5       	brne	.+66     	; 0x119e <Dio_WriteChannel+0x100>
		{
			CLR_BIT(*port_ptr,Dio_configuredChannels[ChannelId].channel_number);
    115c:	ea 81       	ldd	r30, Y+2	; 0x02
    115e:	fb 81       	ldd	r31, Y+3	; 0x03
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	20 91 b4 01 	lds	r18, 0x01B4
    1168:	30 91 b5 01 	lds	r19, 0x01B5
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	f9 01       	movw	r30, r18
    1178:	e8 0f       	add	r30, r24
    117a:	f9 1f       	adc	r31, r25
    117c:	81 81       	ldd	r24, Z+1	; 0x01
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <Dio_WriteChannel+0xf0>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <Dio_WriteChannel+0xec>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	ea 81       	ldd	r30, Y+2	; 0x02
    1198:	fb 81       	ldd	r31, Y+3	; 0x03
    119a:	80 83       	st	Z, r24
    119c:	22 c0       	rjmp	.+68     	; 0x11e2 <Dio_WriteChannel+0x144>
		}
		else if (STD_HIGH == Level)
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	f9 f4       	brne	.+62     	; 0x11e2 <Dio_WriteChannel+0x144>
		{
			SET_BIT(*port_ptr,Dio_configuredChannels[ChannelId].channel_number);
    11a4:	ea 81       	ldd	r30, Y+2	; 0x02
    11a6:	fb 81       	ldd	r31, Y+3	; 0x03
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	20 91 b4 01 	lds	r18, 0x01B4
    11b0:	30 91 b5 01 	lds	r19, 0x01B5
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	f9 01       	movw	r30, r18
    11c0:	e8 0f       	add	r30, r24
    11c2:	f9 1f       	adc	r31, r25
    11c4:	81 81       	ldd	r24, Z+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <Dio_WriteChannel+0x138>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <Dio_WriteChannel+0x134>
    11da:	84 2b       	or	r24, r20
    11dc:	ea 81       	ldd	r30, Y+2	; 0x02
    11de:	fb 81       	ldd	r31, Y+3	; 0x03
    11e0:	80 83       	st	Z, r24
	else
	{

	}

}
    11e2:	27 96       	adiw	r28, 0x07	; 7
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <Dio_ReadChannel>:
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	28 97       	sbiw	r28, 0x08	; 8
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	8d 83       	std	Y+5, r24	; 0x05
	uint8 *pin_ptr = NULL_PTR;
    120a:	1c 82       	std	Y+4, r1	; 0x04
    120c:	1b 82       	std	Y+3, r1	; 0x03
	Dio_LevelType ChannelLevel;
	boolean error = FALSE;
    120e:	19 82       	std	Y+1, r1	; 0x01

	if (DIO_NOT_INITIALIZED == Dio_status)
    1210:	80 91 b3 01 	lds	r24, 0x01B3
    1214:	88 23       	and	r24, r24
    1216:	11 f4       	brne	.+4      	; 0x121c <Dio_ReadChannel+0x28>
	{
		/* report DIO not INITIALIZED  error */
		error = TRUE;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* no action required */
	}
	if (DIO_CONFIGURED_CHANNELS <= ChannelId)
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	88 23       	and	r24, r24
    1220:	11 f0       	breq	.+4      	; 0x1226 <Dio_ReadChannel+0x32>
	{
		/*report error parameters*/
		error = TRUE;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	if (FALSE == error) {
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	88 23       	and	r24, r24
    122a:	09 f0       	breq	.+2      	; 0x122e <Dio_ReadChannel+0x3a>
    122c:	5f c0       	rjmp	.+190    	; 0x12ec <Dio_ReadChannel+0xf8>
		/*get port address address*/
		switch (Dio_configuredChannels[ChannelId].port_number) {
    122e:	20 91 b4 01 	lds	r18, 0x01B4
    1232:	30 91 b5 01 	lds	r19, 0x01B5
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	f9 01       	movw	r30, r18
    1242:	e8 0f       	add	r30, r24
    1244:	f9 1f       	adc	r31, r25
    1246:	80 81       	ld	r24, Z
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	3f 83       	std	Y+7, r19	; 0x07
    124e:	2e 83       	std	Y+6, r18	; 0x06
    1250:	8e 81       	ldd	r24, Y+6	; 0x06
    1252:	9f 81       	ldd	r25, Y+7	; 0x07
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	d1 f0       	breq	.+52     	; 0x128e <Dio_ReadChannel+0x9a>
    125a:	2e 81       	ldd	r18, Y+6	; 0x06
    125c:	3f 81       	ldd	r19, Y+7	; 0x07
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	2c f4       	brge	.+10     	; 0x126e <Dio_ReadChannel+0x7a>
    1264:	8e 81       	ldd	r24, Y+6	; 0x06
    1266:	9f 81       	ldd	r25, Y+7	; 0x07
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	61 f0       	breq	.+24     	; 0x1284 <Dio_ReadChannel+0x90>
    126c:	1e c0       	rjmp	.+60     	; 0x12aa <Dio_ReadChannel+0xb6>
    126e:	2e 81       	ldd	r18, Y+6	; 0x06
    1270:	3f 81       	ldd	r19, Y+7	; 0x07
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	81 f0       	breq	.+32     	; 0x1298 <Dio_ReadChannel+0xa4>
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	9f 81       	ldd	r25, Y+7	; 0x07
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	91 05       	cpc	r25, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <Dio_ReadChannel+0xae>
    1282:	13 c0       	rjmp	.+38     	; 0x12aa <Dio_ReadChannel+0xb6>
		case 0:pin_ptr = &PORTA_REG;
    1284:	8b e3       	ldi	r24, 0x3B	; 59
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	8b 83       	std	Y+3, r24	; 0x03
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <Dio_ReadChannel+0xb6>
		break;
		case 1:pin_ptr = &PORTB_REG;
    128e:	88 e3       	ldi	r24, 0x38	; 56
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	9c 83       	std	Y+4, r25	; 0x04
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <Dio_ReadChannel+0xb6>
		break;
		case 2:pin_ptr = &PORTC_REG;
    1298:	85 e3       	ldi	r24, 0x35	; 53
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 83       	std	Y+4, r25	; 0x04
    129e:	8b 83       	std	Y+3, r24	; 0x03
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <Dio_ReadChannel+0xb6>
		break;
		case 3:pin_ptr = &PORTD_REG;
    12a2:	82 e3       	ldi	r24, 0x32	; 50
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
		break;
		}
		ChannelLevel = READ_BIT(*pin_ptr,Dio_configuredChannels[ChannelId].channel_number);
    12aa:	eb 81       	ldd	r30, Y+3	; 0x03
    12ac:	fc 81       	ldd	r31, Y+4	; 0x04
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	20 91 b4 01 	lds	r18, 0x01B4
    12b8:	30 91 b5 01 	lds	r19, 0x01B5
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	f9 01       	movw	r30, r18
    12c8:	e8 0f       	add	r30, r24
    12ca:	f9 1f       	adc	r31, r25
    12cc:	81 81       	ldd	r24, Z+1	; 0x01
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9a 01       	movw	r18, r20
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <Dio_ReadChannel+0xe6>
    12d6:	35 95       	asr	r19
    12d8:	27 95       	ror	r18
    12da:	8a 95       	dec	r24
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <Dio_ReadChannel+0xe2>
    12de:	c9 01       	movw	r24, r18
    12e0:	81 70       	andi	r24, 0x01	; 1
    12e2:	8a 83       	std	Y+2, r24	; 0x02
		return ChannelLevel;
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	88 87       	std	Y+8, r24	; 0x08
	}
	else
	{

	}
}
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	00 c0       	rjmp	.+0      	; 0x12ec <Dio_ReadChannel+0xf8>
    12ec:	28 96       	adiw	r28, 0x08	; 8
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <__vector_9>:
static  void (*Gpt0_g_Ovf_ptr)(void) = NULL_PTR ;
static  void (*Gpt0_g_Ocr_ptr)(void) = NULL_PTR ;
static  void (*Gpt2_g_Ovf_ptr)(void) = NULL_PTR ;
static  void (*Gpt2_g_Ocr_ptr)(void) = NULL_PTR ;
static  void (*Gpt1_g_Ocr_ptr)(void) = NULL_PTR ;
ISR(TIMER0_OVF_vect){
    12fe:	1f 92       	push	r1
    1300:	0f 92       	push	r0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	0f 92       	push	r0
    1306:	11 24       	eor	r1, r1
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62

if (NULL_PTR !=Gpt0_g_Ovf_ptr)
    1328:	80 91 b6 01 	lds	r24, 0x01B6
    132c:	90 91 b7 01 	lds	r25, 0x01B7
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	29 f0       	breq	.+10     	; 0x133e <__vector_9+0x40>
{
	(*Gpt0_g_Ovf_ptr)();
    1334:	e0 91 b6 01 	lds	r30, 0x01B6
    1338:	f0 91 b7 01 	lds	r31, 0x01B7
    133c:	09 95       	icall
}
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_19>:

ISR(TIMER0_COMP_vect){
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	4f 93       	push	r20
    1374:	5f 93       	push	r21
    1376:	6f 93       	push	r22
    1378:	7f 93       	push	r23
    137a:	8f 93       	push	r24
    137c:	9f 93       	push	r25
    137e:	af 93       	push	r26
    1380:	bf 93       	push	r27
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	if (NULL_PTR !=Gpt0_g_Ocr_ptr)
    138e:	80 91 b8 01 	lds	r24, 0x01B8
    1392:	90 91 b9 01 	lds	r25, 0x01B9
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	29 f0       	breq	.+10     	; 0x13a4 <__vector_19+0x40>
	{
		(*Gpt0_g_Ocr_ptr)();
    139a:	e0 91 b8 01 	lds	r30, 0x01B8
    139e:	f0 91 b9 01 	lds	r31, 0x01B9
    13a2:	09 95       	icall
	}
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	7f 91       	pop	r23
    13b6:	6f 91       	pop	r22
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <__vector_4>:

ISR(TIMER2_OVF_vect){
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62

if (NULL_PTR !=Gpt2_g_Ovf_ptr)
    13f4:	80 91 ba 01 	lds	r24, 0x01BA
    13f8:	90 91 bb 01 	lds	r25, 0x01BB
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	29 f0       	breq	.+10     	; 0x140a <__vector_4+0x40>
{
	(*Gpt2_g_Ovf_ptr)();
    1400:	e0 91 ba 01 	lds	r30, 0x01BA
    1404:	f0 91 bb 01 	lds	r31, 0x01BB
    1408:	09 95       	icall
}
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_3>:

ISR(TIMER2_COMP_vect){
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	if (NULL_PTR !=Gpt2_g_Ocr_ptr)
    145a:	80 91 bc 01 	lds	r24, 0x01BC
    145e:	90 91 bd 01 	lds	r25, 0x01BD
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	29 f0       	breq	.+10     	; 0x1470 <__vector_3+0x40>
	{
		(*Gpt2_g_Ocr_ptr)();
    1466:	e0 91 bc 01 	lds	r30, 0x01BC
    146a:	f0 91 bd 01 	lds	r31, 0x01BD
    146e:	09 95       	icall
	}
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <__vector_6>:
ISR(TIMER1_COMPA_vect){
    1496:	1f 92       	push	r1
    1498:	0f 92       	push	r0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	0f 92       	push	r0
    149e:	11 24       	eor	r1, r1
    14a0:	2f 93       	push	r18
    14a2:	3f 93       	push	r19
    14a4:	4f 93       	push	r20
    14a6:	5f 93       	push	r21
    14a8:	6f 93       	push	r22
    14aa:	7f 93       	push	r23
    14ac:	8f 93       	push	r24
    14ae:	9f 93       	push	r25
    14b0:	af 93       	push	r26
    14b2:	bf 93       	push	r27
    14b4:	ef 93       	push	r30
    14b6:	ff 93       	push	r31
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	if (NULL_PTR !=Gpt1_g_Ocr_ptr)
    14c0:	80 91 be 01 	lds	r24, 0x01BE
    14c4:	90 91 bf 01 	lds	r25, 0x01BF
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	29 f0       	breq	.+10     	; 0x14d6 <__vector_6+0x40>
	{
		(*Gpt1_g_Ocr_ptr)();
    14cc:	e0 91 be 01 	lds	r30, 0x01BE
    14d0:	f0 91 bf 01 	lds	r31, 0x01BF
    14d4:	09 95       	icall
	}
}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	bf 91       	pop	r27
    14e0:	af 91       	pop	r26
    14e2:	9f 91       	pop	r25
    14e4:	8f 91       	pop	r24
    14e6:	7f 91       	pop	r23
    14e8:	6f 91       	pop	r22
    14ea:	5f 91       	pop	r21
    14ec:	4f 91       	pop	r20
    14ee:	3f 91       	pop	r19
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <Gpt0_init>:

void Gpt0_init(Gpt_ConfigChannel *Config_ptr){
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	29 97       	sbiw	r28, 0x09	; 9
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	9b 83       	std	Y+3, r25	; 0x03
    1512:	8a 83       	std	Y+2, r24	; 0x02
	boolean error = FALSE;
    1514:	19 82       	std	Y+1, r1	; 0x01
	if (NULL_PTR == Config_ptr)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	9b 81       	ldd	r25, Y+3	; 0x03
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	11 f4       	brne	.+4      	; 0x1522 <Gpt0_init+0x26>
	{
		error =TRUE ;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	if (FALSE ==error )
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	88 23       	and	r24, r24
    1526:	09 f0       	breq	.+2      	; 0x152a <Gpt0_init+0x2e>
    1528:	33 c1       	rjmp	.+614    	; 0x1790 <Gpt0_init+0x294>
	{
		switch(Config_ptr->mode)
    152a:	ea 81       	ldd	r30, Y+2	; 0x02
    152c:	fb 81       	ldd	r31, Y+3	; 0x03
    152e:	80 81       	ld	r24, Z
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	39 87       	std	Y+9, r19	; 0x09
    1536:	28 87       	std	Y+8, r18	; 0x08
    1538:	88 85       	ldd	r24, Y+8	; 0x08
    153a:	99 85       	ldd	r25, Y+9	; 0x09
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	31 f0       	breq	.+12     	; 0x154c <Gpt0_init+0x50>
    1540:	28 85       	ldd	r18, Y+8	; 0x08
    1542:	39 85       	ldd	r19, Y+9	; 0x09
    1544:	21 30       	cpi	r18, 0x01	; 1
    1546:	31 05       	cpc	r19, r1
    1548:	81 f0       	breq	.+32     	; 0x156a <Gpt0_init+0x6e>
    154a:	1d c0       	rjmp	.+58     	; 0x1586 <Gpt0_init+0x8a>
		{
		case timer_mode_Normal :CLR_BIT(TCCR0,WGM00);
    154c:	a3 e5       	ldi	r26, 0x53	; 83
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e3 e5       	ldi	r30, 0x53	; 83
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 7b       	andi	r24, 0xBF	; 191
    1558:	8c 93       	st	X, r24
								CLR_BIT(TCCR0,WGM01);
    155a:	a3 e5       	ldi	r26, 0x53	; 83
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e3 e5       	ldi	r30, 0x53	; 83
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	87 7f       	andi	r24, 0xF7	; 247
    1566:	8c 93       	st	X, r24
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <Gpt0_init+0x8a>
		break;

		case timer_mode_CTC :CLR_BIT(TCCR0,WGM00);
    156a:	a3 e5       	ldi	r26, 0x53	; 83
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e3 e5       	ldi	r30, 0x53	; 83
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	8f 7b       	andi	r24, 0xBF	; 191
    1576:	8c 93       	st	X, r24
							 SET_BIT(TCCR0,WGM01);
    1578:	a3 e5       	ldi	r26, 0x53	; 83
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e3 e5       	ldi	r30, 0x53	; 83
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	88 60       	ori	r24, 0x08	; 8
    1584:	8c 93       	st	X, r24
		break;
		}

		if (timer_mode_CTC ==Config_ptr->mode )
    1586:	ea 81       	ldd	r30, Y+2	; 0x02
    1588:	fb 81       	ldd	r31, Y+3	; 0x03
    158a:	80 81       	ld	r24, Z
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	09 f0       	breq	.+2      	; 0x1592 <Gpt0_init+0x96>
    1590:	5c c0       	rjmp	.+184    	; 0x164a <Gpt0_init+0x14e>
		{
			switch(Config_ptr->OCR_mode)
    1592:	ea 81       	ldd	r30, Y+2	; 0x02
    1594:	fb 81       	ldd	r31, Y+3	; 0x03
    1596:	81 81       	ldd	r24, Z+1	; 0x01
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	3f 83       	std	Y+7, r19	; 0x07
    159e:	2e 83       	std	Y+6, r18	; 0x06
    15a0:	8e 81       	ldd	r24, Y+6	; 0x06
    15a2:	9f 81       	ldd	r25, Y+7	; 0x07
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	91 05       	cpc	r25, r1
    15a8:	21 f1       	breq	.+72     	; 0x15f2 <Gpt0_init+0xf6>
    15aa:	2e 81       	ldd	r18, Y+6	; 0x06
    15ac:	3f 81       	ldd	r19, Y+7	; 0x07
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	2c f4       	brge	.+10     	; 0x15be <Gpt0_init+0xc2>
    15b4:	8e 81       	ldd	r24, Y+6	; 0x06
    15b6:	9f 81       	ldd	r25, Y+7	; 0x07
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <Gpt0_init+0xd8>
    15bc:	46 c0       	rjmp	.+140    	; 0x164a <Gpt0_init+0x14e>
    15be:	2e 81       	ldd	r18, Y+6	; 0x06
    15c0:	3f 81       	ldd	r19, Y+7	; 0x07
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	21 f1       	breq	.+72     	; 0x1610 <Gpt0_init+0x114>
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	91 05       	cpc	r25, r1
    15d0:	71 f1       	breq	.+92     	; 0x162e <Gpt0_init+0x132>
    15d2:	3b c0       	rjmp	.+118    	; 0x164a <Gpt0_init+0x14e>
			{
			case OC0_disconnected: CLR_BIT(TCCR0,COM00);
    15d4:	a3 e5       	ldi	r26, 0x53	; 83
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e3 e5       	ldi	r30, 0x53	; 83
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	8f 7e       	andi	r24, 0xEF	; 239
    15e0:	8c 93       	st	X, r24
								   CLR_BIT(TCCR0,COM01);
    15e2:	a3 e5       	ldi	r26, 0x53	; 83
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e3 e5       	ldi	r30, 0x53	; 83
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 7d       	andi	r24, 0xDF	; 223
    15ee:	8c 93       	st	X, r24
    15f0:	2c c0       	rjmp	.+88     	; 0x164a <Gpt0_init+0x14e>
			break;
			case toggle_OC0_on_Compare_match: SET_BIT(TCCR0,COM00);
    15f2:	a3 e5       	ldi	r26, 0x53	; 83
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e3 e5       	ldi	r30, 0x53	; 83
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 61       	ori	r24, 0x10	; 16
    15fe:	8c 93       	st	X, r24
											 CLR_BIT(TCCR0,COM01);
    1600:	a3 e5       	ldi	r26, 0x53	; 83
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e3 e5       	ldi	r30, 0x53	; 83
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8f 7d       	andi	r24, 0xDF	; 223
    160c:	8c 93       	st	X, r24
    160e:	1d c0       	rjmp	.+58     	; 0x164a <Gpt0_init+0x14e>
			break;
			case clear_OC0_on_Compare_match: CLR_BIT(TCCR0,COM00);
    1610:	a3 e5       	ldi	r26, 0x53	; 83
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e3 e5       	ldi	r30, 0x53	; 83
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 7e       	andi	r24, 0xEF	; 239
    161c:	8c 93       	st	X, r24
											 SET_BIT(TCCR0,COM01);
    161e:	a3 e5       	ldi	r26, 0x53	; 83
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e3 e5       	ldi	r30, 0x53	; 83
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	80 62       	ori	r24, 0x20	; 32
    162a:	8c 93       	st	X, r24
    162c:	0e c0       	rjmp	.+28     	; 0x164a <Gpt0_init+0x14e>
			break;
			case set_OC0_on_Compare_Match:  SET_BIT(TCCR0,COM00);
    162e:	a3 e5       	ldi	r26, 0x53	; 83
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e3 e5       	ldi	r30, 0x53	; 83
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	80 61       	ori	r24, 0x10	; 16
    163a:	8c 93       	st	X, r24
											SET_BIT(TCCR0,COM01);
    163c:	a3 e5       	ldi	r26, 0x53	; 83
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e3 e5       	ldi	r30, 0x53	; 83
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 62       	ori	r24, 0x20	; 32
    1648:	8c 93       	st	X, r24
		else
		{

		}

		switch(Config_ptr->prescale)
    164a:	ea 81       	ldd	r30, Y+2	; 0x02
    164c:	fb 81       	ldd	r31, Y+3	; 0x03
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3d 83       	std	Y+5, r19	; 0x05
    1656:	2c 83       	std	Y+4, r18	; 0x04
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	91 05       	cpc	r25, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <Gpt0_init+0x168>
    1662:	48 c0       	rjmp	.+144    	; 0x16f4 <Gpt0_init+0x1f8>
    1664:	2c 81       	ldd	r18, Y+4	; 0x04
    1666:	3d 81       	ldd	r19, Y+5	; 0x05
    1668:	23 30       	cpi	r18, 0x03	; 3
    166a:	31 05       	cpc	r19, r1
    166c:	54 f4       	brge	.+20     	; 0x1682 <Gpt0_init+0x186>
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	99 f0       	breq	.+38     	; 0x169c <Gpt0_init+0x1a0>
    1676:	2c 81       	ldd	r18, Y+4	; 0x04
    1678:	3d 81       	ldd	r19, Y+5	; 0x05
    167a:	21 30       	cpi	r18, 0x01	; 1
    167c:	31 05       	cpc	r19, r1
    167e:	21 f1       	breq	.+72     	; 0x16c8 <Gpt0_init+0x1cc>
    1680:	7a c0       	rjmp	.+244    	; 0x1776 <Gpt0_init+0x27a>
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <Gpt0_init+0x192>
    168c:	49 c0       	rjmp	.+146    	; 0x1720 <Gpt0_init+0x224>
    168e:	2c 81       	ldd	r18, Y+4	; 0x04
    1690:	3d 81       	ldd	r19, Y+5	; 0x05
    1692:	24 30       	cpi	r18, 0x04	; 4
    1694:	31 05       	cpc	r19, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <Gpt0_init+0x19e>
    1698:	59 c0       	rjmp	.+178    	; 0x174c <Gpt0_init+0x250>
    169a:	6d c0       	rjmp	.+218    	; 0x1776 <Gpt0_init+0x27a>
		{
		case no_prescale: SET_BIT(TCCR0,CS00);
    169c:	a3 e5       	ldi	r26, 0x53	; 83
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e3 e5       	ldi	r30, 0x53	; 83
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	8c 93       	st	X, r24
						  CLR_BIT(TCCR0,CS01);
    16aa:	a3 e5       	ldi	r26, 0x53	; 83
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e3 e5       	ldi	r30, 0x53	; 83
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8d 7f       	andi	r24, 0xFD	; 253
    16b6:	8c 93       	st	X, r24
						  CLR_BIT(TCCR0,CS02);
    16b8:	a3 e5       	ldi	r26, 0x53	; 83
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e3 e5       	ldi	r30, 0x53	; 83
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8b 7f       	andi	r24, 0xFB	; 251
    16c4:	8c 93       	st	X, r24
    16c6:	57 c0       	rjmp	.+174    	; 0x1776 <Gpt0_init+0x27a>
		break;
		case Gpt_Prescale_8:  CLR_BIT(TCCR0,CS00);
    16c8:	a3 e5       	ldi	r26, 0x53	; 83
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e3 e5       	ldi	r30, 0x53	; 83
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8e 7f       	andi	r24, 0xFE	; 254
    16d4:	8c 93       	st	X, r24
						  	  SET_BIT(TCCR0,CS01);
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	82 60       	ori	r24, 0x02	; 2
    16e2:	8c 93       	st	X, r24
						  	  CLR_BIT(TCCR0,CS02);
    16e4:	a3 e5       	ldi	r26, 0x53	; 83
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e3 e5       	ldi	r30, 0x53	; 83
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8b 7f       	andi	r24, 0xFB	; 251
    16f0:	8c 93       	st	X, r24
    16f2:	41 c0       	rjmp	.+130    	; 0x1776 <Gpt0_init+0x27a>
		break;

		case Gpt_Prescale_64: SET_BIT(TCCR0,CS00);
    16f4:	a3 e5       	ldi	r26, 0x53	; 83
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e3 e5       	ldi	r30, 0x53	; 83
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	81 60       	ori	r24, 0x01	; 1
    1700:	8c 93       	st	X, r24
						      SET_BIT(TCCR0,CS01);
    1702:	a3 e5       	ldi	r26, 0x53	; 83
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e3 e5       	ldi	r30, 0x53	; 83
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	82 60       	ori	r24, 0x02	; 2
    170e:	8c 93       	st	X, r24
						      CLR_BIT(TCCR0,CS02);
    1710:	a3 e5       	ldi	r26, 0x53	; 83
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e3 e5       	ldi	r30, 0x53	; 83
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	8b 7f       	andi	r24, 0xFB	; 251
    171c:	8c 93       	st	X, r24
    171e:	2b c0       	rjmp	.+86     	; 0x1776 <Gpt0_init+0x27a>
		break;

		case Gpt_Prescale_256: CLR_BIT(TCCR0,CS00);
    1720:	a3 e5       	ldi	r26, 0x53	; 83
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e3 e5       	ldi	r30, 0x53	; 83
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8e 7f       	andi	r24, 0xFE	; 254
    172c:	8c 93       	st	X, r24
						       CLR_BIT(TCCR0,CS01);
    172e:	a3 e5       	ldi	r26, 0x53	; 83
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e3 e5       	ldi	r30, 0x53	; 83
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8d 7f       	andi	r24, 0xFD	; 253
    173a:	8c 93       	st	X, r24
						       SET_BIT(TCCR0,CS02);
    173c:	a3 e5       	ldi	r26, 0x53	; 83
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e3 e5       	ldi	r30, 0x53	; 83
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	84 60       	ori	r24, 0x04	; 4
    1748:	8c 93       	st	X, r24
    174a:	15 c0       	rjmp	.+42     	; 0x1776 <Gpt0_init+0x27a>
		break;
		case Gpt_Prescale_1024: SET_BIT(TCCR0,CS00);
    174c:	a3 e5       	ldi	r26, 0x53	; 83
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e3 e5       	ldi	r30, 0x53	; 83
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	8c 93       	st	X, r24
							    CLR_BIT(TCCR0,CS01);
    175a:	a3 e5       	ldi	r26, 0x53	; 83
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e3 e5       	ldi	r30, 0x53	; 83
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8d 7f       	andi	r24, 0xFD	; 253
    1766:	8c 93       	st	X, r24
							    SET_BIT(TCCR0,CS02);
    1768:	a3 e5       	ldi	r26, 0x53	; 83
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e3 e5       	ldi	r30, 0x53	; 83
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	84 60       	ori	r24, 0x04	; 4
    1774:	8c 93       	st	X, r24
		break;
		}


		SET_BIT(TCCR0,FOC0);// a non PWM mode
    1776:	a3 e5       	ldi	r26, 0x53	; 83
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e3 e5       	ldi	r30, 0x53	; 83
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 68       	ori	r24, 0x80	; 128
    1782:	8c 93       	st	X, r24
		TCNT0  = 0x00 ;
    1784:	e2 e5       	ldi	r30, 0x52	; 82
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	10 82       	st	Z, r1
		OCR0=0;
    178a:	ec e5       	ldi	r30, 0x5C	; 92
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	10 82       	st	Z, r1
	else
	{

	}

}
    1790:	29 96       	adiw	r28, 0x09	; 9
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <Gpt2_init>:

void Gpt2_init(Gpt_ConfigChannel *Config_ptr){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	29 97       	sbiw	r28, 0x09	; 9
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	9b 83       	std	Y+3, r25	; 0x03
    17b8:	8a 83       	std	Y+2, r24	; 0x02
	boolean error = FALSE;
    17ba:	19 82       	std	Y+1, r1	; 0x01
	if (NULL_PTR == Config_ptr)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <Gpt2_init+0x26>
	{
		error =TRUE ;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	if (FALSE ==error )
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	88 23       	and	r24, r24
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <Gpt2_init+0x2e>
    17ce:	30 c1       	rjmp	.+608    	; 0x1a30 <Gpt2_init+0x28e>
	{
		switch(Config_ptr->mode)
    17d0:	ea 81       	ldd	r30, Y+2	; 0x02
    17d2:	fb 81       	ldd	r31, Y+3	; 0x03
    17d4:	80 81       	ld	r24, Z
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	39 87       	std	Y+9, r19	; 0x09
    17dc:	28 87       	std	Y+8, r18	; 0x08
    17de:	88 85       	ldd	r24, Y+8	; 0x08
    17e0:	99 85       	ldd	r25, Y+9	; 0x09
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <Gpt2_init+0x50>
    17e6:	28 85       	ldd	r18, Y+8	; 0x08
    17e8:	39 85       	ldd	r19, Y+9	; 0x09
    17ea:	21 30       	cpi	r18, 0x01	; 1
    17ec:	31 05       	cpc	r19, r1
    17ee:	81 f0       	breq	.+32     	; 0x1810 <Gpt2_init+0x6e>
    17f0:	1d c0       	rjmp	.+58     	; 0x182c <Gpt2_init+0x8a>
		{
		case timer_mode_Normal :CLR_BIT(TCCR2,WGM20);
    17f2:	a5 e4       	ldi	r26, 0x45	; 69
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e4       	ldi	r30, 0x45	; 69
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 7b       	andi	r24, 0xBF	; 191
    17fe:	8c 93       	st	X, r24
								CLR_BIT(TCCR2,WGM21);
    1800:	a5 e4       	ldi	r26, 0x45	; 69
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e4       	ldi	r30, 0x45	; 69
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	87 7f       	andi	r24, 0xF7	; 247
    180c:	8c 93       	st	X, r24
    180e:	0e c0       	rjmp	.+28     	; 0x182c <Gpt2_init+0x8a>
		break;

		case timer_mode_CTC :CLR_BIT(TCCR2,WGM20);
    1810:	a5 e4       	ldi	r26, 0x45	; 69
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e5 e4       	ldi	r30, 0x45	; 69
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8f 7b       	andi	r24, 0xBF	; 191
    181c:	8c 93       	st	X, r24
							 SET_BIT(TCCR2,WGM21);
    181e:	a5 e4       	ldi	r26, 0x45	; 69
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e5 e4       	ldi	r30, 0x45	; 69
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	88 60       	ori	r24, 0x08	; 8
    182a:	8c 93       	st	X, r24
		break;
		}

		if (timer_mode_CTC ==Config_ptr->mode )
    182c:	ea 81       	ldd	r30, Y+2	; 0x02
    182e:	fb 81       	ldd	r31, Y+3	; 0x03
    1830:	80 81       	ld	r24, Z
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	09 f0       	breq	.+2      	; 0x1838 <Gpt2_init+0x96>
    1836:	5c c0       	rjmp	.+184    	; 0x18f0 <Gpt2_init+0x14e>
		{
			switch(Config_ptr->OCR_mode)
    1838:	ea 81       	ldd	r30, Y+2	; 0x02
    183a:	fb 81       	ldd	r31, Y+3	; 0x03
    183c:	81 81       	ldd	r24, Z+1	; 0x01
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3f 83       	std	Y+7, r19	; 0x07
    1844:	2e 83       	std	Y+6, r18	; 0x06
    1846:	8e 81       	ldd	r24, Y+6	; 0x06
    1848:	9f 81       	ldd	r25, Y+7	; 0x07
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	21 f1       	breq	.+72     	; 0x1898 <Gpt2_init+0xf6>
    1850:	2e 81       	ldd	r18, Y+6	; 0x06
    1852:	3f 81       	ldd	r19, Y+7	; 0x07
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <Gpt2_init+0xc2>
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 f0       	breq	.+24     	; 0x187a <Gpt2_init+0xd8>
    1862:	46 c0       	rjmp	.+140    	; 0x18f0 <Gpt2_init+0x14e>
    1864:	2e 81       	ldd	r18, Y+6	; 0x06
    1866:	3f 81       	ldd	r19, Y+7	; 0x07
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	21 f1       	breq	.+72     	; 0x18b6 <Gpt2_init+0x114>
    186e:	8e 81       	ldd	r24, Y+6	; 0x06
    1870:	9f 81       	ldd	r25, Y+7	; 0x07
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	71 f1       	breq	.+92     	; 0x18d4 <Gpt2_init+0x132>
    1878:	3b c0       	rjmp	.+118    	; 0x18f0 <Gpt2_init+0x14e>
			{
			case OC0_disconnected: CLR_BIT(TCCR2,COM20);
    187a:	a5 e4       	ldi	r26, 0x45	; 69
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e4       	ldi	r30, 0x45	; 69
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8f 7e       	andi	r24, 0xEF	; 239
    1886:	8c 93       	st	X, r24
								   CLR_BIT(TCCR2,COM21);
    1888:	a5 e4       	ldi	r26, 0x45	; 69
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e5 e4       	ldi	r30, 0x45	; 69
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8f 7d       	andi	r24, 0xDF	; 223
    1894:	8c 93       	st	X, r24
    1896:	2c c0       	rjmp	.+88     	; 0x18f0 <Gpt2_init+0x14e>
			break;
			case toggle_OC0_on_Compare_match: SET_BIT(TCCR2,COM20);
    1898:	a5 e4       	ldi	r26, 0x45	; 69
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e4       	ldi	r30, 0x45	; 69
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	80 61       	ori	r24, 0x10	; 16
    18a4:	8c 93       	st	X, r24
											 CLR_BIT(TCCR2,COM21);
    18a6:	a5 e4       	ldi	r26, 0x45	; 69
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e4       	ldi	r30, 0x45	; 69
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8f 7d       	andi	r24, 0xDF	; 223
    18b2:	8c 93       	st	X, r24
    18b4:	1d c0       	rjmp	.+58     	; 0x18f0 <Gpt2_init+0x14e>
			break;
			case clear_OC0_on_Compare_match: CLR_BIT(TCCR2,COM20);
    18b6:	a5 e4       	ldi	r26, 0x45	; 69
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e4       	ldi	r30, 0x45	; 69
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8f 7e       	andi	r24, 0xEF	; 239
    18c2:	8c 93       	st	X, r24
											 SET_BIT(TCCR2,COM21);
    18c4:	a5 e4       	ldi	r26, 0x45	; 69
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e4       	ldi	r30, 0x45	; 69
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	80 62       	ori	r24, 0x20	; 32
    18d0:	8c 93       	st	X, r24
    18d2:	0e c0       	rjmp	.+28     	; 0x18f0 <Gpt2_init+0x14e>
			break;
			case set_OC0_on_Compare_Match:  SET_BIT(TCCR2,COM20);
    18d4:	a5 e4       	ldi	r26, 0x45	; 69
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e5 e4       	ldi	r30, 0x45	; 69
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 61       	ori	r24, 0x10	; 16
    18e0:	8c 93       	st	X, r24
											SET_BIT(TCCR2,COM21);
    18e2:	a5 e4       	ldi	r26, 0x45	; 69
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e5 e4       	ldi	r30, 0x45	; 69
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	8c 93       	st	X, r24
		else
		{

		}

		switch(Config_ptr->prescale)
    18f0:	ea 81       	ldd	r30, Y+2	; 0x02
    18f2:	fb 81       	ldd	r31, Y+3	; 0x03
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	3d 83       	std	Y+5, r19	; 0x05
    18fc:	2c 83       	std	Y+4, r18	; 0x04
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <Gpt2_init+0x168>
    1908:	48 c0       	rjmp	.+144    	; 0x199a <Gpt2_init+0x1f8>
    190a:	2c 81       	ldd	r18, Y+4	; 0x04
    190c:	3d 81       	ldd	r19, Y+5	; 0x05
    190e:	23 30       	cpi	r18, 0x03	; 3
    1910:	31 05       	cpc	r19, r1
    1912:	54 f4       	brge	.+20     	; 0x1928 <Gpt2_init+0x186>
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	99 f0       	breq	.+38     	; 0x1942 <Gpt2_init+0x1a0>
    191c:	2c 81       	ldd	r18, Y+4	; 0x04
    191e:	3d 81       	ldd	r19, Y+5	; 0x05
    1920:	21 30       	cpi	r18, 0x01	; 1
    1922:	31 05       	cpc	r19, r1
    1924:	21 f1       	breq	.+72     	; 0x196e <Gpt2_init+0x1cc>
    1926:	7a c0       	rjmp	.+244    	; 0x1a1c <Gpt2_init+0x27a>
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	91 05       	cpc	r25, r1
    1930:	09 f4       	brne	.+2      	; 0x1934 <Gpt2_init+0x192>
    1932:	49 c0       	rjmp	.+146    	; 0x19c6 <Gpt2_init+0x224>
    1934:	2c 81       	ldd	r18, Y+4	; 0x04
    1936:	3d 81       	ldd	r19, Y+5	; 0x05
    1938:	24 30       	cpi	r18, 0x04	; 4
    193a:	31 05       	cpc	r19, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <Gpt2_init+0x19e>
    193e:	59 c0       	rjmp	.+178    	; 0x19f2 <Gpt2_init+0x250>
    1940:	6d c0       	rjmp	.+218    	; 0x1a1c <Gpt2_init+0x27a>
		{
		case no_prescale: SET_BIT(TCCR2,CS20);
    1942:	a5 e4       	ldi	r26, 0x45	; 69
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e4       	ldi	r30, 0x45	; 69
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	81 60       	ori	r24, 0x01	; 1
    194e:	8c 93       	st	X, r24
						  CLR_BIT(TCCR2,CS21);
    1950:	a5 e4       	ldi	r26, 0x45	; 69
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e5 e4       	ldi	r30, 0x45	; 69
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8d 7f       	andi	r24, 0xFD	; 253
    195c:	8c 93       	st	X, r24
						  CLR_BIT(TCCR2,CS22);
    195e:	a5 e4       	ldi	r26, 0x45	; 69
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 e4       	ldi	r30, 0x45	; 69
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8b 7f       	andi	r24, 0xFB	; 251
    196a:	8c 93       	st	X, r24
    196c:	57 c0       	rjmp	.+174    	; 0x1a1c <Gpt2_init+0x27a>
		break;
		case Gpt_Prescale_8:  CLR_BIT(TCCR2,CS20);
    196e:	a5 e4       	ldi	r26, 0x45	; 69
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e5 e4       	ldi	r30, 0x45	; 69
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8e 7f       	andi	r24, 0xFE	; 254
    197a:	8c 93       	st	X, r24
						  	  SET_BIT(TCCR2,CS21);
    197c:	a5 e4       	ldi	r26, 0x45	; 69
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e4       	ldi	r30, 0x45	; 69
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	82 60       	ori	r24, 0x02	; 2
    1988:	8c 93       	st	X, r24
						  	  CLR_BIT(TCCR2,CS22);
    198a:	a5 e4       	ldi	r26, 0x45	; 69
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e5 e4       	ldi	r30, 0x45	; 69
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8b 7f       	andi	r24, 0xFB	; 251
    1996:	8c 93       	st	X, r24
    1998:	41 c0       	rjmp	.+130    	; 0x1a1c <Gpt2_init+0x27a>
		break;

		case Gpt_Prescale_64: CLR_BIT(TCCR2,CS20);
    199a:	a5 e4       	ldi	r26, 0x45	; 69
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e4       	ldi	r30, 0x45	; 69
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8e 7f       	andi	r24, 0xFE	; 254
    19a6:	8c 93       	st	X, r24
						      CLR_BIT(TCCR2,CS21);
    19a8:	a5 e4       	ldi	r26, 0x45	; 69
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e5 e4       	ldi	r30, 0x45	; 69
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8d 7f       	andi	r24, 0xFD	; 253
    19b4:	8c 93       	st	X, r24
						      SET_BIT(TCCR2,CS22);
    19b6:	a5 e4       	ldi	r26, 0x45	; 69
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e5 e4       	ldi	r30, 0x45	; 69
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	84 60       	ori	r24, 0x04	; 4
    19c2:	8c 93       	st	X, r24
    19c4:	2b c0       	rjmp	.+86     	; 0x1a1c <Gpt2_init+0x27a>
		break;

		case Gpt_Prescale_256: CLR_BIT(TCCR2,CS20);
    19c6:	a5 e4       	ldi	r26, 0x45	; 69
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e4       	ldi	r30, 0x45	; 69
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
						       SET_BIT(TCCR2,CS21);
    19d4:	a5 e4       	ldi	r26, 0x45	; 69
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e4       	ldi	r30, 0x45	; 69
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	82 60       	ori	r24, 0x02	; 2
    19e0:	8c 93       	st	X, r24
						       SET_BIT(TCCR2,CS22);
    19e2:	a5 e4       	ldi	r26, 0x45	; 69
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e5 e4       	ldi	r30, 0x45	; 69
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	84 60       	ori	r24, 0x04	; 4
    19ee:	8c 93       	st	X, r24
    19f0:	15 c0       	rjmp	.+42     	; 0x1a1c <Gpt2_init+0x27a>
		break;
		case Gpt_Prescale_1024: SET_BIT(TCCR2,CS20);
    19f2:	a5 e4       	ldi	r26, 0x45	; 69
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e4       	ldi	r30, 0x45	; 69
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	8c 93       	st	X, r24
							    SET_BIT(TCCR2,CS21);
    1a00:	a5 e4       	ldi	r26, 0x45	; 69
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e5 e4       	ldi	r30, 0x45	; 69
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	82 60       	ori	r24, 0x02	; 2
    1a0c:	8c 93       	st	X, r24
							    SET_BIT(TCCR2,CS22);
    1a0e:	a5 e4       	ldi	r26, 0x45	; 69
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e4       	ldi	r30, 0x45	; 69
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	84 60       	ori	r24, 0x04	; 4
    1a1a:	8c 93       	st	X, r24
		break;
		}


		SET_BIT(TCCR2,FOC2);// a non PWM mode
    1a1c:	a5 e4       	ldi	r26, 0x45	; 69
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e5 e4       	ldi	r30, 0x45	; 69
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	8c 93       	st	X, r24
		TCNT2  = 0x00 ;
    1a2a:	e4 e4       	ldi	r30, 0x44	; 68
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	10 82       	st	Z, r1
	else
	{

	}

}
    1a30:	29 96       	adiw	r28, 0x09	; 9
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <Gpt2_deinit>:
void Gpt2_deinit(){
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0 ;
    1a4a:	e4 e4       	ldi	r30, 0x44	; 68
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	10 82       	st	Z, r1
	OCR2 = 0 ;
    1a50:	e3 e4       	ldi	r30, 0x43	; 67
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	10 82       	st	Z, r1
	TCCR2 = 0 ;
    1a56:	e5 e4       	ldi	r30, 0x45	; 69
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	10 82       	st	Z, r1
}
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <Timer1_InitoneSecond>:
void Timer1_InitoneSecond() {
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0x00 ;
    1a6a:	ef e4       	ldi	r30, 0x4F	; 79
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	10 82       	st	Z, r1
	TCCR1B = 0x00 ;
    1a70:	ee e4       	ldi	r30, 0x4E	; 78
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	10 82       	st	Z, r1
	/*1024 PREscale */
	CLR_BIT(TCCR1B, CS10);
    1a76:	ae e4       	ldi	r26, 0x4E	; 78
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ee e4       	ldi	r30, 0x4E	; 78
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8e 7f       	andi	r24, 0xFE	; 254
    1a82:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1a84:	ae e4       	ldi	r26, 0x4E	; 78
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ee e4       	ldi	r30, 0x4E	; 78
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	82 60       	ori	r24, 0x02	; 2
    1a90:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS12);
    1a92:	ae e4       	ldi	r26, 0x4E	; 78
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ee e4       	ldi	r30, 0x4E	; 78
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	84 60       	ori	r24, 0x04	; 4
    1a9e:	8c 93       	st	X, r24

	/*OCR1A TOP : ctc mode */
	CLR_BIT(TCCR1A, WGM10);
    1aa0:	af e4       	ldi	r26, 0x4F	; 79
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	ef e4       	ldi	r30, 0x4F	; 79
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8e 7f       	andi	r24, 0xFE	; 254
    1aac:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    1aae:	af e4       	ldi	r26, 0x4F	; 79
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	ef e4       	ldi	r30, 0x4F	; 79
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8d 7f       	andi	r24, 0xFD	; 253
    1aba:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1abc:	ae e4       	ldi	r26, 0x4E	; 78
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	ee e4       	ldi	r30, 0x4E	; 78
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 60       	ori	r24, 0x08	; 8
    1ac8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    1aca:	ae e4       	ldi	r26, 0x4E	; 78
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	ee e4       	ldi	r30, 0x4E	; 78
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 7e       	andi	r24, 0xEF	; 239
    1ad6:	8c 93       	st	X, r24

	/*a non pwm*/
	SET_BIT(TCCR1A, FOC1A);
    1ad8:	af e4       	ldi	r26, 0x4F	; 79
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	ef e4       	ldi	r30, 0x4F	; 79
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 60       	ori	r24, 0x08	; 8
    1ae4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    1ae6:	af e4       	ldi	r26, 0x4F	; 79
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	ef e4       	ldi	r30, 0x4F	; 79
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	84 60       	ori	r24, 0x04	; 4
    1af2:	8c 93       	st	X, r24

	/*Module interrupt enable */
	SET_BIT(TIMSK, OCIE1A);
    1af4:	a9 e5       	ldi	r26, 0x59	; 89
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e9 e5       	ldi	r30, 0x59	; 89
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	80 61       	ori	r24, 0x10	; 16
    1b00:	8c 93       	st	X, r24

	/* Initial Value */
	TCNT1 = 0 ;
    1b02:	ec e4       	ldi	r30, 0x4C	; 76
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	11 82       	std	Z+1, r1	; 0x01
    1b08:	10 82       	st	Z, r1
	 * res = 1 / F_timer = 0.001024s
	 * one second = 0.001024 * Top
	 * top = 1/0.001024 = 976.5
	 *
	 * */
	OCR1A = 1000;
    1b0a:	ea e4       	ldi	r30, 0x4A	; 74
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	88 ee       	ldi	r24, 0xE8	; 232
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <Gpt0_SetOcrValue>:


void Gpt0_SetOcrValue(uint8 ocr_value){
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	0f 92       	push	r0
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = ocr_value ;
    1b28:	ec e5       	ldi	r30, 0x5C	; 92
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	80 83       	st	Z, r24
}
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <Gpt2_SetOcrValue>:
void Gpt2_SetOcrValue(uint8 ocr_value){
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	0f 92       	push	r0
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = ocr_value ;
    1b44:	e3 e4       	ldi	r30, 0x43	; 67
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	80 83       	st	Z, r24
}
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <Gpt0_OvfInterruptEnable>:
void Gpt0_OvfInterruptEnable(){
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
SET_BIT(TIMSK,TOIE0) ;
    1b5c:	a9 e5       	ldi	r26, 0x59	; 89
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e9 e5       	ldi	r30, 0x59	; 89
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	81 60       	ori	r24, 0x01	; 1
    1b68:	8c 93       	st	X, r24
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <Gpt2_OvfInterruptEnable>:
void Gpt2_OvfInterruptEnable(){
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
SET_BIT(TIMSK,TOIE2) ;
    1b78:	a9 e5       	ldi	r26, 0x59	; 89
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e9 e5       	ldi	r30, 0x59	; 89
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	8c 93       	st	X, r24
}
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <Gpt0_OcrInterruptEnable>:

void Gpt0_OcrInterruptEnable(){
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
SET_BIT(TIMSK,OCIE0) ;
    1b94:	a9 e5       	ldi	r26, 0x59	; 89
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e9 e5       	ldi	r30, 0x59	; 89
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	82 60       	ori	r24, 0x02	; 2
    1ba0:	8c 93       	st	X, r24
}
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <Gpt2_OcrInterruptEnable>:
void Gpt2_OcrInterruptEnable(){
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
SET_BIT(TIMSK,OCIE2) ;
    1bb0:	a9 e5       	ldi	r26, 0x59	; 89
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e9 e5       	ldi	r30, 0x59	; 89
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	80 68       	ori	r24, 0x80	; 128
    1bbc:	8c 93       	st	X, r24
}
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <Gpt2_OcrInterruptDisable>:
void Gpt2_OcrInterruptDisable(){
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(TIMSK,OCIE2) ;
    1bcc:	a9 e5       	ldi	r26, 0x59	; 89
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e9 e5       	ldi	r30, 0x59	; 89
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8f 77       	andi	r24, 0x7F	; 127
    1bd8:	8c 93       	st	X, r24
}
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <Gpt0_OvfSetCallback>:
void Gpt0_OvfSetCallback(void (*a_ptr)(void)){
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <Gpt0_OvfSetCallback+0x6>
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	9a 83       	std	Y+2, r25	; 0x02
    1bec:	89 83       	std	Y+1, r24	; 0x01
Gpt0_g_Ovf_ptr =a_ptr ;
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	90 93 b7 01 	sts	0x01B7, r25
    1bf6:	80 93 b6 01 	sts	0x01B6, r24
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <Gpt2_OvfSetCallback>:

void Gpt2_OvfSetCallback(void (*a_ptr)(void)){
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <Gpt2_OvfSetCallback+0x6>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
Gpt2_g_Ovf_ptr =a_ptr ;
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	90 93 bb 01 	sts	0x01BB, r25
    1c1a:	80 93 ba 01 	sts	0x01BA, r24
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <Gpt0_OcrSetCallback>:

void Gpt0_OcrSetCallback(void (*a_ptr)(void)){
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <Gpt0_OcrSetCallback+0x6>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
Gpt0_g_Ocr_ptr = a_ptr;
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	90 93 b9 01 	sts	0x01B9, r25
    1c3e:	80 93 b8 01 	sts	0x01B8, r24

}
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <Gpt2_OcrSetCallback>:
void Gpt2_OcrSetCallback(void (*a_ptr)(void)){
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <Gpt2_OcrSetCallback+0x6>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
Gpt2_g_Ocr_ptr = a_ptr;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	90 93 bd 01 	sts	0x01BD, r25
    1c62:	80 93 bc 01 	sts	0x01BC, r24
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <Gpt1_OcrSetCallback>:


void Gpt1_OcrSetCallback(void (*a_ptr)(void)){
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <Gpt1_OcrSetCallback+0x6>
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
Gpt1_g_Ocr_ptr = a_ptr;
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	90 93 bf 01 	sts	0x01BF, r25
    1c86:	80 93 be 01 	sts	0x01BE, r24
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <LCD_trigger>:
 * Author: Sayed Mohsen
 *
 *******************************************************************************/
#include "LCD.h"

static void LCD_trigger() {
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	6c 97       	sbiw	r28, 0x1c	; 28
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
	/*Triggering LCd By Sending A high to low Pulse*/
	SET_BIT(LCD_CONTROL_PORT,LCD_E);
    1ca8:	a2 e3       	ldi	r26, 0x32	; 50
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e2 e3       	ldi	r30, 0x32	; 50
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	80 64       	ori	r24, 0x40	; 64
    1cb4:	8c 93       	st	X, r24
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	89 8f       	std	Y+25, r24	; 0x19
    1cc0:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc2:	ab 8f       	std	Y+27, r26	; 0x1b
    1cc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a ef       	ldi	r20, 0xFA	; 250
    1cd4:	54 e4       	ldi	r21, 0x44	; 68
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8d 8b       	std	Y+21, r24	; 0x15
    1ce0:	9e 8b       	std	Y+22, r25	; 0x16
    1ce2:	af 8b       	std	Y+23, r26	; 0x17
    1ce4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_trigger+0x74>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 8b       	std	Y+20, r25	; 0x14
    1d04:	8b 8b       	std	Y+19, r24	; 0x13
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_trigger+0xf2>
	else if (__tmp > 65535)
    1d08:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_trigger+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	69 8d       	ldd	r22, Y+25	; 0x19
    1d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_trigger+0xd4>
    1d4a:	88 ec       	ldi	r24, 0xC8	; 200
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9a 8b       	std	Y+18, r25	; 0x12
    1d50:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	9a 89       	ldd	r25, Y+18	; 0x12
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_trigger+0xc2>
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d60:	9c 89       	ldd	r25, Y+20	; 0x14
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_trigger+0xb6>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_trigger+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	8b 89       	ldd	r24, Y+19	; 0x13
    1d88:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8a:	98 8b       	std	Y+16, r25	; 0x10
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
    1d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d90:	98 89       	ldd	r25, Y+16	; 0x10
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_trigger+0xfe>
    1d96:	98 8b       	std	Y+16, r25	; 0x10
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLR_BIT(LCD_CONTROL_PORT, LCD_E);
    1d9a:	a2 e3       	ldi	r26, 0x32	; 50
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e2 e3       	ldi	r30, 0x32	; 50
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8f 7b       	andi	r24, 0xBF	; 191
    1da6:	8c 93       	st	X, r24
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	8b 87       	std	Y+11, r24	; 0x0b
    1db2:	9c 87       	std	Y+12, r25	; 0x0c
    1db4:	ad 87       	std	Y+13, r26	; 0x0d
    1db6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8f 83       	std	Y+7, r24	; 0x07
    1dd2:	98 87       	std	Y+8, r25	; 0x08
    1dd4:	a9 87       	std	Y+9, r26	; 0x09
    1dd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <LCD_trigger+0x166>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <LCD_trigger+0x1e4>
	else if (__tmp > 65535)
    1dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfc:	78 85       	ldd	r23, Y+8	; 0x08
    1dfe:	89 85       	ldd	r24, Y+9	; 0x09
    1e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <LCD_trigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <LCD_trigger+0x1c6>
    1e3c:	88 ec       	ldi	r24, 0xC8	; 200
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_trigger+0x1b4>
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <LCD_trigger+0x1a8>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <LCD_trigger+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	78 85       	ldd	r23, Y+8	; 0x08
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <LCD_trigger+0x1f0>
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1e8c:	6c 96       	adiw	r28, 0x1c	; 28
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <LCD_Init>:

void LCD_Init() {
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CONTROL_DDR, LCD_RS);
    1ea6:	a1 e3       	ldi	r26, 0x31	; 49
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e1 e3       	ldi	r30, 0x31	; 49
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 61       	ori	r24, 0x10	; 16
    1eb2:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_E);
    1eb4:	a1 e3       	ldi	r26, 0x31	; 49
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e1 e3       	ldi	r30, 0x31	; 49
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	80 64       	ori	r24, 0x40	; 64
    1ec0:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_RW);
    1ec2:	a1 e3       	ldi	r26, 0x31	; 49
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e1 e3       	ldi	r30, 0x31	; 49
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 62       	ori	r24, 0x20	; 32
    1ece:	8c 93       	st	X, r24
#endif
	LCD_SendCommand(FOUR_BITS_DATA_MODE);
	LCD_SendCommand(TWO_LINE_LCD_Four_BIT_MODE);

#else
	LCD_DATA_DDR = 0xFF ;
    1ed0:	e4 e3       	ldi	r30, 0x34	; 52
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	80 83       	st	Z, r24
	LCD_SendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
    1ed8:	88 e3       	ldi	r24, 0x38	; 56
    1eda:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_SendCommand>
#endif
	LCD_Clear();
    1ede:	0e 94 0c 10 	call	0x2018	; 0x2018 <LCD_Clear>
	LCD_SendCommand(CURSOR_OFF);
    1ee2:	8c e0       	ldi	r24, 0x0C	; 12
    1ee4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_SendCommand>
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <LCD_SendCommand>:

void LCD_SendCommand(Lcd_CommandType command) {
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	0f 92       	push	r0
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LCD_CONTROL_PORT,LCD_RS);/*Select Command Register*/
    1efa:	a2 e3       	ldi	r26, 0x32	; 50
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e2 e3       	ldi	r30, 0x32	; 50
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7e       	andi	r24, 0xEF	; 239
    1f06:	8c 93       	st	X, r24
	CLR_BIT(LCD_CONTROL_PORT, LCD_RW);/*writing in LCD*/
    1f08:	a2 e3       	ldi	r26, 0x32	; 50
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e2 e3       	ldi	r30, 0x32	; 50
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	8f 7d       	andi	r24, 0xDF	; 223
    1f14:	8c 93       	st	X, r24
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
	LCD_trigger();

#endif
#else
	LCD_DATA_PORT = command ;
    1f16:	e5 e3       	ldi	r30, 0x35	; 53
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	80 83       	st	Z, r24
	LCD_trigger();
    1f1e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_trigger>
#endif

}
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <LCD_SendU8Data>:
void LCD_SendU8Data(Lcd_DataType data) {
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LCD_CONTROL_PORT,LCD_RS);/*Select Data Register*/
    1f36:	a2 e3       	ldi	r26, 0x32	; 50
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e2 e3       	ldi	r30, 0x32	; 50
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	80 61       	ori	r24, 0x10	; 16
    1f42:	8c 93       	st	X, r24
	CLR_BIT(LCD_CONTROL_PORT, LCD_RW);/*Writing In LCD*/
    1f44:	a2 e3       	ldi	r26, 0x32	; 50
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e2 e3       	ldi	r30, 0x32	; 50
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8f 7d       	andi	r24, 0xDF	; 223
    1f50:	8c 93       	st	X, r24
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
	LCD_trigger();

#endif
#else
	LCD_DATA_PORT = data ;
    1f52:	e5 e3       	ldi	r30, 0x35	; 53
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	80 83       	st	Z, r24
	LCD_trigger();
    1f5a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_trigger>
#endif

}
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <LCD_SendString>:
void LCD_SendString(char *str) {
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <LCD_SendString+0x6>
    1f6c:	0f 92       	push	r0
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	9b 83       	std	Y+3, r25	; 0x03
    1f74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 itr = 0;
    1f76:	19 82       	std	Y+1, r1	; 0x01
    1f78:	0e c0       	rjmp	.+28     	; 0x1f96 <LCD_SendString+0x30>
	while (str[itr] != '\0') {
		LCD_SendU8Data(str[itr]);
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	9b 81       	ldd	r25, Y+3	; 0x03
    1f84:	fc 01       	movw	r30, r24
    1f86:	e2 0f       	add	r30, r18
    1f88:	f3 1f       	adc	r31, r19
    1f8a:	80 81       	ld	r24, Z
    1f8c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendU8Data>
		itr++;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	8f 5f       	subi	r24, 0xFF	; 255
    1f94:	89 83       	std	Y+1, r24	; 0x01
#endif

}
void LCD_SendString(char *str) {
	uint8 itr = 0;
	while (str[itr] != '\0') {
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	e2 0f       	add	r30, r18
    1fa4:	f3 1f       	adc	r31, r19
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 23       	and	r24, r24
    1faa:	39 f7       	brne	.-50     	; 0x1f7a <LCD_SendString+0x14>
		LCD_SendU8Data(str[itr]);
		itr++;
	}
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <LCD_goToXY>:
void LCD_goToXY(uint8 x, uint8 y) {
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	27 97       	sbiw	r28, 0x07	; 7
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	8e 83       	std	Y+6, r24	; 0x06
    1fce:	6f 83       	std	Y+7, r22	; 0x07
	 * shift Cursor for 1st  line = 0x00 | 0x80 = 0x80
	 * shift Cursor for 2nd  line = 0x40 | 0x80 = 0xC0
	 * shift Cursor for 3rd  line = 0x10 | 0x80 = 0x90
	 * shift Cursor for 4rth line = 0x50 | 0x80 = 0xD0
	 * */
	uint8 lcd_addr[] = { 0x80, 0xC0, 0x90, 0xD0 };
    1fd0:	80 e8       	ldi	r24, 0x80	; 128
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	80 ec       	ldi	r24, 0xC0	; 192
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
    1fd8:	80 e9       	ldi	r24, 0x90	; 144
    1fda:	8c 83       	std	Y+4, r24	; 0x04
    1fdc:	80 ed       	ldi	r24, 0xD0	; 208
    1fde:	8d 83       	std	Y+5, r24	; 0x05
	uint8 lcd_desired_address = lcd_addr[x - 1] + (y-1);
    1fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9c 01       	movw	r18, r24
    1fe8:	21 50       	subi	r18, 0x01	; 1
    1fea:	30 40       	sbci	r19, 0x00	; 0
    1fec:	ce 01       	movw	r24, r28
    1fee:	02 96       	adiw	r24, 0x02	; 2
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	e2 0f       	add	r30, r18
    1ff4:	f3 1f       	adc	r31, r19
    1ff6:	90 81       	ld	r25, Z
    1ff8:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffa:	89 0f       	add	r24, r25
    1ffc:	81 50       	subi	r24, 0x01	; 1
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendCommand(lcd_desired_address);
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_SendCommand>
}
    2006:	27 96       	adiw	r28, 0x07	; 7
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <LCD_Clear>:
void LCD_Clear(void) {
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_COMMAND);
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_SendCommand>
}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <LCD_shiftDisplayLeft>:
void LCD_shiftDisplayLeft(){
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(SHIFT_DISPLAY_LEFT);
    2034:	88 e1       	ldi	r24, 0x18	; 24
    2036:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_SendCommand>
}
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <LCD_shiftDisplayRight>:
void LCD_shiftDisplayRight(){
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(SHIFT_DISPLAY_RIGHT);
    2048:	8c e1       	ldi	r24, 0x1C	; 28
    204a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_SendCommand>
}
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <LCD_SendIntegerData>:
void LCD_SendIntegerData(int data) {
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	66 97       	sbiw	r28, 0x16	; 22
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	9e 8b       	std	Y+22, r25	; 0x16
    206a:	8d 8b       	std	Y+21, r24	; 0x15
	char buffer[20];
	itoa(data, buffer, 10);
    206c:	8d 89       	ldd	r24, Y+21	; 0x15
    206e:	9e 89       	ldd	r25, Y+22	; 0x16
    2070:	9e 01       	movw	r18, r28
    2072:	2f 5f       	subi	r18, 0xFF	; 255
    2074:	3f 4f       	sbci	r19, 0xFF	; 255
    2076:	b9 01       	movw	r22, r18
    2078:	4a e0       	ldi	r20, 0x0A	; 10
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	0e 94 67 19 	call	0x32ce	; 0x32ce <itoa>
	LCD_SendString(buffer);
    2080:	ce 01       	movw	r24, r28
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_SendString>

}
    2088:	66 96       	adiw	r28, 0x16	; 22
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <reverseString>:
static void reverseString(char *str,uint8 len) {
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <reverseString+0x6>
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <reverseString+0x8>
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <reverseString+0xa>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	9d 83       	std	Y+5, r25	; 0x05
    20aa:	8c 83       	std	Y+4, r24	; 0x04
    20ac:	6e 83       	std	Y+6, r22	; 0x06
	uint8 right = len - 1;
    20ae:	8e 81       	ldd	r24, Y+6	; 0x06
    20b0:	81 50       	subi	r24, 0x01	; 1
    20b2:	8b 83       	std	Y+3, r24	; 0x03
	uint8 left = 0;
    20b4:	1a 82       	std	Y+2, r1	; 0x02
    20b6:	2c c0       	rjmp	.+88     	; 0x2110 <reverseString+0x76>
	char tempCharacter;
	while (left < right) {
		tempCharacter = str[left];
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	fc 01       	movw	r30, r24
    20c4:	e2 0f       	add	r30, r18
    20c6:	f3 1f       	adc	r31, r19
    20c8:	80 81       	ld	r24, Z
    20ca:	89 83       	std	Y+1, r24	; 0x01
		str[left] = str[right];
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	dc 01       	movw	r26, r24
    20d8:	a2 0f       	add	r26, r18
    20da:	b3 1f       	adc	r27, r19
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	fc 01       	movw	r30, r24
    20e8:	e2 0f       	add	r30, r18
    20ea:	f3 1f       	adc	r31, r19
    20ec:	80 81       	ld	r24, Z
    20ee:	8c 93       	st	X, r24
		str[right] = tempCharacter;
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	9d 81       	ldd	r25, Y+5	; 0x05
    20fa:	fc 01       	movw	r30, r24
    20fc:	e2 0f       	add	r30, r18
    20fe:	f3 1f       	adc	r31, r19
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	80 83       	st	Z, r24
		left++;
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	8f 5f       	subi	r24, 0xFF	; 255
    2108:	8a 83       	std	Y+2, r24	; 0x02
		right--;
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	81 50       	subi	r24, 0x01	; 1
    210e:	8b 83       	std	Y+3, r24	; 0x03
}
static void reverseString(char *str,uint8 len) {
	uint8 right = len - 1;
	uint8 left = 0;
	char tempCharacter;
	while (left < right) {
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	98 17       	cp	r25, r24
    2116:	80 f2       	brcs	.-96     	; 0x20b8 <reverseString+0x1e>
		str[left] = str[right];
		str[right] = tempCharacter;
		left++;
		right--;
	}
}
    2118:	26 96       	adiw	r28, 0x06	; 6
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <integerToASCII>:
static void integerToASCII(int num, char buffer[]) {
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	65 97       	sbiw	r28, 0x15	; 21
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	9e 87       	std	Y+14, r25	; 0x0e
    2140:	8d 87       	std	Y+13, r24	; 0x0d
    2142:	78 8b       	std	Y+16, r23	; 0x10
    2144:	6f 87       	std	Y+15, r22	; 0x0f
	 *ASCII code	55	7	(number seven)
	 *ASCII code	56	8	(number eight)
	 *ASCII code	57	9	(number nine)
	 *
	 */
	char ascii_arr[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
    2146:	ce 01       	movw	r24, r28
    2148:	03 96       	adiw	r24, 0x03	; 3
    214a:	9a 8b       	std	Y+18, r25	; 0x12
    214c:	89 8b       	std	Y+17, r24	; 0x11
    214e:	ea e8       	ldi	r30, 0x8A	; 138
    2150:	f1 e0       	ldi	r31, 0x01	; 1
    2152:	fc 8b       	std	Y+20, r31	; 0x14
    2154:	eb 8b       	std	Y+19, r30	; 0x13
    2156:	fa e0       	ldi	r31, 0x0A	; 10
    2158:	fd 8b       	std	Y+21, r31	; 0x15
    215a:	eb 89       	ldd	r30, Y+19	; 0x13
    215c:	fc 89       	ldd	r31, Y+20	; 0x14
    215e:	00 80       	ld	r0, Z
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	9c 8b       	std	Y+20, r25	; 0x14
    2168:	8b 8b       	std	Y+19, r24	; 0x13
    216a:	e9 89       	ldd	r30, Y+17	; 0x11
    216c:	fa 89       	ldd	r31, Y+18	; 0x12
    216e:	00 82       	st	Z, r0
    2170:	89 89       	ldd	r24, Y+17	; 0x11
    2172:	9a 89       	ldd	r25, Y+18	; 0x12
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	9a 8b       	std	Y+18, r25	; 0x12
    2178:	89 8b       	std	Y+17, r24	; 0x11
    217a:	9d 89       	ldd	r25, Y+21	; 0x15
    217c:	91 50       	subi	r25, 0x01	; 1
    217e:	9d 8b       	std	Y+21, r25	; 0x15
    2180:	ed 89       	ldd	r30, Y+21	; 0x15
    2182:	ee 23       	and	r30, r30
    2184:	51 f7       	brne	.-44     	; 0x215a <integerToASCII+0x30>
	uint8 itr = 0;
    2186:	1a 82       	std	Y+2, r1	; 0x02
	uint8 tempNumber;
	if (num == 0) {
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	79 f5       	brne	.+94     	; 0x21ee <integerToASCII+0xc4>
		buffer[0] = ascii_arr[0];
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	ef 85       	ldd	r30, Y+15	; 0x0f
    2194:	f8 89       	ldd	r31, Y+16	; 0x10
    2196:	80 83       	st	Z, r24
		itr++;
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	8f 5f       	subi	r24, 0xFF	; 255
    219c:	8a 83       	std	Y+2, r24	; 0x02
    219e:	2b c0       	rjmp	.+86     	; 0x21f6 <integerToASCII+0xcc>
	} else {
		while (num != 0) {
			tempNumber = num % 10;
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	2a e0       	ldi	r18, 0x0A	; 10
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	b9 01       	movw	r22, r18
    21aa:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodhi4>
    21ae:	89 83       	std	Y+1, r24	; 0x01
			buffer[itr] = ascii_arr[tempNumber];
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b8:	98 89       	ldd	r25, Y+16	; 0x10
    21ba:	dc 01       	movw	r26, r24
    21bc:	a2 0f       	add	r26, r18
    21be:	b3 1f       	adc	r27, r19
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	ce 01       	movw	r24, r28
    21c8:	03 96       	adiw	r24, 0x03	; 3
    21ca:	fc 01       	movw	r30, r24
    21cc:	e2 0f       	add	r30, r18
    21ce:	f3 1f       	adc	r31, r19
    21d0:	80 81       	ld	r24, Z
    21d2:	8c 93       	st	X, r24
			itr++;
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	8f 5f       	subi	r24, 0xFF	; 255
    21d8:	8a 83       	std	Y+2, r24	; 0x02
			num = num / 10;
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	2a e0       	ldi	r18, 0x0A	; 10
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	b9 01       	movw	r22, r18
    21e4:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodhi4>
    21e8:	cb 01       	movw	r24, r22
    21ea:	9e 87       	std	Y+14, r25	; 0x0e
    21ec:	8d 87       	std	Y+13, r24	; 0x0d
	uint8 tempNumber;
	if (num == 0) {
		buffer[0] = ascii_arr[0];
		itr++;
	} else {
		while (num != 0) {
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	a9 f6       	brne	.-86     	; 0x21a0 <integerToASCII+0x76>
			buffer[itr] = ascii_arr[tempNumber];
			itr++;
			num = num / 10;
		}
	}
	reverseString(buffer, itr);
    21f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f8:	98 89       	ldd	r25, Y+16	; 0x10
    21fa:	6a 81       	ldd	r22, Y+2	; 0x02
    21fc:	0e 94 4d 10 	call	0x209a	; 0x209a <reverseString>
}
    2200:	65 96       	adiw	r28, 0x15	; 21
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LCD_sendu32Data>:

void LCD_sendu32Data(int data){
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	62 97       	sbiw	r28, 0x12	; 18
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	9a 8b       	std	Y+18, r25	; 0x12
    2228:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16]={'\0'};
    222a:	80 e1       	ldi	r24, 0x10	; 16
    222c:	fe 01       	movw	r30, r28
    222e:	31 96       	adiw	r30, 0x01	; 1
    2230:	df 01       	movw	r26, r30
    2232:	98 2f       	mov	r25, r24
    2234:	1d 92       	st	X+, r1
    2236:	9a 95       	dec	r25
    2238:	e9 f7       	brne	.-6      	; 0x2234 <LCD_sendu32Data+0x22>
	integerToASCII(data , buffer);
    223a:	89 89       	ldd	r24, Y+17	; 0x11
    223c:	9a 89       	ldd	r25, Y+18	; 0x12
    223e:	9e 01       	movw	r18, r28
    2240:	2f 5f       	subi	r18, 0xFF	; 255
    2242:	3f 4f       	sbci	r19, 0xFF	; 255
    2244:	b9 01       	movw	r22, r18
    2246:	0e 94 95 10 	call	0x212a	; 0x212a <integerToASCII>
	LCD_SendString(buffer);
    224a:	ce 01       	movw	r24, r28
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_SendString>
}
    2252:	62 96       	adiw	r28, 0x12	; 18
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <LM35_ReadTemp>:
 *      Author: sayed
 */
#include"Lm35.h"

uint16 LM35_ReadTemp()
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	2a 97       	sbiw	r28, 0x0a	; 10
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
	uint16 temp;
	float dig;
	//int dig;
	float volt;
	dig = Adc_readChannel(LM35_ADC_CHANNEL);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	0e 94 b3 07 	call	0xf66	; 0xf66 <Adc_readChannel>
    227e:	cc 01       	movw	r24, r24
    2280:	a0 e0       	ldi	r26, 0x00	; 0
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	af 83       	std	Y+7, r26	; 0x07
    2296:	b8 87       	std	Y+8, r27	; 0x08
	//LCD_goToXY(2,1);
	//LCD_SendIntegerData(dig);
	volt = (dig * 5) / 1023;
    2298:	6d 81       	ldd	r22, Y+5	; 0x05
    229a:	7e 81       	ldd	r23, Y+6	; 0x06
    229c:	8f 81       	ldd	r24, Y+7	; 0x07
    229e:	98 85       	ldd	r25, Y+8	; 0x08
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 ea       	ldi	r20, 0xA0	; 160
    22a6:	50 e4       	ldi	r21, 0x40	; 64
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 ec       	ldi	r19, 0xC0	; 192
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	54 e4       	ldi	r21, 0x44	; 68
    22bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	ab 83       	std	Y+3, r26	; 0x03
    22ca:	bc 83       	std	Y+4, r27	; 0x04
	volt = (volt) / 10;
    22cc:	69 81       	ldd	r22, Y+1	; 0x01
    22ce:	7a 81       	ldd	r23, Y+2	; 0x02
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	ab 83       	std	Y+3, r26	; 0x03
    22ea:	bc 83       	std	Y+4, r27	; 0x04
	temp = volt * 1000;
    22ec:	69 81       	ldd	r22, Y+1	; 0x01
    22ee:	7a 81       	ldd	r23, Y+2	; 0x02
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a e7       	ldi	r20, 0x7A	; 122
    22fa:	54 e4       	ldi	r21, 0x44	; 68
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9a 87       	std	Y+10, r25	; 0x0a
    2312:	89 87       	std	Y+9, r24	; 0x09
	return temp;
    2314:	89 85       	ldd	r24, Y+9	; 0x09
    2316:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    2318:	2a 96       	adiw	r28, 0x0a	; 10
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <Os_start>:
/* Function responsible for:
 * 1. Initialize the Os
 * 2. Execute the Init Task
 * 3. Start the Scheduler to run the tasks
 */
void Os_start(void) {
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Set the Call Back function call to Scheduler_New_Timer_Tick
	 * this function will be called every Timer0 Compare Interrupt(20ms)
	 */

	Gpt0_OcrSetCallback(Os_newTimerTick);
    2332:	8f ea       	ldi	r24, 0xAF	; 175
    2334:	91 e1       	ldi	r25, 0x11	; 17
    2336:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Gpt0_OcrSetCallback>

	/* Start Timer0 in Compare Mode to generate interrupt every 20ms */
	Gpt0_init(&Gpt0_configuration);
    233a:	81 e7       	ldi	r24, 0x71	; 113
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <Gpt0_init>
	Gpt0_SetOcrValue(OS_BASE_TIME);
    2342:	84 e1       	ldi	r24, 0x14	; 20
    2344:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <Gpt0_SetOcrValue>
	Gpt0_OcrInterruptEnable();
    2348:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <Gpt0_OcrInterruptEnable>

	/* Execute the Init Task */
	smartWatch_initTask();
    234c:	0e 94 14 12 	call	0x2428	; 0x2428 <smartWatch_initTask>


	Display_Task();
    2350:	0e 94 74 12 	call	0x24e8	; 0x24e8 <Display_Task>
	/* Start the Os Scheduler */
	Os_scheduler();
    2354:	0e 94 c4 11 	call	0x2388	; 0x2388 <Os_scheduler>


}
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <Os_newTimerTick>:



/* Function called by the Timer Driver in the MCAL layer using the call back pointer */
void Os_newTimerTick(void)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62

	if (g_Time_Tick_Count==120)
    2366:	80 91 c0 01 	lds	r24, 0x01C0
    236a:	88 37       	cpi	r24, 0x78	; 120
    236c:	11 f4       	brne	.+4      	; 0x2372 <Os_newTimerTick+0x14>
	{
		g_Time_Tick_Count=0;
    236e:	10 92 c0 01 	sts	0x01C0, r1
	//LCD_goToXY(2,1);
			//LCD_sendu32Data(g_Time_Tick_Count);


	/* increment the Os time by OS_BASE_TIME */
	g_Time_Tick_Count   += OS_BASE_TIME;
    2372:	80 91 c0 01 	lds	r24, 0x01C0
    2376:	8c 5e       	subi	r24, 0xEC	; 236
    2378:	80 93 c0 01 	sts	0x01C0, r24

	/* Set the flag to 1 to indicate that there is a new timer tick */
	g_New_Time_Tick_Flag = 1;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 c1 01 	sts	0x01C1, r24

}
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <Os_scheduler>:

/* The Engine of the Os Scheduler used for switch between different tasks */
void Os_scheduler(void) {
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <Os_scheduler+0x6>
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
	while (1){
		/* Code is only executed in case there is a new timer tick */
		if (g_New_Time_Tick_Flag == 1) {
    2392:	80 91 c1 01 	lds	r24, 0x01C1
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	e1 f7       	brne	.-8      	; 0x2392 <Os_scheduler+0xa>
			switch (g_Time_Tick_Count) {
    239a:	80 91 c0 01 	lds	r24, 0x01C0
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	3a 83       	std	Y+2, r19	; 0x02
    23a4:	29 83       	std	Y+1, r18	; 0x01
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	8c 33       	cpi	r24, 0x3C	; 60
    23ac:	91 05       	cpc	r25, r1
    23ae:	39 f1       	breq	.+78     	; 0x23fe <Os_scheduler+0x76>
    23b0:	29 81       	ldd	r18, Y+1	; 0x01
    23b2:	3a 81       	ldd	r19, Y+2	; 0x02
    23b4:	2d 33       	cpi	r18, 0x3D	; 61
    23b6:	31 05       	cpc	r19, r1
    23b8:	5c f4       	brge	.+22     	; 0x23d0 <Os_scheduler+0x48>
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	84 31       	cpi	r24, 0x14	; 20
    23c0:	91 05       	cpc	r25, r1
    23c2:	89 f0       	breq	.+34     	; 0x23e6 <Os_scheduler+0x5e>
    23c4:	29 81       	ldd	r18, Y+1	; 0x01
    23c6:	3a 81       	ldd	r19, Y+2	; 0x02
    23c8:	28 32       	cpi	r18, 0x28	; 40
    23ca:	31 05       	cpc	r19, r1
    23cc:	89 f0       	breq	.+34     	; 0x23f0 <Os_scheduler+0x68>
    23ce:	e1 cf       	rjmp	.-62     	; 0x2392 <Os_scheduler+0xa>
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	80 35       	cpi	r24, 0x50	; 80
    23d6:	91 05       	cpc	r25, r1
    23d8:	c9 f0       	breq	.+50     	; 0x240c <Os_scheduler+0x84>
    23da:	29 81       	ldd	r18, Y+1	; 0x01
    23dc:	3a 81       	ldd	r19, Y+2	; 0x02
    23de:	24 36       	cpi	r18, 0x64	; 100
    23e0:	31 05       	cpc	r19, r1
    23e2:	d9 f0       	breq	.+54     	; 0x241a <Os_scheduler+0x92>
    23e4:	d6 cf       	rjmp	.-84     	; 0x2392 <Os_scheduler+0xa>
			case 20:
				Clock_Task();
    23e6:	0e 94 4c 12 	call	0x2498	; 0x2498 <Clock_Task>
				g_New_Time_Tick_Flag = 0;
    23ea:	10 92 c1 01 	sts	0x01C1, r1
    23ee:	d1 cf       	rjmp	.-94     	; 0x2392 <Os_scheduler+0xa>
				break;
			case 40:
				Clock_Task();
    23f0:	0e 94 4c 12 	call	0x2498	; 0x2498 <Clock_Task>
				Alarm_Task();
    23f4:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <Alarm_Task>
				g_New_Time_Tick_Flag = 0;
    23f8:	10 92 c1 01 	sts	0x01C1, r1
    23fc:	ca cf       	rjmp	.-108    	; 0x2392 <Os_scheduler+0xa>
				break;
			case 60:
				//Dio_WriteChannel(DioConf_LED_PORT_ID_INDEX, STD_LOW);
				Clock_Task();
    23fe:	0e 94 4c 12 	call	0x2498	; 0x2498 <Clock_Task>
				Temperature_Task();
    2402:	0e 94 60 12 	call	0x24c0	; 0x24c0 <Temperature_Task>
				g_New_Time_Tick_Flag = 0;
    2406:	10 92 c1 01 	sts	0x01C1, r1
    240a:	c3 cf       	rjmp	.-122    	; 0x2392 <Os_scheduler+0xa>
				break;
			case 80:
				Clock_Task();
    240c:	0e 94 4c 12 	call	0x2498	; 0x2498 <Clock_Task>
				Alarm_Task();
    2410:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <Alarm_Task>
				g_New_Time_Tick_Flag = 0;
    2414:	10 92 c1 01 	sts	0x01C1, r1
    2418:	bc cf       	rjmp	.-136    	; 0x2392 <Os_scheduler+0xa>
				break;

			case 100:
				Clock_Task();
    241a:	0e 94 4c 12 	call	0x2498	; 0x2498 <Clock_Task>
				Date_Task();
    241e:	0e 94 55 12 	call	0x24aa	; 0x24aa <Date_Task>
				g_New_Time_Tick_Flag = 0;
    2422:	10 92 c1 01 	sts	0x01C1, r1
    2426:	b5 cf       	rjmp	.-150    	; 0x2392 <Os_scheduler+0xa>

00002428 <smartWatch_initTask>:
 */
#include "SmartWatch.h"

/* Task Called Once to initialize all smartWatch Modules */
void smartWatch_initTask(void)
 {
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62

	/* Initialize Port Driver */
	Port_Init(&port_configuration);
    2430:	84 e9       	ldi	r24, 0x94	; 148
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <Port_Init>

	/* Initialize Dio Driver */
	Dio_Init(&DIO_configuration);
    2438:	82 e8       	ldi	r24, 0x82	; 130
    243a:	91 e0       	ldi	r25, 0x01	; 1
    243c:	0e 94 2e 08 	call	0x105c	; 0x105c <Dio_Init>

	/* Initialize Lcd Driver */
	LCD_Init();
    2440:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_Init>

	/* Initialize Adc Driver */
	Adc_init(&Adc_configuration);
    2444:	8d e7       	ldi	r24, 0x7D	; 125
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	0e 94 37 07 	call	0xe6e	; 0xe6e <Adc_init>

	/* Enable External Interrupts On External INT2 pin */
	IU_ExternalInt2_setCallback(incrementAlarmHours);
    244c:	8d ea       	ldi	r24, 0xAD	; 173
    244e:	92 e1       	ldi	r25, 0x12	; 18
    2450:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <IU_ExternalInt2_setCallback>
	IU_ExternalInterruptEnable(&Int2_configuration);
    2454:	88 e8       	ldi	r24, 0x88	; 136
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	0e 94 81 15 	call	0x2b02	; 0x2b02 <IU_ExternalInterruptEnable>

	/* Enable External Interrupts On External INT0 pin */
	IU_ExternalInt0_setCallback(incrementAlarmSeconds);
    245c:	83 e8       	ldi	r24, 0x83	; 131
    245e:	92 e1       	ldi	r25, 0x12	; 18
    2460:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <IU_ExternalInt0_setCallback>
	IU_ExternalInterruptEnable(&Int0_configuration);
    2464:	84 e8       	ldi	r24, 0x84	; 132
    2466:	91 e0       	ldi	r25, 0x01	; 1
    2468:	0e 94 81 15 	call	0x2b02	; 0x2b02 <IU_ExternalInterruptEnable>

	/* Enable External Interrupts On External INT1 pin */
	IU_ExternalInt1_setCallback(incrementAlarmMinutes);
    246c:	88 e9       	ldi	r24, 0x98	; 152
    246e:	92 e1       	ldi	r25, 0x12	; 18
    2470:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <IU_ExternalInt1_setCallback>
	IU_ExternalInterruptEnable(&Int1_configuration);
    2474:	86 e8       	ldi	r24, 0x86	; 134
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	0e 94 81 15 	call	0x2b02	; 0x2b02 <IU_ExternalInterruptEnable>

	/* Initialize Gpt Driver */
	Gpt1_OcrSetCallback(tick);
    247c:	8c e9       	ldi	r24, 0x9C	; 156
    247e:	93 e1       	ldi	r25, 0x13	; 19
    2480:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <Gpt1_OcrSetCallback>
	Timer1_InitoneSecond();
    2484:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Timer1_InitoneSecond>

	Gpt2_OcrSetCallback(alarmRuntime);
    2488:	82 ec       	ldi	r24, 0xC2	; 194
    248a:	92 e1       	ldi	r25, 0x12	; 18
    248c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Gpt2_OcrSetCallback>
	/*Enable Global Interrupts */
	sei();
    2490:	78 94       	sei
}
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <Clock_Task>:


/* Task Called Every To update Clock */
void Clock_Task(void)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
//	updatetime();
	displaytime();
    24a0:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <displaytime>
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <Date_Task>:

/* Task Called Every To Update Date */
void Date_Task(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	updatedate();
    24b2:	0e 94 3d 14 	call	0x287a	; 0x287a <updatedate>
	displaydate();
    24b6:	0e 94 57 14 	call	0x28ae	; 0x28ae <displaydate>

}
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <Temperature_Task>:
/* Task Called Every To Update Temperature */
void Temperature_Task(void)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
	updatetemp();
    24c8:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <updatetemp>
    displaytemp();
    24cc:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <displaytemp>

}
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <Alarm_Task>:
/* Task Called Every To Check Alarm */
void Alarm_Task(void)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
//	checkalarm();
	displayalarm();
    24de:	0e 94 37 13 	call	0x266e	; 0x266e <displayalarm>

}
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <Display_Task>:
/*Task Called Once To init LCD Display*/
void Display_Task(void)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	Clock_Task();
    24f0:	0e 94 4c 12 	call	0x2498	; 0x2498 <Clock_Task>
	Date_Task();
    24f4:	0e 94 55 12 	call	0x24aa	; 0x24aa <Date_Task>
	Temperature_Task();
    24f8:	0e 94 60 12 	call	0x24c0	; 0x24c0 <Temperature_Task>
	Alarm_Task();
    24fc:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <Alarm_Task>
}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <incrementAlarmSeconds>:

/*
 * Function To Increment Alarm Seconds
 */
void incrementAlarmSeconds()
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	g_Alarmseconds++;
    250e:	80 91 c2 01 	lds	r24, 0x01C2
    2512:	8f 5f       	subi	r24, 0xFF	; 255
    2514:	80 93 c2 01 	sts	0x01C2, r24
	if(g_Alarmseconds>=MAX_SECONDS_PER_MINUTE)
    2518:	80 91 c2 01 	lds	r24, 0x01C2
    251c:	8c 33       	cpi	r24, 0x3C	; 60
    251e:	10 f0       	brcs	.+4      	; 0x2524 <incrementAlarmSeconds+0x1e>
	{
		g_Alarmseconds = 0 ;
    2520:	10 92 c2 01 	sts	0x01C2, r1
	}
	g_Alarmstatus=ALARM_SET;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	80 93 c5 01 	sts	0x01C5, r24
}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <incrementAlarmMinutes>:

/*
 * Function To Increment Alarm Minutes
 */
void incrementAlarmMinutes()
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	g_Alarmminutes++;
    2538:	80 91 c3 01 	lds	r24, 0x01C3
    253c:	8f 5f       	subi	r24, 0xFF	; 255
    253e:	80 93 c3 01 	sts	0x01C3, r24
	if (g_Alarmminutes >= MAX_MINUTES_PER_HOUR)
    2542:	80 91 c3 01 	lds	r24, 0x01C3
    2546:	8c 33       	cpi	r24, 0x3C	; 60
    2548:	10 f0       	brcs	.+4      	; 0x254e <incrementAlarmMinutes+0x1e>
	{
		g_Alarmminutes = 0;
    254a:	10 92 c3 01 	sts	0x01C3, r1
	}
	g_Alarmstatus = ALARM_SET;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	80 93 c5 01 	sts	0x01C5, r24
}
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <incrementAlarmHours>:

/*
 * Function To Increment Alarm Hours
 */
void incrementAlarmHours()
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	g_Alarmhours++;
    2562:	80 91 c4 01 	lds	r24, 0x01C4
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	80 93 c4 01 	sts	0x01C4, r24
	if (g_Alarmhours>= MAX_HOURS_PER_DAY)
    256c:	80 91 c4 01 	lds	r24, 0x01C4
    2570:	88 31       	cpi	r24, 0x18	; 24
    2572:	10 f0       	brcs	.+4      	; 0x2578 <incrementAlarmHours+0x1e>
	{
		g_Alarmhours = 0;
    2574:	10 92 c4 01 	sts	0x01C4, r1
	}
	g_Alarmstatus=ALARM_SET;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	80 93 c5 01 	sts	0x01C5, r24
}
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <alarmRuntime>:

void alarmRuntime()
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	delay++;
    258c:	80 91 c6 01 	lds	r24, 0x01C6
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	80 93 c6 01 	sts	0x01C6, r24
	if(delay>=MAX_DELAY_TIME)
    2596:	80 91 c6 01 	lds	r24, 0x01C6
    259a:	84 32       	cpi	r24, 0x24	; 36
    259c:	20 f0       	brcs	.+8      	; 0x25a6 <alarmRuntime+0x22>
	{
		disable_alarm();
    259e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <disable_alarm>
		delay= 0 ;
    25a2:	10 92 c6 01 	sts	0x01C6, r1
	}
}
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <fire_alarm>:
/*
 * Function To Fire Alarm
 */
void fire_alarm()
{
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_PORT_ID_INDEX, STD_HIGH);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	0e 94 4f 08 	call	0x109e	; 0x109e <Dio_WriteChannel>

	/* Turn On Alarm For Specific Time*/
	Gpt2_SetOcrValue(120);
    25bc:	88 e7       	ldi	r24, 0x78	; 120
    25be:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <Gpt2_SetOcrValue>
	Gpt2_init(&Gpt2_configuration);
    25c2:	84 e7       	ldi	r24, 0x74	; 116
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Gpt2_init>
	Gpt2_OcrInterruptEnable();
    25ca:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Gpt2_OcrInterruptEnable>
}
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <disable_alarm>:

/*
 * Function To Disable Alarm
 */
void disable_alarm()
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
	Gpt2_deinit();
    25dc:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <Gpt2_deinit>
	g_Alarmseconds = 0;
    25e0:	10 92 c2 01 	sts	0x01C2, r1
	g_Alarmminutes = 0;
    25e4:	10 92 c3 01 	sts	0x01C3, r1
	g_Alarmhours = 0;
    25e8:	10 92 c4 01 	sts	0x01C4, r1
	g_Alarmstatus = ALARM_NOT_SET;
    25ec:	10 92 c5 01 	sts	0x01C5, r1
	Dio_WriteChannel(DioConf_LED_PORT_ID_INDEX, STD_LOW);
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	0e 94 4f 08 	call	0x109e	; 0x109e <Dio_WriteChannel>
}
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <checkalarm>:

/*
 * Function To Check Alarm
 */
void checkalarm()
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	if ((g_Alarmseconds == g_seconds) && (g_Alarmminutes == g_minutes)&& (g_Alarmhours == g_24hours))
    2606:	90 91 c2 01 	lds	r25, 0x01C2
    260a:	80 91 77 01 	lds	r24, 0x0177
    260e:	98 17       	cp	r25, r24
    2610:	71 f4       	brne	.+28     	; 0x262e <checkalarm+0x30>
    2612:	90 91 c3 01 	lds	r25, 0x01C3
    2616:	80 91 78 01 	lds	r24, 0x0178
    261a:	98 17       	cp	r25, r24
    261c:	41 f4       	brne	.+16     	; 0x262e <checkalarm+0x30>
    261e:	90 91 c4 01 	lds	r25, 0x01C4
    2622:	80 91 79 01 	lds	r24, 0x0179
    2626:	98 17       	cp	r25, r24
    2628:	11 f4       	brne	.+4      	; 0x262e <checkalarm+0x30>
	{
		fire_alarm();/* Turn On Alarm */
    262a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fire_alarm>
	}
}
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <setAlarm>:

/*
 * Function Called To Set Alarm
 */
void setAlarm(uint8 hours, uint8 minutes, uint8 seconds, uint8 period)
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	00 d0       	rcall	.+0      	; 0x263a <setAlarm+0x6>
    263a:	00 d0       	rcall	.+0      	; 0x263c <setAlarm+0x8>
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	6a 83       	std	Y+2, r22	; 0x02
    2644:	4b 83       	std	Y+3, r20	; 0x03
    2646:	2c 83       	std	Y+4, r18	; 0x04
	g_Alarmseconds = seconds;
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	80 93 c2 01 	sts	0x01C2, r24
	g_Alarmminutes = minutes;
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	80 93 c3 01 	sts	0x01C3, r24
	g_Alarmhours = hours;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	80 93 c4 01 	sts	0x01C4, r24
	g_Alarmstatus = ALARM_SET;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 93 c5 01 	sts	0x01C5, r24
}
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <displayalarm>:

/*
 * Function To Display Alarm
 */
void displayalarm() {
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <displayalarm+0x6>
    2674:	00 d0       	rcall	.+0      	; 0x2676 <displayalarm+0x8>
    2676:	00 d0       	rcall	.+0      	; 0x2678 <displayalarm+0xa>
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
	 */

	uint8 lcdhours[2];
	uint8 lcdminutes[2];
	uint8 lcdseconds[2];
	lcdhours[0] = g_Alarmhours % 10;
    267c:	80 91 c4 01 	lds	r24, 0x01C4
    2680:	9a e0       	ldi	r25, 0x0A	; 10
    2682:	69 2f       	mov	r22, r25
    2684:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    2688:	89 2f       	mov	r24, r25
    268a:	89 83       	std	Y+1, r24	; 0x01
	lcdhours[1] = g_Alarmhours / 10;
    268c:	80 91 c4 01 	lds	r24, 0x01C4
    2690:	9a e0       	ldi	r25, 0x0A	; 10
    2692:	69 2f       	mov	r22, r25
    2694:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    2698:	8a 83       	std	Y+2, r24	; 0x02
	lcdminutes[0] = g_Alarmminutes % 10;
    269a:	80 91 c3 01 	lds	r24, 0x01C3
    269e:	9a e0       	ldi	r25, 0x0A	; 10
    26a0:	69 2f       	mov	r22, r25
    26a2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    26a6:	89 2f       	mov	r24, r25
    26a8:	8b 83       	std	Y+3, r24	; 0x03
	lcdminutes[1] = g_Alarmminutes / 10;
    26aa:	80 91 c3 01 	lds	r24, 0x01C3
    26ae:	9a e0       	ldi	r25, 0x0A	; 10
    26b0:	69 2f       	mov	r22, r25
    26b2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    26b6:	8c 83       	std	Y+4, r24	; 0x04
	lcdseconds[0] = g_Alarmseconds % 10;
    26b8:	80 91 c2 01 	lds	r24, 0x01C2
    26bc:	9a e0       	ldi	r25, 0x0A	; 10
    26be:	69 2f       	mov	r22, r25
    26c0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    26c4:	89 2f       	mov	r24, r25
    26c6:	8d 83       	std	Y+5, r24	; 0x05
	lcdseconds[1] = g_Alarmseconds / 10;
    26c8:	80 91 c2 01 	lds	r24, 0x01C2
    26cc:	9a e0       	ldi	r25, 0x0A	; 10
    26ce:	69 2f       	mov	r22, r25
    26d0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    26d4:	8e 83       	std	Y+6, r24	; 0x06

	/* Shift LCD Cursor To Alarm Location On LCD*/
	LCD_goToXY(4, 5);
    26d6:	84 e0       	ldi	r24, 0x04	; 4
    26d8:	65 e0       	ldi	r22, 0x05	; 5
    26da:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <LCD_goToXY>

	/*
	 * Display Alarm
	 */
	LCD_SendIntegerData(lcdhours[1]);
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdhours[0]);
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendU8Data(':');
    26f2:	8a e3       	ldi	r24, 0x3A	; 58
    26f4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendU8Data>
	LCD_SendIntegerData(lcdminutes[1]);
    26f8:	8c 81       	ldd	r24, Y+4	; 0x04
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdminutes[0]);
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendU8Data(':');
    270c:	8a e3       	ldi	r24, 0x3A	; 58
    270e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendU8Data>
	LCD_SendIntegerData(lcdseconds[1]);
    2712:	8e 81       	ldd	r24, Y+6	; 0x06
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdseconds[0]);
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
}
    2726:	26 96       	adiw	r28, 0x06	; 6
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <tick>:

/*
 * Function Called Every second To Increment Base Unit Of  Time
 */
void tick()
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
	g_seconds++; /* increment Seconds Time */
    2740:	80 91 77 01 	lds	r24, 0x0177
    2744:	8f 5f       	subi	r24, 0xFF	; 255
    2746:	80 93 77 01 	sts	0x0177, r24
	updatetime();
    274a:	0e 94 b0 13 	call	0x2760	; 0x2760 <updatetime>
	if(g_Alarmstatus==ALARM_SET)
    274e:	80 91 c5 01 	lds	r24, 0x01C5
    2752:	81 30       	cpi	r24, 0x01	; 1
    2754:	11 f4       	brne	.+4      	; 0x275a <tick+0x22>
	{
		checkalarm();
    2756:	0e 94 ff 12 	call	0x25fe	; 0x25fe <checkalarm>
	}
}
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <updatetime>:

/*
 *Function To Update Clock
 */
void updatetime()
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
	if (g_seconds >= MAX_SECONDS_PER_MINUTE)
    2768:	80 91 77 01 	lds	r24, 0x0177
    276c:	8c 33       	cpi	r24, 0x3C	; 60
    276e:	e8 f0       	brcs	.+58     	; 0x27aa <updatetime+0x4a>
	{
		g_seconds = 0;
    2770:	10 92 77 01 	sts	0x0177, r1
		g_minutes++; /* increment Minutes Count */
    2774:	80 91 78 01 	lds	r24, 0x0178
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	80 93 78 01 	sts	0x0178, r24
		if (g_minutes >= MAX_MINUTES_PER_HOUR)
    277e:	80 91 78 01 	lds	r24, 0x0178
    2782:	8c 33       	cpi	r24, 0x3C	; 60
    2784:	90 f0       	brcs	.+36     	; 0x27aa <updatetime+0x4a>
		{
			g_minutes = 0;
    2786:	10 92 78 01 	sts	0x0178, r1
			g_24hours++;/* increment Hours Count */
    278a:	80 91 79 01 	lds	r24, 0x0179
    278e:	8f 5f       	subi	r24, 0xFF	; 255
    2790:	80 93 79 01 	sts	0x0179, r24
			if (g_24hours >= MAX_HOURS_PER_DAY)
    2794:	80 91 79 01 	lds	r24, 0x0179
    2798:	88 31       	cpi	r24, 0x18	; 24
    279a:	38 f0       	brcs	.+14     	; 0x27aa <updatetime+0x4a>
			{
				g_24hours = 0;
    279c:	10 92 79 01 	sts	0x0179, r1
				g_days++;/* increment Days Count */
    27a0:	80 91 7a 01 	lds	r24, 0x017A
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	80 93 7a 01 	sts	0x017A, r24
			}
		}
	}
}
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <displaytime>:

/*
 * Function To Display Clock On LCD
 */

void displaytime() {
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <displaytime+0x6>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <displaytime+0x8>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <displaytime+0xa>
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	 */

	uint8 lcdhours[2];
	uint8 lcdminutes[2];
	uint8 lcdseconds[2];
	lcdhours[0]   = g_24hours % 10;
    27be:	80 91 79 01 	lds	r24, 0x0179
    27c2:	9a e0       	ldi	r25, 0x0A	; 10
    27c4:	69 2f       	mov	r22, r25
    27c6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    27ca:	89 2f       	mov	r24, r25
    27cc:	89 83       	std	Y+1, r24	; 0x01
	lcdhours[1]   = g_24hours / 10;
    27ce:	80 91 79 01 	lds	r24, 0x0179
    27d2:	9a e0       	ldi	r25, 0x0A	; 10
    27d4:	69 2f       	mov	r22, r25
    27d6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    27da:	8a 83       	std	Y+2, r24	; 0x02
	lcdminutes[0] = g_minutes % 10;
    27dc:	80 91 78 01 	lds	r24, 0x0178
    27e0:	9a e0       	ldi	r25, 0x0A	; 10
    27e2:	69 2f       	mov	r22, r25
    27e4:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    27e8:	89 2f       	mov	r24, r25
    27ea:	8b 83       	std	Y+3, r24	; 0x03
	lcdminutes[1] = g_minutes / 10;
    27ec:	80 91 78 01 	lds	r24, 0x0178
    27f0:	9a e0       	ldi	r25, 0x0A	; 10
    27f2:	69 2f       	mov	r22, r25
    27f4:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    27f8:	8c 83       	std	Y+4, r24	; 0x04
	lcdseconds[0] = g_seconds % 10;
    27fa:	80 91 77 01 	lds	r24, 0x0177
    27fe:	9a e0       	ldi	r25, 0x0A	; 10
    2800:	69 2f       	mov	r22, r25
    2802:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    2806:	89 2f       	mov	r24, r25
    2808:	8d 83       	std	Y+5, r24	; 0x05
	lcdseconds[1] = g_seconds / 10;
    280a:	80 91 77 01 	lds	r24, 0x0177
    280e:	9a e0       	ldi	r25, 0x0A	; 10
    2810:	69 2f       	mov	r22, r25
    2812:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    2816:	8e 83       	std	Y+6, r24	; 0x06


	/* Shift LCD Cursor To Clock Location On LCD*/
	LCD_goToXY(1, 5);
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	65 e0       	ldi	r22, 0x05	; 5
    281c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <LCD_goToXY>


	/*
	 * Display Clock
	 */
	LCD_SendIntegerData(lcdhours[1]);
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	88 2f       	mov	r24, r24
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdhours[0]);
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendU8Data(':');
    2834:	8a e3       	ldi	r24, 0x3A	; 58
    2836:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendU8Data>
	LCD_SendIntegerData(lcdminutes[1]);
    283a:	8c 81       	ldd	r24, Y+4	; 0x04
    283c:	88 2f       	mov	r24, r24
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdminutes[0]);
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	88 2f       	mov	r24, r24
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendU8Data(':');
    284e:	8a e3       	ldi	r24, 0x3A	; 58
    2850:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendU8Data>
	LCD_SendIntegerData(lcdseconds[1]);
    2854:	8e 81       	ldd	r24, Y+6	; 0x06
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdseconds[0]);
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
}
    2868:	26 96       	adiw	r28, 0x06	; 6
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <updatedate>:
/*
 *Function To Update Date
 */

void updatedate()
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	if (g_days >= MAX_DAYS_PER_MONTHS)
    2882:	80 91 7a 01 	lds	r24, 0x017A
    2886:	8e 31       	cpi	r24, 0x1E	; 30
    2888:	78 f0       	brcs	.+30     	; 0x28a8 <updatedate+0x2e>
	{
		g_days = 1;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	80 93 7a 01 	sts	0x017A, r24
		g_months++; /* Increment Months Count */
    2890:	80 91 7b 01 	lds	r24, 0x017B
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	80 93 7b 01 	sts	0x017B, r24
		if (g_months >= MAX_MONTHS_PER_YEAR)
    289a:	80 91 7b 01 	lds	r24, 0x017B
    289e:	8c 30       	cpi	r24, 0x0C	; 12
    28a0:	18 f0       	brcs	.+6      	; 0x28a8 <updatedate+0x2e>
		{
			g_months = 1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	80 93 7b 01 	sts	0x017B, r24
		}
	}
}
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <displaydate>:

/*
 * Function To Display Date On LCD
 */
void displaydate()
{
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	28 97       	sbiw	r28, 0x08	; 8
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
	 * Variables To Display Date on LCD
	 */
	uint8 lcdday[2];
	uint8 lcdmonth[2];
	uint8 lcdyear[4];
	lcdday[0] = g_days % 10;
    28c2:	80 91 7a 01 	lds	r24, 0x017A
    28c6:	9a e0       	ldi	r25, 0x0A	; 10
    28c8:	69 2f       	mov	r22, r25
    28ca:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    28ce:	89 2f       	mov	r24, r25
    28d0:	89 83       	std	Y+1, r24	; 0x01
	lcdday[1] = g_days / 10;
    28d2:	80 91 7a 01 	lds	r24, 0x017A
    28d6:	9a e0       	ldi	r25, 0x0A	; 10
    28d8:	69 2f       	mov	r22, r25
    28da:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    28de:	8a 83       	std	Y+2, r24	; 0x02
	lcdmonth[0] = g_months % 10;
    28e0:	80 91 7b 01 	lds	r24, 0x017B
    28e4:	9a e0       	ldi	r25, 0x0A	; 10
    28e6:	69 2f       	mov	r22, r25
    28e8:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    28ec:	89 2f       	mov	r24, r25
    28ee:	8b 83       	std	Y+3, r24	; 0x03
	lcdmonth[1] = g_months / 10;
    28f0:	80 91 7b 01 	lds	r24, 0x017B
    28f4:	9a e0       	ldi	r25, 0x0A	; 10
    28f6:	69 2f       	mov	r22, r25
    28f8:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    28fc:	8c 83       	std	Y+4, r24	; 0x04
	lcdyear[0] = g_years % 10;
    28fe:	80 91 7c 01 	lds	r24, 0x017C
    2902:	9a e0       	ldi	r25, 0x0A	; 10
    2904:	69 2f       	mov	r22, r25
    2906:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    290a:	89 2f       	mov	r24, r25
    290c:	8d 83       	std	Y+5, r24	; 0x05
	lcdyear[1] = g_years / 10;
    290e:	80 91 7c 01 	lds	r24, 0x017C
    2912:	9a e0       	ldi	r25, 0x0A	; 10
    2914:	69 2f       	mov	r22, r25
    2916:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__udivmodqi4>
    291a:	8e 83       	std	Y+6, r24	; 0x06
	lcdyear[2] = 0;
    291c:	1f 82       	std	Y+7, r1	; 0x07
	lcdyear[3] = 2;
    291e:	82 e0       	ldi	r24, 0x02	; 2
    2920:	88 87       	std	Y+8, r24	; 0x08

	/* Shift LCD Cursor To Clock Location On LCD*/
	LCD_goToXY(2, 4);
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	64 e0       	ldi	r22, 0x04	; 4
    2926:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <LCD_goToXY>

	/* Display Date*/
	LCD_SendIntegerData(lcdday[1]);
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdday[0]);
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	88 2f       	mov	r24, r24
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendU8Data('-');
    293e:	8d e2       	ldi	r24, 0x2D	; 45
    2940:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendU8Data>
	LCD_SendIntegerData(lcdmonth[1]);
    2944:	8c 81       	ldd	r24, Y+4	; 0x04
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdmonth[0]);
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendU8Data('-');
    2958:	8d e2       	ldi	r24, 0x2D	; 45
    295a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendU8Data>
	LCD_SendIntegerData(lcdyear[3]);
    295e:	88 85       	ldd	r24, Y+8	; 0x08
    2960:	88 2f       	mov	r24, r24
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdyear[2]);
    2968:	8f 81       	ldd	r24, Y+7	; 0x07
    296a:	88 2f       	mov	r24, r24
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdyear[1]);
    2972:	8e 81       	ldd	r24, Y+6	; 0x06
    2974:	88 2f       	mov	r24, r24
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendIntegerData(lcdyear[0]);
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
}
    2986:	28 96       	adiw	r28, 0x08	; 8
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <__vector_1>:

static  void (*g_Int0Callback)(void) = NULL_PTR;
static  void (*g_Int1Callback)(void) = NULL_PTR;
static  void (*g_Int2Callback)(void) = NULL_PTR;

ISR(INT0_vect) {
    2998:	1f 92       	push	r1
    299a:	0f 92       	push	r0
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	0f 92       	push	r0
    29a0:	11 24       	eor	r1, r1
    29a2:	2f 93       	push	r18
    29a4:	3f 93       	push	r19
    29a6:	4f 93       	push	r20
    29a8:	5f 93       	push	r21
    29aa:	6f 93       	push	r22
    29ac:	7f 93       	push	r23
    29ae:	8f 93       	push	r24
    29b0:	9f 93       	push	r25
    29b2:	af 93       	push	r26
    29b4:	bf 93       	push	r27
    29b6:	ef 93       	push	r30
    29b8:	ff 93       	push	r31
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
	if (*g_Int0Callback != NULL_PTR)
    29c2:	80 91 c7 01 	lds	r24, 0x01C7
    29c6:	90 91 c8 01 	lds	r25, 0x01C8
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	29 f0       	breq	.+10     	; 0x29d8 <__vector_1+0x40>
	{
		(*g_Int0Callback)();
    29ce:	e0 91 c7 01 	lds	r30, 0x01C7
    29d2:	f0 91 c8 01 	lds	r31, 0x01C8
    29d6:	09 95       	icall
	}
}
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	ff 91       	pop	r31
    29de:	ef 91       	pop	r30
    29e0:	bf 91       	pop	r27
    29e2:	af 91       	pop	r26
    29e4:	9f 91       	pop	r25
    29e6:	8f 91       	pop	r24
    29e8:	7f 91       	pop	r23
    29ea:	6f 91       	pop	r22
    29ec:	5f 91       	pop	r21
    29ee:	4f 91       	pop	r20
    29f0:	3f 91       	pop	r19
    29f2:	2f 91       	pop	r18
    29f4:	0f 90       	pop	r0
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	0f 90       	pop	r0
    29fa:	1f 90       	pop	r1
    29fc:	18 95       	reti

000029fe <__vector_2>:
ISR(INT1_vect) {
    29fe:	1f 92       	push	r1
    2a00:	0f 92       	push	r0
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	0f 92       	push	r0
    2a06:	11 24       	eor	r1, r1
    2a08:	2f 93       	push	r18
    2a0a:	3f 93       	push	r19
    2a0c:	4f 93       	push	r20
    2a0e:	5f 93       	push	r21
    2a10:	6f 93       	push	r22
    2a12:	7f 93       	push	r23
    2a14:	8f 93       	push	r24
    2a16:	9f 93       	push	r25
    2a18:	af 93       	push	r26
    2a1a:	bf 93       	push	r27
    2a1c:	ef 93       	push	r30
    2a1e:	ff 93       	push	r31
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
	if (*g_Int1Callback != NULL_PTR)
    2a28:	80 91 c9 01 	lds	r24, 0x01C9
    2a2c:	90 91 ca 01 	lds	r25, 0x01CA
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	29 f0       	breq	.+10     	; 0x2a3e <__vector_2+0x40>
	{
		(*g_Int1Callback)();
    2a34:	e0 91 c9 01 	lds	r30, 0x01C9
    2a38:	f0 91 ca 01 	lds	r31, 0x01CA
    2a3c:	09 95       	icall
	}
}
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	ff 91       	pop	r31
    2a44:	ef 91       	pop	r30
    2a46:	bf 91       	pop	r27
    2a48:	af 91       	pop	r26
    2a4a:	9f 91       	pop	r25
    2a4c:	8f 91       	pop	r24
    2a4e:	7f 91       	pop	r23
    2a50:	6f 91       	pop	r22
    2a52:	5f 91       	pop	r21
    2a54:	4f 91       	pop	r20
    2a56:	3f 91       	pop	r19
    2a58:	2f 91       	pop	r18
    2a5a:	0f 90       	pop	r0
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	0f 90       	pop	r0
    2a60:	1f 90       	pop	r1
    2a62:	18 95       	reti

00002a64 <__vector_18>:
ISR(INT2_vect) {
    2a64:	1f 92       	push	r1
    2a66:	0f 92       	push	r0
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	0f 92       	push	r0
    2a6c:	11 24       	eor	r1, r1
    2a6e:	2f 93       	push	r18
    2a70:	3f 93       	push	r19
    2a72:	4f 93       	push	r20
    2a74:	5f 93       	push	r21
    2a76:	6f 93       	push	r22
    2a78:	7f 93       	push	r23
    2a7a:	8f 93       	push	r24
    2a7c:	9f 93       	push	r25
    2a7e:	af 93       	push	r26
    2a80:	bf 93       	push	r27
    2a82:	ef 93       	push	r30
    2a84:	ff 93       	push	r31
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
	if (*g_Int2Callback != NULL_PTR)
    2a8e:	80 91 cb 01 	lds	r24, 0x01CB
    2a92:	90 91 cc 01 	lds	r25, 0x01CC
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	29 f0       	breq	.+10     	; 0x2aa4 <__vector_18+0x40>
	{
		(*g_Int2Callback)();
    2a9a:	e0 91 cb 01 	lds	r30, 0x01CB
    2a9e:	f0 91 cc 01 	lds	r31, 0x01CC
    2aa2:	09 95       	icall
	}
}
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	ff 91       	pop	r31
    2aaa:	ef 91       	pop	r30
    2aac:	bf 91       	pop	r27
    2aae:	af 91       	pop	r26
    2ab0:	9f 91       	pop	r25
    2ab2:	8f 91       	pop	r24
    2ab4:	7f 91       	pop	r23
    2ab6:	6f 91       	pop	r22
    2ab8:	5f 91       	pop	r21
    2aba:	4f 91       	pop	r20
    2abc:	3f 91       	pop	r19
    2abe:	2f 91       	pop	r18
    2ac0:	0f 90       	pop	r0
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	0f 90       	pop	r0
    2ac6:	1f 90       	pop	r1
    2ac8:	18 95       	reti

00002aca <IU_GlobalInterruptEnable>:
void IU_GlobalInterruptEnable(void)
{
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,G_Interrupt_Enable_bit) ;
    2ad2:	af e5       	ldi	r26, 0x5F	; 95
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	ef e5       	ldi	r30, 0x5F	; 95
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	80 68       	ori	r24, 0x80	; 128
    2ade:	8c 93       	st	X, r24
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <IU_GlobalInterruptDisable>:

void IU_GlobalInterruptDisable(void)
{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,G_Interrupt_Enable_bit) ;
    2aee:	af e5       	ldi	r26, 0x5F	; 95
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	ef e5       	ldi	r30, 0x5F	; 95
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	8f 77       	andi	r24, 0x7F	; 127
    2afa:	8c 93       	st	X, r24
}
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <IU_ExternalInterruptEnable>:

void IU_ExternalInterruptEnable(const externalInterruptConfigChannel *Config_ptr){
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <IU_ExternalInterruptEnable+0x6>
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <IU_ExternalInterruptEnable+0x8>
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01

	if(NULL_PTR != Config_ptr)
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <IU_ExternalInterruptEnable+0x1a>
    2b1a:	1f c1       	rjmp	.+574    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
	{
		switch(Config_ptr->mode){
    2b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b20:	81 81       	ldd	r24, Z+1	; 0x01
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	3c 83       	std	Y+4, r19	; 0x04
    2b28:	2b 83       	std	Y+3, r18	; 0x03
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2e:	81 30       	cpi	r24, 0x01	; 1
    2b30:	91 05       	cpc	r25, r1
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <IU_ExternalInterruptEnable+0x34>
    2b34:	4e c0       	rjmp	.+156    	; 0x2bd2 <IU_ExternalInterruptEnable+0xd0>
    2b36:	2b 81       	ldd	r18, Y+3	; 0x03
    2b38:	3c 81       	ldd	r19, Y+4	; 0x04
    2b3a:	22 30       	cpi	r18, 0x02	; 2
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	2c f4       	brge	.+10     	; 0x2b4a <IU_ExternalInterruptEnable+0x48>
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	71 f0       	breq	.+28     	; 0x2b64 <IU_ExternalInterruptEnable+0x62>
    2b48:	08 c1       	rjmp	.+528    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
    2b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b4e:	22 30       	cpi	r18, 0x02	; 2
    2b50:	31 05       	cpc	r19, r1
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <IU_ExternalInterruptEnable+0x54>
    2b54:	75 c0       	rjmp	.+234    	; 0x2c40 <IU_ExternalInterruptEnable+0x13e>
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	83 30       	cpi	r24, 0x03	; 3
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <IU_ExternalInterruptEnable+0x60>
    2b60:	ba c0       	rjmp	.+372    	; 0x2cd6 <IU_ExternalInterruptEnable+0x1d4>
    2b62:	fb c0       	rjmp	.+502    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
		case low:
		{
			if (E_INT0 ==Config_ptr->interrupt_pin)
    2b64:	e9 81       	ldd	r30, Y+1	; 0x01
    2b66:	fa 81       	ldd	r31, Y+2	; 0x02
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 23       	and	r24, r24
    2b6c:	b1 f4       	brne	.+44     	; 0x2b9a <IU_ExternalInterruptEnable+0x98>
			{
				SET_BIT(GICR,INT0_pin) ;
    2b6e:	ab e5       	ldi	r26, 0x5B	; 91
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	eb e5       	ldi	r30, 0x5B	; 91
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	80 64       	ori	r24, 0x40	; 64
    2b7a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC00) ;
    2b7c:	a5 e5       	ldi	r26, 0x55	; 85
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e5 e5       	ldi	r30, 0x55	; 85
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8e 7f       	andi	r24, 0xFE	; 254
    2b88:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC01) ;
    2b8a:	a5 e5       	ldi	r26, 0x55	; 85
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	e5 e5       	ldi	r30, 0x55	; 85
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	8d 7f       	andi	r24, 0xFD	; 253
    2b96:	8c 93       	st	X, r24
    2b98:	e0 c0       	rjmp	.+448    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			}
			else if (E_INT1 ==Config_ptr->interrupt_pin)
    2b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9e:	80 81       	ld	r24, Z
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <IU_ExternalInterruptEnable+0xa4>
    2ba4:	da c0       	rjmp	.+436    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			{
				SET_BIT(GICR,INT1_pin) ;
    2ba6:	ab e5       	ldi	r26, 0x5B	; 91
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	eb e5       	ldi	r30, 0x5B	; 91
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	80 68       	ori	r24, 0x80	; 128
    2bb2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC10) ;
    2bb4:	a5 e5       	ldi	r26, 0x55	; 85
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e5 e5       	ldi	r30, 0x55	; 85
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8b 7f       	andi	r24, 0xFB	; 251
    2bc0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11) ;
    2bc2:	a5 e5       	ldi	r26, 0x55	; 85
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e5 e5       	ldi	r30, 0x55	; 85
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	87 7f       	andi	r24, 0xF7	; 247
    2bce:	8c 93       	st	X, r24
    2bd0:	c4 c0       	rjmp	.+392    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			}
		}break ;

		case logicalChange:
		{
			if (E_INT0 == Config_ptr->interrupt_pin)
    2bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd6:	80 81       	ld	r24, Z
    2bd8:	88 23       	and	r24, r24
    2bda:	b1 f4       	brne	.+44     	; 0x2c08 <IU_ExternalInterruptEnable+0x106>
			{
				SET_BIT(GICR,INT0_pin);
    2bdc:	ab e5       	ldi	r26, 0x5B	; 91
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	eb e5       	ldi	r30, 0x5B	; 91
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	80 64       	ori	r24, 0x40	; 64
    2be8:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC00);
    2bea:	a5 e5       	ldi	r26, 0x55	; 85
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e5 e5       	ldi	r30, 0x55	; 85
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	81 60       	ori	r24, 0x01	; 1
    2bf6:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC01);
    2bf8:	a5 e5       	ldi	r26, 0x55	; 85
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e5 e5       	ldi	r30, 0x55	; 85
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	8d 7f       	andi	r24, 0xFD	; 253
    2c04:	8c 93       	st	X, r24
    2c06:	a9 c0       	rjmp	.+338    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			}
			else if (E_INT1 == Config_ptr->interrupt_pin)
    2c08:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0c:	80 81       	ld	r24, Z
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <IU_ExternalInterruptEnable+0x112>
    2c12:	a3 c0       	rjmp	.+326    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			{
				SET_BIT(GICR,INT1_pin);
    2c14:	ab e5       	ldi	r26, 0x5B	; 91
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	eb e5       	ldi	r30, 0x5B	; 91
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	80 68       	ori	r24, 0x80	; 128
    2c20:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC10) ;
    2c22:	a5 e5       	ldi	r26, 0x55	; 85
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e5 e5       	ldi	r30, 0x55	; 85
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	84 60       	ori	r24, 0x04	; 4
    2c2e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11) ;
    2c30:	a5 e5       	ldi	r26, 0x55	; 85
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e5 e5       	ldi	r30, 0x55	; 85
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	87 7f       	andi	r24, 0xF7	; 247
    2c3c:	8c 93       	st	X, r24
    2c3e:	8d c0       	rjmp	.+282    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>

		}break;

		case FallingEdge:
		{
			if (E_INT0 == Config_ptr->interrupt_pin)
    2c40:	e9 81       	ldd	r30, Y+1	; 0x01
    2c42:	fa 81       	ldd	r31, Y+2	; 0x02
    2c44:	80 81       	ld	r24, Z
    2c46:	88 23       	and	r24, r24
    2c48:	b1 f4       	brne	.+44     	; 0x2c76 <IU_ExternalInterruptEnable+0x174>
			{
				SET_BIT(GICR, INT0_pin);
    2c4a:	ab e5       	ldi	r26, 0x5B	; 91
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	eb e5       	ldi	r30, 0x5B	; 91
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	80 64       	ori	r24, 0x40	; 64
    2c56:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC00);
    2c58:	a5 e5       	ldi	r26, 0x55	; 85
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	e5 e5       	ldi	r30, 0x55	; 85
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	8e 7f       	andi	r24, 0xFE	; 254
    2c64:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
    2c66:	a5 e5       	ldi	r26, 0x55	; 85
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e5 e5       	ldi	r30, 0x55	; 85
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	82 60       	ori	r24, 0x02	; 2
    2c72:	8c 93       	st	X, r24
    2c74:	72 c0       	rjmp	.+228    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			}
			else if (E_INT1 == Config_ptr->interrupt_pin)
    2c76:	e9 81       	ldd	r30, Y+1	; 0x01
    2c78:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7a:	80 81       	ld	r24, Z
    2c7c:	81 30       	cpi	r24, 0x01	; 1
    2c7e:	b1 f4       	brne	.+44     	; 0x2cac <IU_ExternalInterruptEnable+0x1aa>
			{
				SET_BIT(GICR, INT1_pin);
    2c80:	ab e5       	ldi	r26, 0x5B	; 91
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	eb e5       	ldi	r30, 0x5B	; 91
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	80 68       	ori	r24, 0x80	; 128
    2c8c:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC10) ;
    2c8e:	a5 e5       	ldi	r26, 0x55	; 85
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e5 e5       	ldi	r30, 0x55	; 85
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	8b 7f       	andi	r24, 0xFB	; 251
    2c9a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11) ;
    2c9c:	a5 e5       	ldi	r26, 0x55	; 85
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e5 e5       	ldi	r30, 0x55	; 85
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	88 60       	ori	r24, 0x08	; 8
    2ca8:	8c 93       	st	X, r24
    2caa:	57 c0       	rjmp	.+174    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			}
			else if (E_INT2 == Config_ptr->interrupt_pin)
    2cac:	e9 81       	ldd	r30, Y+1	; 0x01
    2cae:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb0:	80 81       	ld	r24, Z
    2cb2:	82 30       	cpi	r24, 0x02	; 2
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <IU_ExternalInterruptEnable+0x1b6>
    2cb6:	51 c0       	rjmp	.+162    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			{
				SET_BIT(GICR,INT2_pin);
    2cb8:	ab e5       	ldi	r26, 0x5B	; 91
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	eb e5       	ldi	r30, 0x5B	; 91
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	80 62       	ori	r24, 0x20	; 32
    2cc4:	8c 93       	st	X, r24
				CLR_BIT(MCUCSR,ISC2) ;
    2cc6:	a4 e5       	ldi	r26, 0x54	; 84
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e4 e5       	ldi	r30, 0x54	; 84
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	8f 7b       	andi	r24, 0xBF	; 191
    2cd2:	8c 93       	st	X, r24
    2cd4:	42 c0       	rjmp	.+132    	; 0x2d5a <IU_ExternalInterruptEnable+0x258>

		}break ;

		case RisingEdge:
		{
			if (E_INT0 == Config_ptr->interrupt_pin)
    2cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cda:	80 81       	ld	r24, Z
    2cdc:	88 23       	and	r24, r24
    2cde:	b1 f4       	brne	.+44     	; 0x2d0c <IU_ExternalInterruptEnable+0x20a>
			{
				SET_BIT(GICR, INT0_pin);
    2ce0:	ab e5       	ldi	r26, 0x5B	; 91
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	eb e5       	ldi	r30, 0x5B	; 91
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	80 64       	ori	r24, 0x40	; 64
    2cec:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01) ;
    2cee:	a5 e5       	ldi	r26, 0x55	; 85
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e5 e5       	ldi	r30, 0x55	; 85
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	82 60       	ori	r24, 0x02	; 2
    2cfa:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01) ;
    2cfc:	a5 e5       	ldi	r26, 0x55	; 85
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e5 e5       	ldi	r30, 0x55	; 85
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	82 60       	ori	r24, 0x02	; 2
    2d08:	8c 93       	st	X, r24
    2d0a:	27 c0       	rjmp	.+78     	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			}
			else if (E_INT1 == Config_ptr->interrupt_pin)
    2d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d10:	80 81       	ld	r24, Z
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	b1 f4       	brne	.+44     	; 0x2d42 <IU_ExternalInterruptEnable+0x240>
			{
				SET_BIT(GICR,INT1_pin);
    2d16:	ab e5       	ldi	r26, 0x5B	; 91
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	eb e5       	ldi	r30, 0x5B	; 91
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 68       	ori	r24, 0x80	; 128
    2d22:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC10) ;
    2d24:	a5 e5       	ldi	r26, 0x55	; 85
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	e5 e5       	ldi	r30, 0x55	; 85
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	84 60       	ori	r24, 0x04	; 4
    2d30:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11) ;
    2d32:	a5 e5       	ldi	r26, 0x55	; 85
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	e5 e5       	ldi	r30, 0x55	; 85
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	88 60       	ori	r24, 0x08	; 8
    2d3e:	8c 93       	st	X, r24
    2d40:	0c c0       	rjmp	.+24     	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			}
			else if (E_INT2 == Config_ptr->interrupt_pin)
    2d42:	e9 81       	ldd	r30, Y+1	; 0x01
    2d44:	fa 81       	ldd	r31, Y+2	; 0x02
    2d46:	80 81       	ld	r24, Z
    2d48:	82 30       	cpi	r24, 0x02	; 2
    2d4a:	39 f4       	brne	.+14     	; 0x2d5a <IU_ExternalInterruptEnable+0x258>
			{
				SET_BIT(MCUCSR,ISC2) ;
    2d4c:	a4 e5       	ldi	r26, 0x54	; 84
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e4 e5       	ldi	r30, 0x54	; 84
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	80 64       	ori	r24, 0x40	; 64
    2d58:	8c 93       	st	X, r24
	{
		/*NO Action Required */

	}

}
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <IU_ExternalInt0_setCallback>:
void IU_ExternalInt0_setCallback(void (*a_ptr)(void)) {
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <IU_ExternalInt0_setCallback+0x6>
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
	if (NULL_PTR != a_ptr)
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	31 f0       	breq	.+12     	; 0x2d8a <IU_ExternalInt0_setCallback+0x22>
	{
		g_Int0Callback = a_ptr;
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	90 93 c8 01 	sts	0x01C8, r25
    2d86:	80 93 c7 01 	sts	0x01C7, r24
	}
}
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <IU_ExternalInt1_setCallback>:
void IU_ExternalInt1_setCallback(void (*a_ptr)(void)) {
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <IU_ExternalInt1_setCallback+0x6>
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	9a 83       	std	Y+2, r25	; 0x02
    2da0:	89 83       	std	Y+1, r24	; 0x01
	if (NULL_PTR != a_ptr)
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	31 f0       	breq	.+12     	; 0x2db6 <IU_ExternalInt1_setCallback+0x22>
	{
		g_Int1Callback = a_ptr;
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	90 93 ca 01 	sts	0x01CA, r25
    2db2:	80 93 c9 01 	sts	0x01C9, r24
	}
}
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <IU_ExternalInt2_setCallback>:
void IU_ExternalInt2_setCallback(void (*a_ptr)(void)) {
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <IU_ExternalInt2_setCallback+0x6>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
	if (NULL_PTR != a_ptr)
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	31 f0       	breq	.+12     	; 0x2de2 <IU_ExternalInt2_setCallback+0x22>
	{
		g_Int2Callback = a_ptr;
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	90 93 cc 01 	sts	0x01CC, r25
    2dde:	80 93 cb 01 	sts	0x01CB, r24
	}
}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <main>:
#include "main.h"
#include "Os.h"

int main(int argc, char **argv) {
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <main+0x6>
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <main+0x8>
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	7c 83       	std	Y+4, r23	; 0x04
    2dfe:	6b 83       	std	Y+3, r22	; 0x03
	/* Start the Os */
	Os_start();
    2e00:	0e 94 95 11 	call	0x232a	; 0x232a <Os_start>
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	90 e0       	ldi	r25, 0x00	; 0
}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <get_portID>:
static uint8 port_status = PORT_NOT_INITIALIZED;
static const Port_ConfigChannel *configured_ports = NULL_PTR;



static Port_PortType get_portID(Port_PinType pin){
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <get_portID+0x6>
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	8a 83       	std	Y+2, r24	; 0x02
	Port_PortType port_id ;
	if ((pin >= PORT_A_START) && (pin <= PORT_A_FINISH))
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	88 30       	cpi	r24, 0x08	; 8
    2e26:	10 f4       	brcc	.+4      	; 0x2e2c <get_portID+0x16>
	{
		port_id = PORTA_ID;
    2e28:	19 82       	std	Y+1, r1	; 0x01
    2e2a:	1a c0       	rjmp	.+52     	; 0x2e60 <get_portID+0x4a>
	}
	else if ((pin >= PORT_B_START) && (pin <= PORT_B_FINISH))
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	88 30       	cpi	r24, 0x08	; 8
    2e30:	30 f0       	brcs	.+12     	; 0x2e3e <get_portID+0x28>
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	80 31       	cpi	r24, 0x10	; 16
    2e36:	18 f4       	brcc	.+6      	; 0x2e3e <get_portID+0x28>
	{
		port_id = PORTB_ID;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	11 c0       	rjmp	.+34     	; 0x2e60 <get_portID+0x4a>
	}
	else if ((pin >= PORT_C_START) && (pin <= PORT_C_FINISH))
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	80 31       	cpi	r24, 0x10	; 16
    2e42:	30 f0       	brcs	.+12     	; 0x2e50 <get_portID+0x3a>
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	88 31       	cpi	r24, 0x18	; 24
    2e48:	18 f4       	brcc	.+6      	; 0x2e50 <get_portID+0x3a>
	{
		port_id = PORTC_ID;
    2e4a:	82 e0       	ldi	r24, 0x02	; 2
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	08 c0       	rjmp	.+16     	; 0x2e60 <get_portID+0x4a>
	}
	else if ((pin >= PORT_D_START) && (pin <= PORT_D_FINISH))
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	88 31       	cpi	r24, 0x18	; 24
    2e54:	28 f0       	brcs	.+10     	; 0x2e60 <get_portID+0x4a>
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	80 32       	cpi	r24, 0x20	; 32
    2e5a:	10 f4       	brcc	.+4      	; 0x2e60 <get_portID+0x4a>
	{
		port_id = PORTD_ID;
    2e5c:	83 e0       	ldi	r24, 0x03	; 3
    2e5e:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	return port_id;
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <get_pinID>:


static Port_PinType get_pinID(Port_PinType pin){
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <get_pinID+0x6>
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	8a 83       	std	Y+2, r24	; 0x02
	Port_PinType pin_id ;
	pin_id = (Port_PortType) pin% PINS_PER_PORT ;
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	87 70       	andi	r24, 0x07	; 7
    2e7c:	89 83       	std	Y+1, r24	; 0x01
	return pin_id;
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <Port_Init>:


void Port_Init(const Port_ConfigType *ConfigPtr) {
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	2c 97       	sbiw	r28, 0x0c	; 12
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	9a 87       	std	Y+10, r25	; 0x0a
    2ea0:	89 87       	std	Y+9, r24	; 0x09
	Port_PortType *port_ptr;

	Port_PortType local_port;
	Port_PinType local_pin;

	boolean error = FALSE;
    2ea2:	1a 82       	std	Y+2, r1	; 0x02

	/*Error Checking */
	if (NULL_PTR == ConfigPtr)
    2ea4:	89 85       	ldd	r24, Y+9	; 0x09
    2ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	11 f4       	brne	.+4      	; 0x2eb0 <Port_Init+0x26>
	{
		/* report Null pointer error */
		error = TRUE;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	8a 83       	std	Y+2, r24	; 0x02
	{
		/* no action required */
	}


	if (FALSE == error)
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	88 23       	and	r24, r24
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <Port_Init+0x2e>
    2eb6:	6f c1       	rjmp	.+734    	; 0x3196 <Port_Init+0x30c>
	{
		configured_ports = ConfigPtr->port_channels;
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	90 93 cf 01 	sts	0x01CF, r25
    2ec0:	80 93 ce 01 	sts	0x01CE, r24

		for (uint8 itr = 0; itr < PORT_CONFIGURED_CHANNELS; itr++) {
    2ec4:	19 82       	std	Y+1, r1	; 0x01
    2ec6:	60 c1       	rjmp	.+704    	; 0x3188 <Port_Init+0x2fe>
			local_port = get_portID(configured_ports[itr].pin_num);
    2ec8:	40 91 ce 01 	lds	r20, 0x01CE
    2ecc:	50 91 cf 01 	lds	r21, 0x01CF
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	c9 01       	movw	r24, r18
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	82 0f       	add	r24, r18
    2ee2:	93 1f       	adc	r25, r19
    2ee4:	fa 01       	movw	r30, r20
    2ee6:	e8 0f       	add	r30, r24
    2ee8:	f9 1f       	adc	r31, r25
    2eea:	81 81       	ldd	r24, Z+1	; 0x01
    2eec:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <get_portID>
    2ef0:	8c 83       	std	Y+4, r24	; 0x04
			switch (local_port)
    2ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	3c 87       	std	Y+12, r19	; 0x0c
    2efa:	2b 87       	std	Y+11, r18	; 0x0b
    2efc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2efe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f00:	81 30       	cpi	r24, 0x01	; 1
    2f02:	91 05       	cpc	r25, r1
    2f04:	f1 f0       	breq	.+60     	; 0x2f42 <Port_Init+0xb8>
    2f06:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f08:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f0a:	22 30       	cpi	r18, 0x02	; 2
    2f0c:	31 05       	cpc	r19, r1
    2f0e:	2c f4       	brge	.+10     	; 0x2f1a <Port_Init+0x90>
    2f10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f12:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	61 f0       	breq	.+24     	; 0x2f30 <Port_Init+0xa6>
    2f18:	2e c0       	rjmp	.+92     	; 0x2f76 <Port_Init+0xec>
    2f1a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f1c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f1e:	22 30       	cpi	r18, 0x02	; 2
    2f20:	31 05       	cpc	r19, r1
    2f22:	c1 f0       	breq	.+48     	; 0x2f54 <Port_Init+0xca>
    2f24:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f26:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f28:	83 30       	cpi	r24, 0x03	; 3
    2f2a:	91 05       	cpc	r25, r1
    2f2c:	e1 f0       	breq	.+56     	; 0x2f66 <Port_Init+0xdc>
    2f2e:	23 c0       	rjmp	.+70     	; 0x2f76 <Port_Init+0xec>
			{

			case PORTA_ID:
				DDR_ptr  = &DDRA_REG;
    2f30:	8a e3       	ldi	r24, 0x3A	; 58
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	98 87       	std	Y+8, r25	; 0x08
    2f36:	8f 83       	std	Y+7, r24	; 0x07
				port_ptr = &PORTA_REG;
    2f38:	8b e3       	ldi	r24, 0x3B	; 59
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	9e 83       	std	Y+6, r25	; 0x06
    2f3e:	8d 83       	std	Y+5, r24	; 0x05
    2f40:	1a c0       	rjmp	.+52     	; 0x2f76 <Port_Init+0xec>
				break;

			case PORTB_ID:
				DDR_ptr = &DDRB_REG;
    2f42:	87 e3       	ldi	r24, 0x37	; 55
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	98 87       	std	Y+8, r25	; 0x08
    2f48:	8f 83       	std	Y+7, r24	; 0x07
				port_ptr = &PORTB_REG;
    2f4a:	88 e3       	ldi	r24, 0x38	; 56
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	11 c0       	rjmp	.+34     	; 0x2f76 <Port_Init+0xec>
				break;

			case PORTC_ID:
				DDR_ptr = &DDRC_REG;
    2f54:	84 e3       	ldi	r24, 0x34	; 52
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	98 87       	std	Y+8, r25	; 0x08
    2f5a:	8f 83       	std	Y+7, r24	; 0x07
				port_ptr = &PORTC_REG;
    2f5c:	85 e3       	ldi	r24, 0x35	; 53
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	9e 83       	std	Y+6, r25	; 0x06
    2f62:	8d 83       	std	Y+5, r24	; 0x05
    2f64:	08 c0       	rjmp	.+16     	; 0x2f76 <Port_Init+0xec>
				break;

			case PORTD_ID:
				DDR_ptr = &DDRD_REG;
    2f66:	81 e3       	ldi	r24, 0x31	; 49
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	98 87       	std	Y+8, r25	; 0x08
    2f6c:	8f 83       	std	Y+7, r24	; 0x07
				port_ptr = &PORTD_REG;
    2f6e:	82 e3       	ldi	r24, 0x32	; 50
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
				break;
			}
			local_pin  = get_pinID(configured_ports[itr].pin_num) ;
    2f76:	40 91 ce 01 	lds	r20, 0x01CE
    2f7a:	50 91 cf 01 	lds	r21, 0x01CF
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	28 2f       	mov	r18, r24
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	c9 01       	movw	r24, r18
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	88 0f       	add	r24, r24
    2f8c:	99 1f       	adc	r25, r25
    2f8e:	82 0f       	add	r24, r18
    2f90:	93 1f       	adc	r25, r19
    2f92:	fa 01       	movw	r30, r20
    2f94:	e8 0f       	add	r30, r24
    2f96:	f9 1f       	adc	r31, r25
    2f98:	81 81       	ldd	r24, Z+1	; 0x01
    2f9a:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <get_pinID>
    2f9e:	8b 83       	std	Y+3, r24	; 0x03

			if (PORT_PIN_OUT == configured_ports[itr].direction)
    2fa0:	40 91 ce 01 	lds	r20, 0x01CE
    2fa4:	50 91 cf 01 	lds	r21, 0x01CF
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	c9 01       	movw	r24, r18
    2fb0:	88 0f       	add	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	82 0f       	add	r24, r18
    2fba:	93 1f       	adc	r25, r19
    2fbc:	fa 01       	movw	r30, r20
    2fbe:	e8 0f       	add	r30, r24
    2fc0:	f9 1f       	adc	r31, r25
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	81 30       	cpi	r24, 0x01	; 1
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <Port_Init+0x140>
    2fc8:	64 c0       	rjmp	.+200    	; 0x3092 <Port_Init+0x208>
			{
				SET_BIT(*DDR_ptr,local_pin);
    2fca:	ef 81       	ldd	r30, Y+7	; 0x07
    2fcc:	f8 85       	ldd	r31, Y+8	; 0x08
    2fce:	80 81       	ld	r24, Z
    2fd0:	48 2f       	mov	r20, r24
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <Port_Init+0x158>
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	2a 95       	dec	r18
    2fe4:	e2 f7       	brpl	.-8      	; 0x2fde <Port_Init+0x154>
    2fe6:	84 2b       	or	r24, r20
    2fe8:	ef 81       	ldd	r30, Y+7	; 0x07
    2fea:	f8 85       	ldd	r31, Y+8	; 0x08
    2fec:	80 83       	st	Z, r24

				if (initial_Low == configured_ports[itr].pin_out_mode)
    2fee:	40 91 ce 01 	lds	r20, 0x01CE
    2ff2:	50 91 cf 01 	lds	r21, 0x01CF
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	c9 01       	movw	r24, r18
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	82 0f       	add	r24, r18
    3008:	93 1f       	adc	r25, r19
    300a:	fa 01       	movw	r30, r20
    300c:	e8 0f       	add	r30, r24
    300e:	f9 1f       	adc	r31, r25
    3010:	84 81       	ldd	r24, Z+4	; 0x04
    3012:	88 23       	and	r24, r24
    3014:	a9 f4       	brne	.+42     	; 0x3040 <Port_Init+0x1b6>
				{
					CLR_BIT(*port_ptr,local_pin);
    3016:	ed 81       	ldd	r30, Y+5	; 0x05
    3018:	fe 81       	ldd	r31, Y+6	; 0x06
    301a:	80 81       	ld	r24, Z
    301c:	48 2f       	mov	r20, r24
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	02 2e       	mov	r0, r18
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <Port_Init+0x1a6>
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	0a 94       	dec	r0
    3032:	e2 f7       	brpl	.-8      	; 0x302c <Port_Init+0x1a2>
    3034:	80 95       	com	r24
    3036:	84 23       	and	r24, r20
    3038:	ed 81       	ldd	r30, Y+5	; 0x05
    303a:	fe 81       	ldd	r31, Y+6	; 0x06
    303c:	80 83       	st	Z, r24
    303e:	a1 c0       	rjmp	.+322    	; 0x3182 <Port_Init+0x2f8>

				}
				else if (initial_High == configured_ports[itr].direction)
    3040:	40 91 ce 01 	lds	r20, 0x01CE
    3044:	50 91 cf 01 	lds	r21, 0x01CF
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	c9 01       	movw	r24, r18
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	82 0f       	add	r24, r18
    305a:	93 1f       	adc	r25, r19
    305c:	fa 01       	movw	r30, r20
    305e:	e8 0f       	add	r30, r24
    3060:	f9 1f       	adc	r31, r25
    3062:	82 81       	ldd	r24, Z+2	; 0x02
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	09 f0       	breq	.+2      	; 0x306a <Port_Init+0x1e0>
    3068:	8c c0       	rjmp	.+280    	; 0x3182 <Port_Init+0x2f8>
				{
					SET_BIT(*port_ptr,local_pin);
    306a:	ed 81       	ldd	r30, Y+5	; 0x05
    306c:	fe 81       	ldd	r31, Y+6	; 0x06
    306e:	80 81       	ld	r24, Z
    3070:	48 2f       	mov	r20, r24
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	02 2e       	mov	r0, r18
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <Port_Init+0x1fa>
    3080:	88 0f       	add	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	0a 94       	dec	r0
    3086:	e2 f7       	brpl	.-8      	; 0x3080 <Port_Init+0x1f6>
    3088:	84 2b       	or	r24, r20
    308a:	ed 81       	ldd	r30, Y+5	; 0x05
    308c:	fe 81       	ldd	r31, Y+6	; 0x06
    308e:	80 83       	st	Z, r24
    3090:	78 c0       	rjmp	.+240    	; 0x3182 <Port_Init+0x2f8>
				{

				}

			}
			else if (PORT_PIN_IN == configured_ports[itr].direction)
    3092:	40 91 ce 01 	lds	r20, 0x01CE
    3096:	50 91 cf 01 	lds	r21, 0x01CF
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	c9 01       	movw	r24, r18
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	82 0f       	add	r24, r18
    30ac:	93 1f       	adc	r25, r19
    30ae:	fa 01       	movw	r30, r20
    30b0:	e8 0f       	add	r30, r24
    30b2:	f9 1f       	adc	r31, r25
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	88 23       	and	r24, r24
    30b8:	09 f0       	breq	.+2      	; 0x30bc <Port_Init+0x232>
    30ba:	63 c0       	rjmp	.+198    	; 0x3182 <Port_Init+0x2f8>
			{
				CLR_BIT(*DDR_ptr,local_pin);
    30bc:	ef 81       	ldd	r30, Y+7	; 0x07
    30be:	f8 85       	ldd	r31, Y+8	; 0x08
    30c0:	80 81       	ld	r24, Z
    30c2:	48 2f       	mov	r20, r24
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	28 2f       	mov	r18, r24
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <Port_Init+0x24a>
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	2a 95       	dec	r18
    30d6:	e2 f7       	brpl	.-8      	; 0x30d0 <Port_Init+0x246>
    30d8:	80 95       	com	r24
    30da:	84 23       	and	r24, r20
    30dc:	ef 81       	ldd	r30, Y+7	; 0x07
    30de:	f8 85       	ldd	r31, Y+8	; 0x08
    30e0:	80 83       	st	Z, r24

				if (Disable_Pull_up == configured_ports[itr].pin_in_mode)
    30e2:	40 91 ce 01 	lds	r20, 0x01CE
    30e6:	50 91 cf 01 	lds	r21, 0x01CF
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	28 2f       	mov	r18, r24
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	c9 01       	movw	r24, r18
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	82 0f       	add	r24, r18
    30fc:	93 1f       	adc	r25, r19
    30fe:	fa 01       	movw	r30, r20
    3100:	e8 0f       	add	r30, r24
    3102:	f9 1f       	adc	r31, r25
    3104:	83 81       	ldd	r24, Z+3	; 0x03
    3106:	88 23       	and	r24, r24
    3108:	a9 f4       	brne	.+42     	; 0x3134 <Port_Init+0x2aa>
				{
					CLR_BIT(*port_ptr,local_pin);
    310a:	ed 81       	ldd	r30, Y+5	; 0x05
    310c:	fe 81       	ldd	r31, Y+6	; 0x06
    310e:	80 81       	ld	r24, Z
    3110:	48 2f       	mov	r20, r24
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	02 2e       	mov	r0, r18
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <Port_Init+0x29a>
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	0a 94       	dec	r0
    3126:	e2 f7       	brpl	.-8      	; 0x3120 <Port_Init+0x296>
    3128:	80 95       	com	r24
    312a:	84 23       	and	r24, r20
    312c:	ed 81       	ldd	r30, Y+5	; 0x05
    312e:	fe 81       	ldd	r31, Y+6	; 0x06
    3130:	80 83       	st	Z, r24
    3132:	27 c0       	rjmp	.+78     	; 0x3182 <Port_Init+0x2f8>
				}
				else if (Enable_Pull_up== configured_ports[itr].pin_in_mode)
    3134:	40 91 ce 01 	lds	r20, 0x01CE
    3138:	50 91 cf 01 	lds	r21, 0x01CF
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	c9 01       	movw	r24, r18
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	82 0f       	add	r24, r18
    314e:	93 1f       	adc	r25, r19
    3150:	fa 01       	movw	r30, r20
    3152:	e8 0f       	add	r30, r24
    3154:	f9 1f       	adc	r31, r25
    3156:	83 81       	ldd	r24, Z+3	; 0x03
    3158:	81 30       	cpi	r24, 0x01	; 1
    315a:	99 f4       	brne	.+38     	; 0x3182 <Port_Init+0x2f8>
				{
					SET_BIT(*port_ptr,local_pin);
    315c:	ed 81       	ldd	r30, Y+5	; 0x05
    315e:	fe 81       	ldd	r31, Y+6	; 0x06
    3160:	80 81       	ld	r24, Z
    3162:	48 2f       	mov	r20, r24
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	02 2e       	mov	r0, r18
    3170:	02 c0       	rjmp	.+4      	; 0x3176 <Port_Init+0x2ec>
    3172:	88 0f       	add	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	0a 94       	dec	r0
    3178:	e2 f7       	brpl	.-8      	; 0x3172 <Port_Init+0x2e8>
    317a:	84 2b       	or	r24, r20
    317c:	ed 81       	ldd	r30, Y+5	; 0x05
    317e:	fe 81       	ldd	r31, Y+6	; 0x06
    3180:	80 83       	st	Z, r24

	if (FALSE == error)
	{
		configured_ports = ConfigPtr->port_channels;

		for (uint8 itr = 0; itr < PORT_CONFIGURED_CHANNELS; itr++) {
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	8f 5f       	subi	r24, 0xFF	; 255
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	85 30       	cpi	r24, 0x05	; 5
    318c:	08 f4       	brcc	.+2      	; 0x3190 <Port_Init+0x306>
    318e:	9c ce       	rjmp	.-712    	; 0x2ec8 <Port_Init+0x3e>

			}

		}//end  loop

		port_status = PORT_INITIALIZED;
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	80 93 cd 01 	sts	0x01CD, r24
	else
	{
		/* no action required */
	}

}
    3196:	2c 96       	adiw	r28, 0x0c	; 12
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <updatetemp>:

/*
 * Function To Update Temperature
 */
void updatetemp()
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
	g_temp = LM35_ReadTemp();
    31b0:	0e 94 32 11 	call	0x2264	; 0x2264 <LM35_ReadTemp>
    31b4:	90 93 d1 01 	sts	0x01D1, r25
    31b8:	80 93 d0 01 	sts	0x01D0, r24
}
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <displaytemp>:

/*
 * Function To Display Temperature On LCD
 */
void displaytemp()
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Shift LCD cursor To Temperature Location On LCD
	 */
	LCD_goToXY(3, 4);
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	64 e0       	ldi	r22, 0x04	; 4
    31ce:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <LCD_goToXY>

	/*
	 * Display Temperature
	 */
	LCD_SendString("temp :");
    31d2:	80 e6       	ldi	r24, 0x60	; 96
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_SendString>
	LCD_SendIntegerData(g_temp);
    31da:	80 91 d0 01 	lds	r24, 0x01D0
    31de:	90 91 d1 01 	lds	r25, 0x01D1
    31e2:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_SendIntegerData>
	LCD_SendU8Data(0xDF);
    31e6:	8f ed       	ldi	r24, 0xDF	; 223
    31e8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendU8Data>
	LCD_SendString("C");
    31ec:	87 e6       	ldi	r24, 0x67	; 103
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_SendString>
}
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <__udivmodqi4>:
    31fa:	99 1b       	sub	r25, r25
    31fc:	79 e0       	ldi	r23, 0x09	; 9
    31fe:	04 c0       	rjmp	.+8      	; 0x3208 <__udivmodqi4_ep>

00003200 <__udivmodqi4_loop>:
    3200:	99 1f       	adc	r25, r25
    3202:	96 17       	cp	r25, r22
    3204:	08 f0       	brcs	.+2      	; 0x3208 <__udivmodqi4_ep>
    3206:	96 1b       	sub	r25, r22

00003208 <__udivmodqi4_ep>:
    3208:	88 1f       	adc	r24, r24
    320a:	7a 95       	dec	r23
    320c:	c9 f7       	brne	.-14     	; 0x3200 <__udivmodqi4_loop>
    320e:	80 95       	com	r24
    3210:	08 95       	ret

00003212 <__divmodhi4>:
    3212:	97 fb       	bst	r25, 7
    3214:	09 2e       	mov	r0, r25
    3216:	07 26       	eor	r0, r23
    3218:	0a d0       	rcall	.+20     	; 0x322e <__divmodhi4_neg1>
    321a:	77 fd       	sbrc	r23, 7
    321c:	04 d0       	rcall	.+8      	; 0x3226 <__divmodhi4_neg2>
    321e:	0c d0       	rcall	.+24     	; 0x3238 <__udivmodhi4>
    3220:	06 d0       	rcall	.+12     	; 0x322e <__divmodhi4_neg1>
    3222:	00 20       	and	r0, r0
    3224:	1a f4       	brpl	.+6      	; 0x322c <__divmodhi4_exit>

00003226 <__divmodhi4_neg2>:
    3226:	70 95       	com	r23
    3228:	61 95       	neg	r22
    322a:	7f 4f       	sbci	r23, 0xFF	; 255

0000322c <__divmodhi4_exit>:
    322c:	08 95       	ret

0000322e <__divmodhi4_neg1>:
    322e:	f6 f7       	brtc	.-4      	; 0x322c <__divmodhi4_exit>
    3230:	90 95       	com	r25
    3232:	81 95       	neg	r24
    3234:	9f 4f       	sbci	r25, 0xFF	; 255
    3236:	08 95       	ret

00003238 <__udivmodhi4>:
    3238:	aa 1b       	sub	r26, r26
    323a:	bb 1b       	sub	r27, r27
    323c:	51 e1       	ldi	r21, 0x11	; 17
    323e:	07 c0       	rjmp	.+14     	; 0x324e <__udivmodhi4_ep>

00003240 <__udivmodhi4_loop>:
    3240:	aa 1f       	adc	r26, r26
    3242:	bb 1f       	adc	r27, r27
    3244:	a6 17       	cp	r26, r22
    3246:	b7 07       	cpc	r27, r23
    3248:	10 f0       	brcs	.+4      	; 0x324e <__udivmodhi4_ep>
    324a:	a6 1b       	sub	r26, r22
    324c:	b7 0b       	sbc	r27, r23

0000324e <__udivmodhi4_ep>:
    324e:	88 1f       	adc	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	5a 95       	dec	r21
    3254:	a9 f7       	brne	.-22     	; 0x3240 <__udivmodhi4_loop>
    3256:	80 95       	com	r24
    3258:	90 95       	com	r25
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	08 95       	ret

00003260 <__prologue_saves__>:
    3260:	2f 92       	push	r2
    3262:	3f 92       	push	r3
    3264:	4f 92       	push	r4
    3266:	5f 92       	push	r5
    3268:	6f 92       	push	r6
    326a:	7f 92       	push	r7
    326c:	8f 92       	push	r8
    326e:	9f 92       	push	r9
    3270:	af 92       	push	r10
    3272:	bf 92       	push	r11
    3274:	cf 92       	push	r12
    3276:	df 92       	push	r13
    3278:	ef 92       	push	r14
    327a:	ff 92       	push	r15
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	ca 1b       	sub	r28, r26
    328a:	db 0b       	sbc	r29, r27
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	09 94       	ijmp

00003298 <__epilogue_restores__>:
    3298:	2a 88       	ldd	r2, Y+18	; 0x12
    329a:	39 88       	ldd	r3, Y+17	; 0x11
    329c:	48 88       	ldd	r4, Y+16	; 0x10
    329e:	5f 84       	ldd	r5, Y+15	; 0x0f
    32a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    32a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    32a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    32a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    32a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    32aa:	b9 84       	ldd	r11, Y+9	; 0x09
    32ac:	c8 84       	ldd	r12, Y+8	; 0x08
    32ae:	df 80       	ldd	r13, Y+7	; 0x07
    32b0:	ee 80       	ldd	r14, Y+6	; 0x06
    32b2:	fd 80       	ldd	r15, Y+5	; 0x05
    32b4:	0c 81       	ldd	r16, Y+4	; 0x04
    32b6:	1b 81       	ldd	r17, Y+3	; 0x03
    32b8:	aa 81       	ldd	r26, Y+2	; 0x02
    32ba:	b9 81       	ldd	r27, Y+1	; 0x01
    32bc:	ce 0f       	add	r28, r30
    32be:	d1 1d       	adc	r29, r1
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	ed 01       	movw	r28, r26
    32cc:	08 95       	ret

000032ce <itoa>:
    32ce:	fb 01       	movw	r30, r22
    32d0:	9f 01       	movw	r18, r30
    32d2:	e8 94       	clt
    32d4:	42 30       	cpi	r20, 0x02	; 2
    32d6:	c4 f0       	brlt	.+48     	; 0x3308 <itoa+0x3a>
    32d8:	45 32       	cpi	r20, 0x25	; 37
    32da:	b4 f4       	brge	.+44     	; 0x3308 <itoa+0x3a>
    32dc:	4a 30       	cpi	r20, 0x0A	; 10
    32de:	29 f4       	brne	.+10     	; 0x32ea <itoa+0x1c>
    32e0:	97 fb       	bst	r25, 7
    32e2:	1e f4       	brtc	.+6      	; 0x32ea <itoa+0x1c>
    32e4:	90 95       	com	r25
    32e6:	81 95       	neg	r24
    32e8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ea:	64 2f       	mov	r22, r20
    32ec:	77 27       	eor	r23, r23
    32ee:	0e 94 1c 19 	call	0x3238	; 0x3238 <__udivmodhi4>
    32f2:	80 5d       	subi	r24, 0xD0	; 208
    32f4:	8a 33       	cpi	r24, 0x3A	; 58
    32f6:	0c f0       	brlt	.+2      	; 0x32fa <itoa+0x2c>
    32f8:	89 5d       	subi	r24, 0xD9	; 217
    32fa:	81 93       	st	Z+, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	a1 f7       	brne	.-24     	; 0x32ea <itoa+0x1c>
    3302:	16 f4       	brtc	.+4      	; 0x3308 <itoa+0x3a>
    3304:	5d e2       	ldi	r21, 0x2D	; 45
    3306:	51 93       	st	Z+, r21
    3308:	10 82       	st	Z, r1
    330a:	c9 01       	movw	r24, r18
    330c:	0c 94 88 19 	jmp	0x3310	; 0x3310 <strrev>

00003310 <strrev>:
    3310:	dc 01       	movw	r26, r24
    3312:	fc 01       	movw	r30, r24
    3314:	67 2f       	mov	r22, r23
    3316:	71 91       	ld	r23, Z+
    3318:	77 23       	and	r23, r23
    331a:	e1 f7       	brne	.-8      	; 0x3314 <strrev+0x4>
    331c:	32 97       	sbiw	r30, 0x02	; 2
    331e:	04 c0       	rjmp	.+8      	; 0x3328 <strrev+0x18>
    3320:	7c 91       	ld	r23, X
    3322:	6d 93       	st	X+, r22
    3324:	70 83       	st	Z, r23
    3326:	62 91       	ld	r22, -Z
    3328:	ae 17       	cp	r26, r30
    332a:	bf 07       	cpc	r27, r31
    332c:	c8 f3       	brcs	.-14     	; 0x3320 <strrev+0x10>
    332e:	08 95       	ret

00003330 <_exit>:
    3330:	f8 94       	cli

00003332 <__stop_program>:
    3332:	ff cf       	rjmp	.-2      	; 0x3332 <__stop_program>
